<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Full Stack Python</title><link href="https://www.fullstackpython.com/" rel="alternate"></link><link href="https://www.fullstackpython.com/feeds/all-en.atom.xml" rel="self"></link><id>https://www.fullstackpython.com/</id><updated>2019-01-13T00:00:00-05:00</updated><entry><title>《Ansible入门》视频课程发布！</title><link href="https://www.fullstackpython.com/blog/introduction-ansible-videos-released.html" rel="alternate"></link><published>2019-01-13T00:00:00-05:00</published><updated>2019-01-13T00:00:00-05:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2019-01-13:blog/introduction-ansible-videos-released.html</id><summary type="html">&lt;p&gt;Check out the just-launched video course, 
&lt;a href="https://training.talkpython.fm/courses/explore_ansible/introduction-to-ansible-with-python"&gt;Introduction to Ansible&lt;/a&gt;
on
&lt;a href="https://training.talkpython.fm/"&gt;Talk Python Training&lt;/a&gt;. This is the
perfect course for you if you want to
learn to configure servers and deploy web apps with the 
&lt;a href="https://github.com/ansible/ansible"&gt;Ansible configuration management tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://training.talkpython.fm/courses/explore_ansible/introduction-to-ansible-with-python"&gt;&lt;img src="/img/logos/intro-to-ansible.jpg" class="shot outl rnd" width="100%"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My approach in this course is in less than 3 hours to teach you the core
concepts then get a ton of hands-on time creating Ansible Playbooks and
learning modules for practical applications. I also show you the errors
I frequently run into when using Ansible and how to fix them rather than
only showing the happy path.&lt;/p&gt;
&lt;p&gt;Now that this course has been published I'll be turning my attention back
to the Full Stack Python Guide to Deployments book update that uses
the latest version of Ansible, Python 3 and Ubuntu 18.04 LTS. More news
about the update coming as soon as possible. In addition, the Ansible
course pairs very well with the deployments book as they use the same
tools but give a different angle on how to learn and use them.&lt;/p&gt;
&lt;p&gt;Got questions or comments about 
&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;? Send me an email or 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;submit an issue ticket on GitHub&lt;/a&gt; 
to let me know how to improve the site as I continue to fill in the 
&lt;a href="https://www.fullstackpython.com/table-of-contents.html"&gt;table of contents&lt;/a&gt; 
with &lt;a href="https://www.fullstackpython.com/change-log.html"&gt;new pages&lt;/a&gt; and 
&lt;a href="https://www.fullstackpython.com/blog.html"&gt;new tutorials&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>给现有 Flask Web 应用程序添加 Okta 认证</title><link href="https://www.fullstackpython.com/blog/okta-user-auth-existing-flask-web-app.html" rel="alternate"></link><published>2018-11-02T00:00:00-04:00</published><updated>2018-11-02T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2018-10-31:blog/okta-user-auth-existing-flask-web-app.html</id><summary type="html">&lt;p&gt;It can be a lot of work to piece together a full authentication system
if you have an existing &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; web application that you are
coding. &lt;a href="https://developer.okta.com/signup/"&gt;Okta&lt;/a&gt; makes it much easier
to drop-in a complete user authentication system without a lot of
additional effort. In this tutorial we will take the 
&lt;a href="https://github.com/fullstackpython/flask-git-dashboard"&gt;Flask Git Dashboard&lt;/a&gt;
project as an example and add Okta to it.&lt;/p&gt;
&lt;h2&gt;Libraries&lt;/h2&gt;
&lt;p&gt;&lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt; is required for this tutorial and we will 
also use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/flask.html"&gt;Flask&lt;/a&gt; web framework &lt;a href="https://pypi.org/project/Flask/1.0.2/"&gt;version 1.0.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flask-oidc.readthedocs.io/en/latest/"&gt;Flask-OIDC&lt;/a&gt; where
  OIDC stands for "OpenID Connect". It provides support to use OpenID 
  Connect in Flask applications.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/okta/"&gt;Okta Python helper library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A free &lt;a href="https://developer.okta.com"&gt;Okta developer account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the finished code in this blog post is provided as open source 
under the MIT license on GitHub under the 
&lt;a href="https://github.com/fullstackpython/blog-code-examples"&gt;auth-existing-flask-app/finished directory of the blog-code-examples&lt;/a&gt; 
repository. Use and abuse the source code for your own applications.&lt;/p&gt;
&lt;h2&gt;Installing Dependencies&lt;/h2&gt;
&lt;p&gt;We will start out with an existing Flask web application. If you do not
have your own that you are modifying, clone this Git repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git@github.com:fullstackpython/blog-code-examples.git
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, create a new Python virtualenv for this project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv flaskauth
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtual environment with the &lt;code&gt;activate&lt;/code&gt; script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;. ./flaskauth/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt should change after activation:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/activate-virtualenv.jpg" width="100%" class="shot rnd outl" alt="Activating the flaskauth virtualenv."&gt;&lt;/p&gt;
&lt;p&gt;Remember that you will have to activate the virtualenv in every terminal 
window where you want to use the dependencies contained in this virtualenv.&lt;/p&gt;
&lt;p&gt;Change into the project directory within the &lt;code&gt;block-code-examples&lt;/code&gt; Git
repository that you cloned.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; blog-code-examples/auth-existing-flask-app/start/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can install the dependencies for the existing project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install -r requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Look for output similar to the following to confirm that the dependencies
successfully installed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
Collecting amqp&amp;lt;3.0,&amp;gt;=2.1.4 (from kombu&amp;lt;5.0,&amp;gt;=4.0.2-&amp;gt;Celery==4.1.0-&amp;gt;-r requirements.txt (line 4))
  Downloading https://files.pythonhosted.org/packages/7f/cf/12d4611fc67babd4ae250c9e8249c5650ae1933395488e9e7e3562b4ff24/amqp-2.3.2-py2.py3-none-any.whl (48kB)
    100% |████████████████████████████████| 51kB 10.7MB/s 
Collecting six&amp;gt;=1.5 (from python-dateutil-&amp;gt;alembic&amp;gt;=0.6-&amp;gt;Flask-Migrate==2.2.0-&amp;gt;-r requirements.txt (line 2))
  Using cached https://files.pythonhosted.org/packages/67/4b/141a581104b1f6397bfa78ac9d43d8ad29a7ca43ea90a2d863fe3056e86a/six-1.11.0-py2.py3-none-any.whl
Collecting vine&amp;gt;=1.1.3 (from amqp&amp;lt;3.0,&amp;gt;=2.1.4-&amp;gt;kombu&amp;lt;5.0,&amp;gt;=4.0.2-&amp;gt;Celery==4.1.0-&amp;gt;-r requirements.txt (line 4))
  Downloading https://files.pythonhosted.org/packages/10/50/5b1ebe42843c19f35edb15022ecae339fbec6db5b241a7a13c924dabf2a3/vine-1.1.4-py2.py3-none-any.whl
Installing collected packages: click, itsdangerous, Werkzeug, MarkupSafe, Jinja2, Flask, SQLAlchemy, Flask-SQLAlchemy, Mako, python-editor, six, python-dateutil, alembic, Flask-Migrate, billiard, pytz, vine, amqp, kombu, Celery, redis, WTForms
  Running setup.py install for MarkupSafe ... done
  Running setup.py install for SQLAlchemy ... done
  Running setup.py install for Mako ... done
  Running setup.py install for python-editor ... done
  Running setup.py install for alembic ... done
  Running setup.py install for billiard ... done
  Running setup.py install for WTForms ... done
Successfully installed Celery-4.1.0 Flask-1.0.2 Flask-Migrate-2.2.0 Flask-SQLAlchemy-2.3.2 Jinja2-2.10 Mako-1.0.7 MarkupSafe-1.0 SQLAlchemy-1.2.12 WTForms-2.1 Werkzeug-0.14.1 alembic-1.0.1 amqp-2.3.2 billiard-3.5.0.4 click-7.0 itsdangerous-1.1.0 kombu-4.2.1 python-dateutil-2.7.5 python-editor-1.0.3 pytz-2018.7 redis-2.10.6 six-1.11.0 vine-1.1.4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need a couple of additional dependencies for our project to
work, &lt;code&gt;flask-oidc&lt;/code&gt; and &lt;code&gt;okta&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install flask-oidc&amp;gt;=1.4.0 okta==0.0.4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dependencies are now properly installed into our virtual environment.
Let's test out the application to see if we can get it running properly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export FLASK_APP=flaskdash.py
export FLASK_ENV=development
flask run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We should see the application start up with some default development time
values:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; * Serving Flask app &lt;span class="s2"&gt;&amp;quot;flaskdash.py&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;lazy loading&lt;span class="o"&gt;)&lt;/span&gt;
 * Environment: development
 * Debug mode: on
 * Running on http://127.0.0.1:5000/ &lt;span class="o"&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class="o"&gt;)&lt;/span&gt;
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: &lt;span class="m"&gt;203&lt;/span&gt;-814-092
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Head to localhost:5000 in your web browser and we should see a 
work-in-progress dashboard:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/flask-dashboard.jpg" width="100%" class="shot rnd outl" alt="Dashboard provided by existing Flask application."&gt;&lt;/p&gt;
&lt;p&gt;It's time to get to setting up an Okta developer account so we can get the
appropriate configuration information for our application.&lt;/p&gt;
&lt;h2&gt;Okta for Authentication&lt;/h2&gt;
&lt;p&gt;Head to the &lt;a href="https://developer.okta.com/signup"&gt;Okta developers sign up page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/okta-sign-up.jpg" width="100%" class="shot rnd outl" alt="Okta developers landing page for signing up."&gt;&lt;/p&gt;
&lt;p&gt;Sign up for a new account or log into your existing account.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/okta-dev.jpg" width="100%" class="shot rnd outl" alt="Okta developer sign up flow."&gt;&lt;/p&gt;
&lt;p&gt;The interesting bit about the Okta developer sign up flow is that now you 
should check your email to finish creating your account. Look for an email 
like this one:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/okta-email.jpg" width="100%" class="shot rnd outl" alt="Okta sign up email."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Sign In" button and log into developer account using 
the temporary password found in the email. Set a new password and challenge
question. Then pick an image to match your account login process.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/okta-create-account.png" width="100%" class="shot rnd outl" alt="Okta finish creating an account."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Create Account" button and you will be wisked away to the
Okta developer dashboard.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/dev-dashboard.png" width="100%" class="shot rnd outl" alt="Okta developer dashboard."&gt;&lt;/p&gt;
&lt;p&gt;Find the "Org URL" as shown in the following image.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/okta-dev-dashboard-url.jpg" width="100%" class="shot rnd outl" alt="Okta Org URL value."&gt;&lt;/p&gt;
&lt;p&gt;We are going to use that URL in our secret credentials file so that
our Flask web app can properly connect to the Okta service.&lt;/p&gt;
&lt;p&gt;Create a new file in your project directory named 
&lt;code&gt;openidconnect_secrets.json&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;client_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_CLIENT_ID }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;client_secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_CLIENT_SECRET }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;auth_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_ORG_URL }}/oauth2/default/v1/authorize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;token_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_ORG_URL }}/oauth2/default/v1/token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;issuer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_ORG_URL }}/oauth2/default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;userinfo_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_ORG_URL }}/oauth2/default/userinfo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;redirect_uris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;http://localhost:5000/oidc/callback&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace the four &lt;code&gt;{{ OKTA_ORG_URL }}&lt;/code&gt; placeholders with the Org URL value
found in your dashboard. We will fill in the rest of the placeholders with 
actual values as we proceed through the tutorial. My 
&lt;code&gt;openidconnect_secret.json&lt;/code&gt; file would currently have the following
values based on my developer dashboard Org URL. 
&lt;strong&gt;Remember that your URL values will be different!&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;client_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_CLIENT_ID }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;client_secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_CLIENT_SECRET }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;~~&lt;/span&gt;    &lt;span class="nt"&gt;&amp;quot;auth_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default/v1/authorize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;~~&lt;/span&gt;    &lt;span class="nt"&gt;&amp;quot;token_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default/v1/token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;~~&lt;/span&gt;    &lt;span class="nt"&gt;&amp;quot;issuer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;~~&lt;/span&gt;    &lt;span class="nt"&gt;&amp;quot;userinfo_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default/userinfo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;redirect_uris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;http://localhost:5000/oidc/callback&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay awesome, we have our Okta account set up so we can add the 
authentication code to our Flask application.&lt;/p&gt;
&lt;h2&gt;Updating the Flask App with Okta&lt;/h2&gt;
&lt;p&gt;We need to connect our Flask code to our new Okta account. The
recommended way of including variables such as account credentials
in a Flask application is through
&lt;a href="http://flask.pocoo.org/docs/1.0/config/"&gt;configuration handling&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Update &lt;code&gt;config.py&lt;/code&gt; the Flask code with the following highlighted lines.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;development key&amp;#39;&lt;/span&gt;

    &lt;span class="c1"&gt;# Redis&lt;/span&gt;
    &lt;span class="n"&gt;REDIS_SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;REDIS_SERVER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;REDIS_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;REDIS_PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;6379&lt;/span&gt;
    &lt;span class="n"&gt;REDIS_DB&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;REDIS_DB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;REDIS_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;redis://{}:{}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;REDIS_SERVER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;REDIS_PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Celery task queue&lt;/span&gt;
    &lt;span class="n"&gt;CELERY_BROKER_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CELERY_BROKER_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;REDIS_URL&lt;/span&gt;
    &lt;span class="n"&gt;CELERY_RESULT_BACKEND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CELERY_RESULT_BACKEND&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;REDIS_URL&lt;/span&gt;

    &lt;span class="c1"&gt;# database settings&lt;/span&gt;
    &lt;span class="n"&gt;SQLALCHEMY_DATABASE_URI&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;DATABASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; \
      &lt;span class="s1"&gt;&amp;#39;sqlite:///&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abspath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dirname&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
      &lt;span class="s1"&gt;&amp;#39;flaskdash.db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;SQLALCHEMY_TRACK_MODIFICATIONS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;OIDC_CLIENT_SECRETS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;openidconnect_secrets.json&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;OIDC_COOKIE_SECURE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;OIDC_CALLBACK_ROUTE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/oidc/callback&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;OIDC_SCOPES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;openid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;profile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;OIDC_ID_TOKEN_COOKIE_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;oidc_token&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We first add three import lines, one to pull values from environment
variables, and the next two imports to make it possible to use OpenID
Connect and Okta in our application.&lt;/p&gt;
&lt;p&gt;The rest of the new code sets Flask application configuration
values that can be used to instantiate the OpenID Connect and
Okta clients.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OIDC_CLIENT_SECRETS&lt;/code&gt;: the location of the OpenID Connect secrets file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OIDC_COOKIE_SECURE&lt;/code&gt;: allows development mode for testing user login and
  registration without SSL. Your application must set this to &lt;code&gt;True&lt;/code&gt; in a
  production application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OIDC_CALLBACK_ROUTE&lt;/code&gt;: URL in the web app for handling user logins&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OIDC_SCOPES&lt;/code&gt;: what data to request about the user when they log in. Our
  application requests the basic email, name and profile information&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;: this is a Flask setting to keep sessions secure. The key 
  must never be made public or your web application user sessions will be
  compromised. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where do we get those application configuration values though? We
need to obtain them from our Okta account so go back to the
dashboard to create a new OpenID Connect application.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/select-applications.jpg" width="100%" class="shot rnd outl" alt="Select applications on the Okta developer dashboard."&gt;&lt;/p&gt;
&lt;p&gt;OpenID Connect applications use a client ID and client secret in
place of traditional usernames and passwords. The client ID and
client secret will tell your authorization server to recognize your 
application. Press the "Add Application" button.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/add-application.jpg" width="100%" class="shot rnd outl" alt="Click the Add Application button."&gt;&lt;/p&gt;
&lt;p&gt;On the new application screen choose "Web" and then press "Next".&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/web-application.jpg" width="100%" class="shot rnd outl" alt="Choose a web application."&gt;&lt;/p&gt;
&lt;p&gt;On the next page there are numerous configuration options but only a 
few values we need to fill in before we can get our credentials. Set
the following values to the &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Base URIs&lt;/code&gt; and &lt;code&gt;Login redirect URIs&lt;/code&gt;
properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;FlaskApp&lt;/strong&gt; for &lt;code&gt;Name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http://localhost:5000&lt;/strong&gt; for &lt;code&gt;Base URIs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http://localhost:5000/oidc/callback&lt;/strong&gt; for &lt;code&gt;Login redirect URIs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/set-app-configuration.jpg" width="100%" class="shot rnd outl" alt="Set application configuration values."&gt;&lt;/p&gt;
&lt;p&gt;Those are the three values you need to fill in for now so save the 
application to create it.&lt;/p&gt;
&lt;p&gt;On the next page scroll down to find your client and secret keys.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/client-credentials.jpg" width="100%" class="shot rnd outl" alt="Save the client credentials for later use."&gt;&lt;/p&gt;
&lt;p&gt;Copy and paste the client ID and client secret into the following 
highlighted lines to replace the &lt;code&gt;{{ OKTA_CLIENT_ID }}&lt;/code&gt; and 
&lt;code&gt;{{ OKTA_CLIENT_SECRET }}&lt;/code&gt; placeholders.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;~~&lt;/span&gt;    &lt;span class="nt"&gt;&amp;quot;client_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_CLIENT_ID }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;~~&lt;/span&gt;    &lt;span class="nt"&gt;&amp;quot;client_secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_CLIENT_SECRET }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;auth_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default/v1/authorize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;token_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default/v1/token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;issuer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;userinfo_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default/userinfo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;redirect_uris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;http://localhost:5000/oidc/callback&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save the file and make sure to keep it out of version control as those
secret values need to stay secret.&lt;/p&gt;
&lt;p&gt;We have one more step in the Okta developer dashboard before we upgrade 
our Flask application with the authentication code: creating an 
&lt;a href="https://developer.okta.com/use_cases/api_access_management/"&gt;API authentication token&lt;/a&gt;.
Go to the API tab.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/api-tab.jpg" width="100%" class="shot rnd outl" alt="Click the API tab in the dashboard."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Create Token" button.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/create-token.png" width="100%" class="shot rnd outl" alt="Create an authentication token to access Okta."&gt;&lt;/p&gt;
&lt;p&gt;Name the token &lt;code&gt;FlaskToken&lt;/code&gt; and copy it. Save the token somewhere
safe as we will not be able to access it through the dashboard again. We
are going to use this token when setting the &lt;code&gt;OKTA_AUTH_TOKEN&lt;/code&gt; environment
variable in the next section of this tutorial.&lt;/p&gt;
&lt;p&gt;Okay, we finally have all the Okta service configuration and tokens in
our &lt;code&gt;openidconnect_secret.json&lt;/code&gt; file that we need to finish our application.&lt;/p&gt;
&lt;p&gt;Update &lt;code&gt;app/__init__.py&lt;/code&gt; with these highlighted lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app.utils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;make_celery&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_migrate&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Migrate&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_oidc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OpenIDConnect&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;okta&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UsersClient&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;static_url_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLAlchemy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;migrate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Migrate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 

&lt;span class="c1"&gt;# connect to Redis instance&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;REDIS_SERVER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                             &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;REDIS_PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                             &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;REDIS_DB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;celery&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_celery&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="c1"&gt;# instantiate OpenID client to handle user session&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;oidc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OpenIDConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="c1"&gt;# Okta client will determine if a user has an appropriate account&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;okta_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UsersClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OKTA_ORG_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;                          &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OKTA_AUTH_TOKEN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;routes&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can now access the &lt;code&gt;okta_client&lt;/code&gt; in our routes. Open &lt;code&gt;app/routes.py&lt;/code&gt;
and update the following lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;send_from_directory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;app&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;oidc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;okta_client&lt;/span&gt;


&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nd"&gt;@app.before_request&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;before_request&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;oidc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_loggedin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;okta_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oidc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_getfield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sub&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/js/&amp;lt;path:path&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_js&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;send_from_directory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/css/&amp;lt;path:path&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_css&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;send_from_directory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;css&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dashboard&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dashboard.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/repositories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nd"&gt;@oidc.require_login&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;repositories&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;repositories.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nd"&gt;@oidc.require_login&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.repositories&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/logout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;oidc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.landing_page&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above new highlighted lines check whether or not a user is logged in
before each request. If a route requires a logged in user due to the 
&lt;code&gt;@oidc.require_login&lt;/code&gt; decorator then the user will be redirect to the
sign in page. We also added routes under &lt;code&gt;/login&lt;/code&gt; and &lt;code&gt;/logout&lt;/code&gt; to make
it possible to log in and out of the application.&lt;/p&gt;
&lt;p&gt;Set three environment variables so our application can use them when we
run it. Make sure the placeholders &lt;code&gt;ORG_URL&lt;/code&gt; and &lt;code&gt;AUTH_TOKEN&lt;/code&gt; are set with 
your actual Org URL value and auth token from the Okta developer dashboard.&lt;/p&gt;
&lt;p&gt;On the command line run the following commands, making sure to replace
any placeholder values with your own tokens and URLs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# this tells Flask we want to run the built-in server in dev mode
export FLASK_ENV=development
# make sure to use a very long random string here that cannot be guessed
export SECRET_KEY=&amp;#39;a very long string with lots of numbers and letters&amp;#39;
# this is the same Org URL found on your developer dashboard
# for example, https://dev-860408.oktapreview.com
export OKTA_ORG_URL=&amp;#39;ORG_URL&amp;#39;
# this is the API authentication token we created
export OKTA_AUTH_TOKEN=&amp;#39;AUTH_TOKEN&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now re-run the Flask application:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set FLASK_APP=app.py
flask run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should be in good shape if the development server starts up with output
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(flaskauth)$ flask run
 * Environment: development
 * Debug mode: on
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 415-920-546
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Head to localhost:5000 in a browser where you are not already logged into
your Okta account (an incognito window of your web browser works great).&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/dashboard-incognito.jpg" width="100%" class="shot rnd outl" alt="Dashboard while in incognito mode."&gt;&lt;/p&gt;
&lt;p&gt;Let's test the redirect functionality when we try to go to the &lt;code&gt;/dashboard&lt;/code&gt;
route by going to localhost:5000/repositories. We get redirected to the Okta
login page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/okta-redirect.jpg" width="100%" class="shot rnd outl" alt="Getting redirected while in incognito mode."&gt;&lt;/p&gt;
&lt;p&gt;Enter your Okta developer username and password to log into your application.
For development purposes this will work fine for testing but obviously in a
production application you will create other accounts for users to log into.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181031-okta-exist-flask/repositories-enter.jpg" width="100%" class="shot rnd outl" alt="Got into the repositories page after logging in."&gt;&lt;/p&gt;
&lt;p&gt;To unauthenticate your user go to localhost:5000/logout. When you go back 
to localhost:5000/repositories again you will now have to re-authenticate. &lt;/p&gt;
&lt;h2&gt;What Now?&lt;/h2&gt;
&lt;p&gt;We configured an existing &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; application to use Okta for
user authentication and identity management via the
&lt;a href="https://developer.okta.com/use_cases/api_access_management/"&gt;Okta API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next you can try one of the following tutorials to add other features to 
the Flask application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/blog/hosted-monitoring-flask-web-apps.html"&gt;How to Add Hosted Monitoring to Flask Web Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/develop-flask-web-apps-docker-containers-macos.html"&gt;Develop and Run Flask Apps within Docker Containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/respond-sms-text-messages-python-flask.html"&gt;Responding to SMS Text Messages with Python &amp;amp; Flask&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also determine what to code next in your Python project by reading 
the &lt;a href="/table-of-contents.html"&gt;Full Stack Python table of contents page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I am also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/181031-auth-existing-flask-app.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>全栈 Python 最新教材</title><link href="https://www.fullstackpython.com/blog/fresh-tutorials-october-2018.html" rel="alternate"></link><published>2018-10-22T00:00:00-04:00</published><updated>2018-10-22T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2018-10-22:blog/fresh-tutorials-october-2018.html</id><summary type="html">&lt;p&gt;There are a bunch of 
&lt;a href="https://www.fullstackpython.com/blog.html"&gt;new tutorials&lt;/a&gt;
on &lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt; that were written
since the last time I sent out an email newsletter. These range from getting 
started with some popular open source projects to integrating third party 
APIs to build authentication into Flask applications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.fullstackpython.com/blog/python-3-flask-gunicorn-ubuntu-1804-bionic-beaver.html"&gt;Configure Python 3, Flask and Gunicorn on Ubuntu 18.04 LTS&lt;/a&gt;
  shows you how to set up your Python and 
  &lt;a href="https://www.fullstackpython.com/flask.html"&gt;Flask&lt;/a&gt; 
  &lt;a href="https://www.fullstackpython.com/development-environments.html"&gt;development environment&lt;/a&gt;
  on the latest &lt;a href="https://www.fullstackpython.com/ubuntu.html"&gt;Ubuntu&lt;/a&gt;
  Long-Term Support (LTS) release.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.fullstackpython.com/blog/add-user-authentication-flask-apps-okta.html"&gt;How to Add User Authentication to Flask Apps with Okta&lt;/a&gt;
  covers using OpenID Connect and the Okta API in Flask applications
  to handle user authentication.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.fullstackpython.com/blog/provision-ubuntu-1804-linux-servers-digitalocean.html"&gt;How to Provision Ubuntu 18.04 LTS Linux Servers on DigitalOcean&lt;/a&gt;
  is a quick tutorial for developers who have not seen how easy it is
  to spin up a virtual private server on DigitalOcean for hosting
  their Python applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.fullstackpython.com/blog/first-steps-bottle-web-apps-docker-containers.html"&gt;Running Bottle Apps in Docker Containers on macOS&lt;/a&gt;
  provides just the basics to start using 
  &lt;a href="https://www.fullstackpython.com/docker.html"&gt;Docker&lt;/a&gt; on macOS
  to run an example Flask web app.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://www.fullstackpython.com/blog/explain-products-developers.html"&gt;How to Explain Your Products to Developers&lt;/a&gt;
  is based on a talk I gave to a group of technical founders and investors
  in Silicon Valley. It's a bit different from my usual step-by-step 
  tutorial in that it gives strong advice based on my experience rather
  than show how to use an open source project or integrate a third-party
  API.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Got questions or comments about 
&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;? Send me an email or 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;submit an issue ticket on GitHub&lt;/a&gt; 
to let me know how to improve the site as I continue to fill in the 
&lt;a href="https://www.fullstackpython.com/table-of-contents.html"&gt;table of contents&lt;/a&gt; 
with &lt;a href="https://www.fullstackpython.com/change-log.html"&gt;new pages&lt;/a&gt; and 
&lt;a href="https://www.fullstackpython.com/blog.html"&gt;new tutorials&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>如何在 DigitalOcean 上部署 Ubuntu 18.04 LTS 服务器</title><link href="https://www.fullstackpython.com/blog/provision-ubuntu-1804-linux-servers-digitalocean.html" rel="alternate"></link><published>2018-10-14T00:00:00-04:00</published><updated>2018-10-14T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2018-10-14:blog/provision-ubuntu-1804-linux-servers-digitalocean.html</id><summary type="html">&lt;p&gt;&lt;a href="/web-development.html"&gt;Python web applications&lt;/a&gt; need to be 
&lt;a href="/deployment.html"&gt;deployed&lt;/a&gt; to a production &lt;a href="/servers.html"&gt;server&lt;/a&gt; or 
&lt;a href="/platform-as-a-service.html"&gt;service&lt;/a&gt; so your users have access to
the application.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://do.co/fullstackpython"&gt;DigitalOcean&lt;/a&gt; is one such service
that makes it easy to immediately get access to initially free servers 
which are low cost (~$5 per month depending on the resources) to continue 
using after the first few months.&lt;/p&gt;
&lt;p&gt;In this tutorial we'll learn how to quickly sign up and spin up an
&lt;a href="/ubuntu.html"&gt;Ubuntu&lt;/a&gt;-based Linux server that only you will have
access to based on a private SSH key.&lt;/p&gt;
&lt;h2&gt;Obtain Your Virtual Server&lt;/h2&gt;
&lt;p&gt;These steps sign you up for a DigitalOcean account and guide you through 
provisioning a virtual private server called a "Droplet" for $5/month which 
we configure throughout the rest of the book.&lt;/p&gt;
&lt;p&gt;Point your web browser to 
&lt;a href="https://do.co/fullstackpython"&gt;Digitalocean.com's registration page&lt;/a&gt;.
Note that this link uses a referral code which gives you $100 in free
credit. Feel free to just go to 
&lt;a href="https://www.digitalocean.com/"&gt;digitalocean.com&lt;/a&gt; if you 
do not want to use the referral link (you will not get the $100 in credit 
though). Their landing page will look something like the following image.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181014-digitalocean-ubuntu/do-landing-page.jpg" class="shot rnd outl" alt="DigitalOcean landing page." width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Register for a new DigitalOcean account. Fill out the appropriate 
information. When your account is registered and active you can create 
a new DigitalOcean server, which they call "droplets".&lt;/p&gt;
&lt;p&gt;After you finish the registration process you will be able to start
creating DigitalOcean servers. Select the "Create" button which 
opens a drop-down menu. Choose "Droplets" to go to the "Create Droplets"
page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181014-digitalocean-ubuntu/create-droplet.png" class="shot rnd outl" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;The new droplet configuration screen will appear and look like 
the following image. The default Ubuntu instance is 16.04, but
we will use the newer LTS release 18.04 in this book.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181014-digitalocean-ubuntu/create-droplets-page.jpg" class="shot" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Select the 1 GB memory-sized server for $5 per month. This instance
size should be perfect for prototypes, side projects and minimum
viable products. Feel free to choose a larger instance size if you
want more memory and resources for running your application.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181014-digitalocean-ubuntu/create-droplet-size.jpg" class="shot" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Scroll down and choose the data center region where you want your
instance to be located. I typically choose New York because I am
on the East Coast of the United Statest in Washington, D.C., and you will 
want the server to be closest to your users' location.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181014-digitalocean-ubuntu/choose-region.png" class="shot" alt="Choose the data center region closest to your customers." width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Next, scroll down and click "New SSH Key". Copy and paste in the contents 
of your &lt;strong&gt;public&lt;/strong&gt; SSH key. If you do not yet have an SSH key here are a 
couple of guides that will walk you through creating one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/blog/ssh-keys-macos-sierra.html"&gt;Creating SSH keys on macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/ssh-keys-ubuntu-linux.html"&gt;Creating SSH keys on Ubuntu Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see the contents of a public key using the &lt;code&gt;cat&lt;/code&gt; command. For 
example on my system the command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cat root.pub
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Outputs the contents of my public key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQCqAY/Le17HZpa4+eSoh2L9FMYaQ7EnLOGkYbcbsiQNpnF4FTAemF7tbvMvjpVLU6P9AVGs6qEeJdgTE2gH8fq881AUsQ8it1gla2oAlc+vOZmqWPYaLIl5g9DkGwvbITXayobDcw9wTN5tOITOxp3BV5jqanqoqDAPH1RGfT6A5vkJFsmu4w7cPsn9tiqfZZdge3WkpMNT1M3ou+ogrAwE6Ra531s3zYVG9y1688BGdYzbQFfU0+Pou6Z43Do6xbh2hAfQ5hUuTG0OrE3b/yhGcxEWz0Y9+wPGmxm3/0ioTfMWUG3LOQn+oMtKX/PXX/qOJuUjszbqYBvSYS3kv2IVFGV2KEIKC1xgUDfw+HOV4HlIosIbc97zY83m0Ft+tFavPaiQYrar3wCsVfRUltSR4EwNnLmvNYeMVSS8jSP2ZSPwbL8GO7xxAAS9Oy12set1f4OxdPhEUB9rEfAssU1mE6J5eq+Drs8KX04OasLSLt7kP7wWA27I9pU/y9NRHxEsO0YbLG7DzfHGl4QVXwDjIA5GpwjQMwZLt+lyGc4hpnuXg+IUR6MXI90Hh64ch32nSC8j/hjnWCWgj8Cyuc4Rd/2OtO5dHpbjSyU5Yza2lzIqFbFRo7aQNaIkBIioJnc1d6mrg9mLxfd5Ef2ez9bUjqcq4K7uH/JAm0H2Vk1VFQ&lt;span class="o"&gt;==&lt;/span&gt; matthew.makai@gmail.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copy and paste this key into the DigitalOcean modal window and give it 
a memorable name for future reference:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181014-digitalocean-ubuntu/root-key.png" class="shot rnd outl" alt="Paste in the public root key into the modal window." width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Optionally, give your server a nickname such as &lt;code&gt;flask-deploy-manual&lt;/code&gt;.
Then click the big green "Create" button at the bottom of the screen.&lt;/p&gt;
&lt;p&gt;The server provisioning process will begin and our Ubuntu Linux 18.04 
LTS-powered will soon be ready to go. &lt;/p&gt;
&lt;p&gt;Ubuntu 18.04 is the current Long Term Support (LTS) release and has a 
5 year support lifecycle. This version will receive security updates until 
April 2023 as shown on the 
&lt;a href="https://www.ubuntu.com/info/release-end-of-life"&gt;Ubuntu release end-of-life&lt;/a&gt;
page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181014-digitalocean-ubuntu/ubuntu-lts-releases.png" class="shot rnd outl" alt="Ubuntu end of life schedule for all releases." width="100%"&gt;&lt;/p&gt;
&lt;p&gt;You should now be back on the DigitalOcean dashboard.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181014-digitalocean-ubuntu/ready-to-deploy.png" class="shot rnd outl" alt="New Ubuntu server ready for access." width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Our server is now up and ready for SSH access.&lt;/p&gt;
&lt;p&gt;Connect to the server using the IP address associated with it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# make sure to replace 192.168.1.1 with your server&amp;#39;s IP address
# and the &amp;quot;private_key&amp;quot; name with the name of your private key
ssh -i ./private_key 192.168.1.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now be connected to your new server and can proceed
with development or deployment.&lt;/p&gt;
&lt;h2&gt;What's Next?&lt;/h2&gt;
&lt;p&gt;We just stood up a new virtual private server on DigitalOcean that can be
used as a production or development environment.&lt;/p&gt;
&lt;p&gt;Next up I recommend either configuring the development environment or
deploying your application with one of the following tutorials:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/blog/python-3-flask-gunicorn-ubuntu-1804-bionic-beaver.html"&gt;Configure Python 3, Flask and Gunicorn on Ubuntu 18.04 LTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/make-phone-calls-python.html"&gt;How to Make Phone Calls in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=vGphzPLemZE"&gt;5 ways to deploy your Python web app from PyCon US 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also figure out what to code next in your Python project by reading 
the &lt;a href="/table-of-contents.html"&gt;Full Stack Python table of contents page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/181014-digitalocean-ubuntu-1804.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>如何给 Flask 应用用户认证添加 Okta</title><link href="https://www.fullstackpython.com/blog/add-user-authentication-flask-apps-okta.html" rel="alternate"></link><published>2018-10-10T00:00:00-04:00</published><updated>2018-10-10T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2018-10-08:blog/add-user-authentication-flask-apps-okta.html</id><summary type="html">&lt;p&gt;User authentication is a basic feature in 
&lt;a href="/web-development.html"&gt;web applications&lt;/a&gt; so people can create and access 
their own accounts. Unfortunately, authentication is not always easy to
set up and there are many ways to incorrectly implement login and logout
features. &lt;/p&gt;
&lt;p&gt;This tutorial walks through how to use the 
&lt;a href="https://developer.okta.com/use_cases/authentication/"&gt;secure identity authentication service&lt;/a&gt;
called &lt;a href="https://developer.okta.com/"&gt;Okta&lt;/a&gt;, which is free for up to 1,000
active user accounts, to easily handle user data in &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; 
applications.&lt;/p&gt;
&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;Python 3 is strongly recommended for building applications and this
tutorial was built with Python 3.7 although earlier versions of Python 3 
should also work fine. In addition to Python 3.x we will also use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/flask.html"&gt;Flask&lt;/a&gt; web framework &lt;a href="https://pypi.org/project/Flask/1.0.2/"&gt;version 1.0.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://flask-oidc.readthedocs.io/en/latest/"&gt;Flask-OIDC&lt;/a&gt; where
  OIDC stands for "OpenID Connect". It provides support to use OpenID 
  Connect in Flask applications.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/okta/"&gt;Okta Python helper library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A free &lt;a href="https://developer.okta.com"&gt;Okta developer account&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the code in this blog post is provided as open source under the 
MIT license on GitHub under the 
&lt;a href="https://github.com/fullstackpython/blog-code-examples"&gt;flask-auth-okta directory of the blog-code-examples&lt;/a&gt; 
repository. Use and abuse the source code for applications you want to 
build.&lt;/p&gt;
&lt;h2&gt;Installing Dependencies&lt;/h2&gt;
&lt;p&gt;Create a new Python virtualenv for this project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv flaskauth
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtual environment with the &lt;code&gt;activate&lt;/code&gt; script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;. ./flaskauth/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt should change after activation:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/activate-virtualenv.jpg" width="100%" class="shot rnd outl" alt="Activating the flaskauth virtualenv."&gt;&lt;/p&gt;
&lt;p&gt;Remember that you will have to activate the virtualenv in every terminal 
window where you want to use the dependencies contained in this virtualenv.&lt;/p&gt;
&lt;p&gt;Now we can install &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; and the Okta dependencies.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install flask&amp;gt;=1.0.2 flask-oidc&amp;gt;=1.4.0 okta==0.0.4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Look for output similar to the following to confirm that the dependencies
successfully installed:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
Collecting idna&amp;lt;2.8,&amp;gt;=2.5 (from requests&amp;gt;=2.5.3-&amp;gt;okta)
  Downloading https://files.pythonhosted.org/packages/4b/2a/0276479a4b3caeb8a8c1af2f8e4355746a97fab05a372e4a2c6a6b876165/idna-2.7-py2.py3-none-any.whl (58kB)
    100% |████████████████████████████████| 61kB 16.6MB/s 
Collecting urllib3&amp;lt;1.24,&amp;gt;=1.21.1 (from requests&amp;gt;=2.5.3-&amp;gt;okta)
  Downloading https://files.pythonhosted.org/packages/bd/c9/6fdd990019071a4a32a5e7cb78a1d92c53851ef4f56f62a3486e6a7d8ffb/urllib3-1.23-py2.py3-none-any.whl (133kB)
    100% |████████████████████████████████| 143kB 14.0MB/s 
Installing collected packages: MarkupSafe, Jinja2, click, itsdangerous, Werkzeug, flask, pyasn1, pyasn1-modules, rsa, httplib2, six, oauth2client, flask-oidc, chardet, certifi, idna, urllib3, requests, python-dateutil, okta
  Running setup.py install for MarkupSafe ... done
  Running setup.py install for itsdangerous ... done
  Running setup.py install for httplib2 ... done
  Running setup.py install for flask-oidc ... done
  Running setup.py install for okta ... done
Successfully installed Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.14.1 certifi-2018.8.24 chardet-3.0.4 click-6.7 flask-1.0.2 flask-oidc-1.4.0 httplib2-0.11.3 idna-2.7 itsdangerous-0.24 oauth2client-4.1.3 okta-0.0.4 pyasn1-0.4.4 pyasn1-modules-0.2.2 python-dateutil-2.7.3 requests-2.19.1 rsa-4.0 six-1.11.0 urllib3-1.23
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We installed our required Flask and the Okta dependencies so let's get to building
the Flask application.&lt;/p&gt;
&lt;h2&gt;Creating A Basic Flask App&lt;/h2&gt;
&lt;p&gt;The first step before adding authentication to our Flask application is
to write some scaffolding functions. The authentication will hook into
these functions, such as &lt;code&gt;signin&lt;/code&gt; and &lt;code&gt;signout&lt;/code&gt;, to ensure the auth
process works properly.&lt;/p&gt;
&lt;p&gt;Create a directory for your project named &lt;code&gt;thundercats&lt;/code&gt;. Why &lt;code&gt;thundercats&lt;/code&gt;?
Why &lt;em&gt;not&lt;/em&gt; Thundercats?&lt;/p&gt;
&lt;p&gt;Within the &lt;code&gt;thundercats&lt;/code&gt; directly create a file named &lt;code&gt;app.py&lt;/code&gt; with the 
following initial contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# imports for Flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/lair&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lair&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Thundercats (supposed to be hidden) lair.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;landing_page&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Thundercats, Thundercats, hoooooooooooo!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can run our Flask app using the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set FLASK_APP=app.py
flask run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go to localhost:5000 in your web browser and you should see:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/flask-app-running.png" width="100%" class="shot rnd outl" alt="Simple version of Flask application running."&gt;&lt;/p&gt;
&lt;p&gt;Now go to our "hidden lair" at localhost:5000/lair/. Eventually this
page should require authentication to access, but for now it appears
without any login challenge:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/flask-app-lair.png" width="100%" class="shot rnd outl" alt="Part of Flask app that should be hidden behind a login page."&gt;&lt;/p&gt;
&lt;p&gt;Awesome, our basic app is up and running, let's get to the authentication
functionality.&lt;/p&gt;
&lt;h2&gt;Auth-as-a-Service&lt;/h2&gt;
&lt;p&gt;Head to the &lt;a href="https://developer.okta.com/signup"&gt;Okta developers sign up page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/okta-sign-up.jpg" width="100%" class="shot rnd outl" alt="Okta developers landing page for signing up."&gt;&lt;/p&gt;
&lt;p&gt;Sign up for a new account or log into your existing account.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/okta-dev.jpg" width="100%" class="shot rnd outl" alt="Okta developer sign up flow."&gt;&lt;/p&gt;
&lt;p&gt;The interesting bit about the Okta developer sign up flow is that now you 
should check your email to finish creating your account. Look for an email 
like this one:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/okta-email.jpg" width="100%" class="shot rnd outl" alt="Okta sign up email."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Sign In" button and log into developer account using 
the temporary password found in the email. Set a new password and challenge
question. Then pick an image to match your account login process.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/okta-create-account.png" width="100%" class="shot rnd outl" alt="Okta finish creating an account."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Create Account" button and you will be wisked away to the
Okta developer dashboard.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/dev-dashboard.png" width="100%" class="shot rnd outl" alt="Okta developer dashboard."&gt;&lt;/p&gt;
&lt;p&gt;Find the "Org URL" as shown in the following image.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/okta-dev-dashboard-url.jpg" width="100%" class="shot rnd outl" alt="Okta Org URL value."&gt;&lt;/p&gt;
&lt;p&gt;We are going to use that URL in our secret credentials file so that
our Flask web app can properly connect to the Okta service.&lt;/p&gt;
&lt;p&gt;Create a new file in your project directory named 
&lt;code&gt;openidconnect_secrets.json&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;client_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_CLIENT_ID }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;client_secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_CLIENT_SECRET }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;auth_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_ORG_URL }}/oauth2/default/v1/authorize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;token_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_ORG_URL }}/oauth2/default/v1/token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;issuer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_ORG_URL }}/oauth2/default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;userinfo_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_ORG_URL }}/oauth2/default/userinfo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;redirect_uris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;http://localhost:5000/oidc/callback&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Replace the four &lt;code&gt;{{ OKTA_ORG_URL }}&lt;/code&gt; placeholders with the Org URL value
found in your dashboard. We will fill in the rest of the placeholders with 
actual values as we proceed through the tutorial. My 
&lt;code&gt;openidconnect_secret.json&lt;/code&gt; file would currently have the following
values based on my developer dashboard Org URL. 
&lt;strong&gt;Remember that your URL values will be different!&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;client_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_CLIENT_ID }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;client_secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_CLIENT_SECRET }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;~~&lt;/span&gt;    &lt;span class="nt"&gt;&amp;quot;auth_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default/v1/authorize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;~~&lt;/span&gt;    &lt;span class="nt"&gt;&amp;quot;token_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default/v1/token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;~~&lt;/span&gt;    &lt;span class="nt"&gt;&amp;quot;issuer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;~~&lt;/span&gt;    &lt;span class="nt"&gt;&amp;quot;userinfo_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default/userinfo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;redirect_uris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;http://localhost:5000/oidc/callback&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Okay awesome, we have our Okta account set up so we can add the 
authentication code to our Flask application.&lt;/p&gt;
&lt;h2&gt;Connecting Flask to Okta&lt;/h2&gt;
&lt;p&gt;We need to connect our Flask code to our new Okta account. The
recommended way of including variables such as account credentials
in a Flask application is through
&lt;a href="http://flask.pocoo.org/docs/1.0/config/"&gt;configuration handling&lt;/a&gt; 
so we will use that in our account.&lt;/p&gt;
&lt;p&gt;Update the Flask code with the following highlighted lines.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# imports for both Flask and Okta connection&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_oidc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OpenIDConnect&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;okta&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UsersClient&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="c1"&gt;# secret credentials for Okta connection&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_CLIENT_SECRETS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;openidconnect_secrets.json&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_COOKIE_SECURE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_CALLBACK_ROUTE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/oidc/callback&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_SCOPES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;openid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;profile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SECRET_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SECRET_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_ID_TOKEN_COOKIE_NAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;oidc_token&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="c1"&gt;# instantiate OpenID client to handle user session&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;oidc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OpenIDConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="c1"&gt;# Okta client will determine if a user has an appropriate account&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;okta_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UsersClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OKTA_ORG_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;                          &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OKTA_AUTH_TOKEN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/lair&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lair&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Thundercats (supposed to be hidden) lair.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;landing_page&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Thundercats, Thundercats, hoooooooooooo!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We first add three import lines, one to pull values from environment
variables, and the next two imports to make it possible to use OpenID
Connect and Okta in our application.&lt;/p&gt;
&lt;p&gt;The rest of the new code sets Flask application configuration
values that can be used to instantiate the OpenID Connect and
Okta clients.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;OIDC_CLIENT_SECRETS&lt;/code&gt;: the location of the OpenID Connect secrets file&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OIDC_COOKIE_SECURE&lt;/code&gt;: allows development mode for testing user login and
  registration without SSL. Your application must set this to &lt;code&gt;True&lt;/code&gt; in a
  production application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OIDC_CALLBACK_ROUTE&lt;/code&gt;: URL in the web app for handling user logins&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OIDC_SCOPES&lt;/code&gt;: what data to request about the user when they log in. Our
  application requests the basic email, name and profile information&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SECRET_KEY&lt;/code&gt;: this is a Flask setting to keep sessions secure. The key 
  must never be made public or your web application user sessions will be
  compromised. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where do we get those application configuration values though? We
need to obtain them from our Okta account so go back to the
dashboard to create a new OpenID Connect application.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/select-applications.jpg" width="100%" class="shot rnd outl" alt="Select applications on the Okta developer dashboard."&gt;&lt;/p&gt;
&lt;p&gt;OpenID Connect applications use a client ID and client secret in
place of traditional usernames and passwords. The client ID and
client secret will tell your authorization server to recognize your 
application. Press the "Add Application" button.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/add-application.jpg" width="100%" class="shot rnd outl" alt="Click the Add Application button."&gt;&lt;/p&gt;
&lt;p&gt;On the new application screen choose "Web" and then press "Next".&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/web-application.jpg" width="100%" class="shot rnd outl" alt="Choose a web application."&gt;&lt;/p&gt;
&lt;p&gt;On the next page there are numerous configuration options but only a 
few values we need to fill in before we can get our credentials. Set
the following values to the &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;Base URIs&lt;/code&gt; and &lt;code&gt;Login redirect URIs&lt;/code&gt;
properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;ThunderFlaskCats&lt;/strong&gt; for &lt;code&gt;Name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http://localhost:5000&lt;/strong&gt; for &lt;code&gt;Base URIs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;http://localhost:5000/oidc/callback&lt;/strong&gt; for &lt;code&gt;Login redirect URIs&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/set-app-configuration.jpg" width="100%" class="shot rnd outl" alt="Set application configuration values."&gt;&lt;/p&gt;
&lt;p&gt;Those are the three values you need to fill in for now so save the 
application to create it.&lt;/p&gt;
&lt;p&gt;On the next page scroll down to find your client and secret keys.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/client-credentials.jpg" width="100%" class="shot rnd outl" alt="Save the client credentials for later use."&gt;&lt;/p&gt;
&lt;p&gt;Copy and paste the client ID and client secret into the following 
highlighted lines to replace the &lt;code&gt;{{ OKTA_CLIENT_ID }}&lt;/code&gt; and 
&lt;code&gt;{{ OKTA_CLIENT_SECRET }}&lt;/code&gt; placeholders.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;quot;web&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;~~&lt;/span&gt;    &lt;span class="nt"&gt;&amp;quot;client_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_CLIENT_ID }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="err"&gt;~~&lt;/span&gt;    &lt;span class="nt"&gt;&amp;quot;client_secret&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{ OKTA_CLIENT_SECRET }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;auth_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default/v1/authorize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;token_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default/v1/token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;issuer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;userinfo_uri&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dev-860408.oktapreview.com/oauth2/default/userinfo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;quot;redirect_uris&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="s2"&gt;&amp;quot;http://localhost:5000/oidc/callback&amp;quot;&lt;/span&gt;
    &lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save the file and make sure to keep it out of version control as those
secret values need to stay secret.&lt;/p&gt;
&lt;p&gt;We have one more step in the Okta developer dashboard before we upgrade 
our Flask application with the authentication code: creating an 
&lt;a href="https://developer.okta.com/use_cases/api_access_management/"&gt;API authentication token&lt;/a&gt;.
Go to the API tab.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/api-tab.jpg" width="100%" class="shot rnd outl" alt="Click the API tab in the dashboard."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Create Token" button.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/create-token.png" width="100%" class="shot rnd outl" alt="Create an authentication token to access Okta."&gt;&lt;/p&gt;
&lt;p&gt;Name the token &lt;code&gt;ThunderFlaskCatsToken&lt;/code&gt; and copy it. Save the token somewhere
safe as we will not be able to access it through the dashboard again. We
are going to use this token when setting the &lt;code&gt;OKTA_AUTH_TOKEN&lt;/code&gt; environment
variable in the next section of this tutorial.&lt;/p&gt;
&lt;p&gt;Okay, we finally have all the Okta service configuration and tokens in
our &lt;code&gt;openidconnect_secret.json&lt;/code&gt; file that we need to finish our application.&lt;/p&gt;
&lt;h2&gt;Protecting the Lair&lt;/h2&gt;
&lt;p&gt;Our configuration is set so update the &lt;code&gt;app.py&lt;/code&gt; file with the following 
highlighted lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# imports for both Flask and Okta connection&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_oidc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OpenIDConnect&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;okta&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UsersClient&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# secret credentials for Okta connection&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_CLIENT_SECRETS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;openidconnect_secrets.json&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_COOKIE_SECURE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_CALLBACK_ROUTE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/oidc/callback&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_SCOPES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;openid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;profile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SECRET_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SECRET_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_ID_TOKEN_COOKIE_NAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;oidc_token&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# instantiate OpenID client to handle user session&lt;/span&gt;
&lt;span class="n"&gt;oidc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OpenIDConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Okta client will determine if a user has an appropriate account&lt;/span&gt;
&lt;span class="n"&gt;okta_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UsersClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OKTA_ORG_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                          &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OKTA_AUTH_TOKEN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nd"&gt;@app.before_request&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;before_request&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;oidc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_loggedin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;okta_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oidc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_getfield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sub&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/lair&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nd"&gt;@oidc.require_login&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lair&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Thundercats (supposed to be hidden) lair.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;landing_page&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Thundercats, Thundercats, hoooooooooooo!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nd"&gt;@oidc.require_login&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.lair&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/logout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;oidc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.landing_page&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above new highlighted lines check whether or not a user is logged in
before each request. If a route requires a logged in user due to the 
&lt;code&gt;@oidc.require_login&lt;/code&gt; decorator then the user will be redirect to the
sign in page. We also added routes under &lt;code&gt;/login&lt;/code&gt; and &lt;code&gt;/logout&lt;/code&gt; to make
it possible to log in and out of the application.&lt;/p&gt;
&lt;p&gt;Set three environment variables so our application can use them when we
run it. Make sure the placeholders &lt;code&gt;ORG_URL&lt;/code&gt; and &lt;code&gt;AUTH_TOKEN&lt;/code&gt; are set with 
your actual Org URL value and auth token from the Okta developer dashboard.&lt;/p&gt;
&lt;p&gt;On the command line run the following commands, making sure to replace
any placeholder values with your own tokens and URLs:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# this tells Flask we want to run the built-in server in dev mode
export FLASK_ENV=development
# make sure to use a very long random string here that cannot be guessed
export SECRET_KEY=&amp;#39;a very long string with lots of numbers and letters&amp;#39;
# this is the same Org URL found on your developer dashboard
# for example, https://dev-860408.oktapreview.com
export OKTA_ORG_URL=&amp;#39;ORG_URL&amp;#39;
# this is the API authentication token we created
export OKTA_AUTH_TOKEN=&amp;#39;AUTH_TOKEN&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now re-run the Flask application:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;set FLASK_APP=app.py
flask run
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should be in good shape if the development server starts up with output
like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(flaskauth)$ flask run
 * Environment: development
 * Debug mode: on
 * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
 * Restarting with stat
 * Debugger is active!
 * Debugger PIN: 415-920-546
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Head to localhost:5000 in a browser where you are not already logged into
your Okta account (an incognito window of your web browser works great).&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/landing-page-incognito.png" width="100%" class="shot rnd outl" alt="Landing page while in incognito mode."&gt;&lt;/p&gt;
&lt;p&gt;Let's test the redirect functionality when we try to go to the &lt;code&gt;/lair&lt;/code&gt;
route by going to localhost:5000/lair. We get redirected to the Okta
login page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/lair-redirect.jpg" width="100%" class="shot rnd outl" alt="Getting redirected while in incognito mode."&gt;&lt;/p&gt;
&lt;p&gt;Enter your Okta developer username and password to log into your application.
For development purposes this will work fine for testing but obviously in a
production application you will create other accounts for users to log into.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/enter-lair.jpg" width="100%" class="shot rnd outl" alt="Got into the lair URL after logging in."&gt;&lt;/p&gt;
&lt;p&gt;Let's tweak one more bit in our application to fix the glaring lack of
excitement in successfully completing the authentication code for this 
tutorial. Update the two highlighted lines to match what is in the code
block below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# imports for both Flask and Okta connection&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask_oidc&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;OpenIDConnect&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;okta&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;UsersClient&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# secret credentials for Okta connection&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_CLIENT_SECRETS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;openidconnect_secrets.json&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_COOKIE_SECURE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_CALLBACK_ROUTE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/oidc/callback&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_SCOPES&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;openid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;profile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SECRET_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SECRET_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OIDC_ID_TOKEN_COOKIE_NAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;oidc_token&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;# instantiate OpenID client to handle user session&lt;/span&gt;
&lt;span class="n"&gt;oidc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OpenIDConnect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Okta client will determine if a user has an appropriate account&lt;/span&gt;
&lt;span class="n"&gt;okta_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;UsersClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OKTA_ORG_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                          &lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;OKTA_AUTH_TOKEN&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="nd"&gt;@app.before_request&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;before_request&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;oidc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_loggedin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;okta_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;oidc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user_getfield&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;sub&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/lair&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@oidc.require_login&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lair&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;thundercats_lair&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Thundercats, hoooo!&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Thundercats now hidden lair.&amp;lt;/h1&amp;gt;&amp;lt;iframe src=&amp;quot;https://giphy.com/embed/ahXtBEbHiraxO&amp;quot; width=&amp;quot;480&amp;quot; height=&amp;quot;273&amp;quot; frameBorder=&amp;quot;0&amp;quot; class=&amp;quot;giphy-embed&amp;quot; allowFullScreen&amp;gt;&amp;lt;/iframe&amp;gt;&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;https://giphy.com/gifs/retro-cartoons-thundercats-ahXtBEbHiraxO&amp;quot;&amp;gt;via GIPHY&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thundercats_lair&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;landing_page&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Thundercats, Thundercats, hoooooooooooo!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/login&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nd"&gt;@oidc.require_login&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;login&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Force user to login and then redirect them to the lair.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.lair&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/logout&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;oidc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.landing_page&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Refresh the lair page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/181008-flask-okta/refreshed-lair.jpg" width="100%" class="shot rnd outl" alt="Lair page with new GIF."&gt;&lt;/p&gt;
&lt;p&gt;Alright that's just a little bit better! Go to localhost:5000/logout to 
unauthenticate your user. When you go to localhost:5000/lair again you 
will now have to re-authenticate. &lt;/p&gt;
&lt;h2&gt;What Now?&lt;/h2&gt;
&lt;p&gt;We just built an example Flask application with user authentication via 
the &lt;a href="https://developer.okta.com/use_cases/api_access_management/"&gt;Okta API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next up try the following tutorials to add other features to your
Flask application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/blog/respond-sms-text-messages-python-flask.html"&gt;Responding to SMS Text Messages with Python &amp;amp; Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/hosted-monitoring-flask-web-apps.html"&gt;How to Add Hosted Monitoring to Flask Web Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/develop-flask-web-apps-docker-containers-macos.html"&gt;Develop and Run Flask Apps within Docker Containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also determine what to code next in your Python project by reading 
the &lt;a href="/table-of-contents.html"&gt;Full Stack Python table of contents page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/181008-add-user-auth-flask-okta.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>在 Ubuntu 18.04 LTS 上配置 Python 3, Flask 和 Gunicorn</title><link href="https://www.fullstackpython.com/blog/python-3-flask-gunicorn-ubuntu-1804-bionic-beaver.html" rel="alternate"></link><published>2018-06-15T00:00:00-04:00</published><updated>2018-06-15T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2018-06-14:blog/python-3-flask-gunicorn-ubuntu-1804-bionic-beaver.html</id><summary type="html">&lt;p&gt;&lt;a href="/ubuntu.html"&gt;Ubuntu Linux's&lt;/a&gt; latest Long Term Support (LTS)
&lt;a href="/operating-systems.html"&gt;operating system&lt;/a&gt; version is 
&lt;a href="http://releases.ubuntu.com/18.04/"&gt;18.04&lt;/a&gt; and was released in April 2018.
The 18.04 update is code named "Bionic Beaver" and it includes
&lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt; by default. However, there are bunch of
dependencies you will need to install to get this release set up as a 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this tutorial we will get Python 3.6 configured with development system
packages to start a new &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; web application project and 
run it with &lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;Our project will use the Ubuntu 18.04 release along with a few other 
libraries. Note that if you are using the older 16.04 LTS release, there
is also 
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;a guide that will walk you through setting up that version&lt;/a&gt;
as your development environment.&lt;/p&gt;
&lt;p&gt;We will install the following tools as we step through the rest of 
the sections in this tutorial:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/18.04/"&gt;Ubuntu 18.04 LTS (Bionic Beaver)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; version 
  &lt;a href="https://docs.python.org/3/whatsnew/3.6.html"&gt;3.6.5&lt;/a&gt; 
  (default in Ubuntu 18.04)&lt;/li&gt;
&lt;li&gt;&lt;a href="/flask.html"&gt;Flask&lt;/a&gt; web framework version 
  &lt;a href="http://flask.pocoo.org/docs/1.0/changelog/#version-1-0-2"&gt;1.0.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; version 
  &lt;a href="http://docs.gunicorn.org/en/stable/news.html"&gt;19.8.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you're running on Mac OS X or Windows, use virtualization software such
as &lt;a href="https://www.parallels.com/products/desktop/"&gt;Parallels&lt;/a&gt; or
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt; with the 
&lt;a href="http://releases.ubuntu.com/18.04/"&gt;Ubuntu .iso file&lt;/a&gt;. Either the amd64 or
i386 version for 18.04 will work. I am using amd64 for development and testing
in this tutorial.&lt;/p&gt;
&lt;p&gt;When you boot up to the Ubuntu desktop you should see a screen like this one.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180614-ubuntu-flask-gunicorn/ubuntu-desktop.jpg" width="100%" class="shot rnd outl"&gt;&lt;/p&gt;
&lt;p&gt;We're ready to get our development environment configured.&lt;/p&gt;
&lt;h2&gt;System Packages&lt;/h2&gt;
&lt;p&gt;Open up a terminal window to proceed with the setup.&lt;/p&gt;
&lt;p&gt;Use the following two commands to check which version of Python 3 is installed&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 --version
which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Python version should be 3.6.5 and the location &lt;code&gt;/usr/bin/python3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our Ubuntu installation requires a few system packages to do development
rather than just run Python scripts. Run the following &lt;code&gt;apt-get&lt;/code&gt; command
and enter your &lt;code&gt;sudo&lt;/code&gt; password to allow restricted system access.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python3-dev python3-pip python3-virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We should see the following prompt requesting &lt;code&gt;sudo&lt;/code&gt; access. Enter &lt;code&gt;y&lt;/code&gt; to 
let the system package manager complete the installation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Reading package lists... Done
Building dependency tree       
Reading state information... Done
The following packages were automatically installed and are no longer required:
  linux-headers-4.15.0-20 linux-headers-4.15.0-20-generic
  linux-image-4.15.0-20-generic linux-modules-4.15.0-20-generic
  linux-modules-extra-4.15.0-20-generic
Use &lt;span class="s1"&gt;&amp;#39;sudo apt autoremove&amp;#39;&lt;/span&gt; to remove them.
The following additional packages will be installed:
  dh-python libexpat1-dev libpython3-dev libpython3.6-dev python3-setuptools
  python3-wheel python3.6-dev
Suggested packages:
  python-setuptools-doc
The following NEW packages will be installed:
  dh-python libexpat1-dev libpython3-dev libpython3.6-dev python3-dev
  python3-pip python3-setuptools python3-virtualenv python3-wheel
  python3.6-dev
&lt;span class="m"&gt;0&lt;/span&gt; upgraded, &lt;span class="m"&gt;10&lt;/span&gt; newly installed, &lt;span class="m"&gt;0&lt;/span&gt; to remove and &lt;span class="m"&gt;11&lt;/span&gt; not upgraded.
Need to get &lt;span class="m"&gt;3&lt;/span&gt;,617 kB/3,661 kB of archives.
After this operation, &lt;span class="m"&gt;20&lt;/span&gt;.2 MB of additional disk space will be used.
Do you want to &lt;span class="k"&gt;continue&lt;/span&gt;? &lt;span class="o"&gt;[&lt;/span&gt;Y/n&lt;span class="o"&gt;]&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The package manager will do the dirty work and should report when the
installation finishes successfully.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;...clipped a bunch of installation lines &lt;span class="k"&gt;for&lt;/span&gt; brevity...&lt;span class="o"&gt;)&lt;/span&gt;
Unpacking python3-wheel &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.30.0-0.2&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up python3-wheel &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.30.0-0.2&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up python3-virtualenv &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;15&lt;/span&gt;.1.0+ds-1.1&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up python3-pip &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;9&lt;/span&gt;.0.1-2.3~ubuntu1&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up libexpat1-dev:amd64 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.2.5-3&lt;span class="o"&gt;)&lt;/span&gt; ...
Processing triggers &lt;span class="k"&gt;for&lt;/span&gt; man-db &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.8.3-2&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up python3-setuptools &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;39&lt;/span&gt;.0.1-2&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up dh-python &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.20180325ubuntu2&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up libpython3.6-dev:amd64 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6.5-3&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up python3.6-dev &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6.5-3&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up libpython3-dev:amd64 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6.5-3&lt;span class="o"&gt;)&lt;/span&gt; ...
Setting up python3-dev &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.6.5-3&lt;span class="o"&gt;)&lt;/span&gt; ...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The packages we need are now installed. We can continue on to install our 
Python-specific dependencies.&lt;/p&gt;
&lt;h2&gt;Virtual environment&lt;/h2&gt;
&lt;p&gt;We installed &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; 
and &lt;a href="https://pypi.org/project/pip"&gt;pip&lt;/a&gt; to handle our 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;.
We can now use them to download and install Flask and Gunicorn.&lt;/p&gt;
&lt;p&gt;Create a directory to store your virtualenvs. Then create a new virtualenv
within that directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# make sure pip and setuptools are the latest version&lt;/span&gt;
pip3 install --upgrade pip setuptools
&lt;span class="c1"&gt;# the tilde (&amp;quot;~&amp;quot;) specifies the user&amp;#39;s home directory, such as &amp;quot;/home/matt&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;cd&lt;/span&gt; ~
mkdir venvs
&lt;span class="c1"&gt;# specify the system python3 installation&lt;/span&gt;
python3 -m venv venvs/flask1804
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; ~/venvs/flask1804/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our prompt will change when the virutalenv is activated.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180614-ubuntu-flask-gunicorn/venv-activated.jpg" width="100%" class="shot rnd outl"&gt;&lt;/p&gt;
&lt;p&gt;Our virtualenv is now activated with Python 3. We can install any
dependencies we need such as Flask and Gunicorn.&lt;/p&gt;
&lt;h2&gt;Flask and Gunicorn&lt;/h2&gt;
&lt;p&gt;We're going to use &lt;code&gt;pip&lt;/code&gt; within our new virtualenv but it's a good
idea to update it to the latest version. We should also install the
&lt;code&gt;wheel&lt;/code&gt; package to remove installation warnings when &lt;code&gt;pip&lt;/code&gt; tries to
use &lt;a href="https://pythonwheels.com/"&gt;Python wheels&lt;/a&gt;, which are the newest 
standard in an admittedly long line of Python distribution package
models.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --upgrade pip
pip install wheel
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can now install Flask and Green Unicorn via the &lt;code&gt;pip&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install flask gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Look for output similar to the following to ensure the libraries installed
without an issue.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;flask1804&lt;span class="o"&gt;)&lt;/span&gt; matt@ubuntu:~$ pip install flask gunicorn
Collecting flask
  Using cached https://files.pythonhosted.org/packages/7f/e7/08578774ed4536d3242b14dacb4696386634607af824ea997202cd0edb4b/Flask-1.0.2-py2.py3-none-any.whl
Collecting gunicorn
  Using cached https://files.pythonhosted.org/packages/55/cb/09fe80bddf30be86abfc06ccb1154f97d6c64bb87111de066a5fc9ccb937/gunicorn-19.8.1-py2.py3-none-any.whl
Collecting click&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;5&lt;/span&gt;.1 &lt;span class="o"&gt;(&lt;/span&gt;from flask&lt;span class="o"&gt;)&lt;/span&gt;
  Using cached https://files.pythonhosted.org/packages/34/c1/8806f99713ddb993c5366c362b2f908f18269f8d792aff1abfd700775a77/click-6.7-py2.py3-none-any.whl
Collecting Werkzeug&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.14 &lt;span class="o"&gt;(&lt;/span&gt;from flask&lt;span class="o"&gt;)&lt;/span&gt;
  Using cached https://files.pythonhosted.org/packages/20/c4/12e3e56473e52375aa29c4764e70d1b8f3efa6682bef8d0aae04fe335243/Werkzeug-0.14.1-py2.py3-none-any.whl
Collecting itsdangerous&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.24 &lt;span class="o"&gt;(&lt;/span&gt;from flask&lt;span class="o"&gt;)&lt;/span&gt;
  Using cached https://files.pythonhosted.org/packages/dc/b4/a60bcdba945c00f6d608d8975131ab3f25b22f2bcfe1dab221165194b2d4/itsdangerous-0.24.tar.gz
Collecting Jinja2&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.10 &lt;span class="o"&gt;(&lt;/span&gt;from flask&lt;span class="o"&gt;)&lt;/span&gt;
  Using cached https://files.pythonhosted.org/packages/7f/ff/ae64bacdfc95f27a016a7bed8e8686763ba4d277a78ca76f32659220a731/Jinja2-2.10-py2.py3-none-any.whl
Collecting MarkupSafe&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.23 &lt;span class="o"&gt;(&lt;/span&gt;from Jinja2&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.10-&amp;gt;flask&lt;span class="o"&gt;)&lt;/span&gt;
  Using cached https://files.pythonhosted.org/packages/4d/de/32d741db316d8fdb7680822dd37001ef7a448255de9699ab4bfcbdf4172b/MarkupSafe-1.0.tar.gz
Building wheels &lt;span class="k"&gt;for&lt;/span&gt; collected packages: itsdangerous, MarkupSafe
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; itsdangerous ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /home/matt/.cache/pip/wheels/2c/4a/61/5599631c1554768c6290b08c02c72d7317910374ca602ff1e5
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; MarkupSafe ... &lt;span class="k"&gt;done&lt;/span&gt;
  Stored in directory: /home/matt/.cache/pip/wheels/33/56/20/ebe49a5c612fffe1c5a632146b16596f9e64676768661e4e46
Successfully built itsdangerous MarkupSafe
Installing collected packages: click, Werkzeug, itsdangerous, MarkupSafe, Jinja2, flask, gunicorn
Successfully installed Jinja2-2.10 MarkupSafe-1.0 Werkzeug-0.14.1 click-6.7 flask-1.0.2 gunicorn-19.8.1 itsdangerous-0.24
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a new directory named &lt;code&gt;flask1804&lt;/code&gt; under your home directory (not
within the &lt;code&gt;venvs&lt;/code&gt; subdirectory) that will store our Flask test project. 
Change directory into the new folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/flask1804
&lt;span class="nb"&gt;cd&lt;/span&gt; ~/flask1804
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a new file named &lt;code&gt;__init__.py&lt;/code&gt; within our &lt;code&gt;flaskproj&lt;/code&gt; directory so
we can test to make sure Flask is working properly. I usually use
&lt;a href="/vim.html"&gt;Vim&lt;/a&gt; but &lt;a href="/emacs.html"&gt;Emacs&lt;/a&gt; and other 
&lt;a href="/development-environments.html"&gt;development environments&lt;/a&gt; work great as
well.&lt;/p&gt;
&lt;p&gt;Within &lt;code&gt;__init__.py&lt;/code&gt; write the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;It works!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could run our app with the Flask development server using the 
&lt;code&gt;python __init__.py&lt;/code&gt; command. Instead run the Flask app with
Gunicorn. Go to the directory above the &lt;code&gt;flask1804&lt;/code&gt; folder, in our
case we can enter &lt;code&gt;cd ~&lt;/code&gt; then use the &lt;code&gt;gunicorn&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn flask1804.app:app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We should see:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2018&lt;/span&gt;-06-15 &lt;span class="m"&gt;15&lt;/span&gt;:54:31 -0400&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5174&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Starting gunicorn &lt;span class="m"&gt;19&lt;/span&gt;.8.1
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2018&lt;/span&gt;-06-15 &lt;span class="m"&gt;15&lt;/span&gt;:54:31 -0400&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5174&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Listening at: http://127.0.0.1:8000 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;5174&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2018&lt;/span&gt;-06-15 &lt;span class="m"&gt;15&lt;/span&gt;:54:31 -0400&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5174&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Using worker: sync
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2018&lt;/span&gt;-06-15 &lt;span class="m"&gt;15&lt;/span&gt;:54:31 -0400&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;5177&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;INFO&lt;span class="o"&gt;]&lt;/span&gt; Booting worker with pid: &lt;span class="m"&gt;5177&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great now we can bring up our shell Flask app in the web browser at
the &lt;code&gt;localhost:8000&lt;/code&gt; or &lt;code&gt;127.0.0.1:8000&lt;/code&gt; address.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180614-ubuntu-flask-gunicorn/it-works.jpg" width="100%" class="shot rnd outl"&gt;&lt;/p&gt;
&lt;p&gt;Now you're ready for some real &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; development!&lt;/p&gt;
&lt;h2&gt;Ready to Code&lt;/h2&gt;
&lt;p&gt;That provides a quick configuration for getting started on 18.04 LTS 
developing &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; applications with the 
&lt;a href="/green-unicorn-gunicorn.html"&gt;Gunicorn&lt;/a&gt; &lt;a href="/wsgi-servers.html"&gt;WSGI server&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next up you should check out the following tutorials that use this 
Flask configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/blog/respond-sms-text-messages-python-flask.html"&gt;Responding to SMS Text Messages with Python &amp;amp; Flask&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/hosted-monitoring-flask-web-apps.html"&gt;How to Add Hosted Monitoring to Flask Web Applications&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alternatively you can also determine what to code next in your Python 
project by reading the 
&lt;a href="/table-of-contents.html"&gt;Full Stack Python table of contents page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/180614-flask-gunicorn-ubuntu-1804.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>在 macOS 上用 Docker 容器启动 Bottle 应用</title><link href="https://www.fullstackpython.com/blog/first-steps-bottle-web-apps-docker-containers.html" rel="alternate"></link><published>2018-06-05T00:00:00-04:00</published><updated>2018-06-05T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2018-06-04:blog/first-steps-bottle-web-apps-docker-containers.html</id><summary type="html">&lt;p&gt;It can be confusing to figure out how to use &lt;a href="/docker.html"&gt;Docker&lt;/a&gt; 
containers in your &lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; and 
&lt;a href="/flask.html"&gt;Bottle&lt;/a&gt; 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; workflow.
This tutorial will quickly show you the exact steps to get Docker
up and running on macOS with a working Bottle 
&lt;a href="/web-development.html"&gt;web application&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;This tutorial is written for &lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt;. It may work with
Python 2 but it has not been testing with that soon-to-be deprecated
&lt;a href="https://pythonclock.org/"&gt;2.7 version&lt;/a&gt;. You should really be using Python 3,
preferrably the latest release which is currently 
&lt;a href="https://www.python.org/downloads/release/python-365/"&gt;3.6.5&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/docker-for-mac/install/"&gt;Docker for Mac&lt;/a&gt; is necessary
to run Docker containers. I recommend that you use the stable release unless 
you have an explicit purpose for the 
&lt;a href="https://docs.docker.com/docker-for-mac/edge-release-notes/"&gt;edge channel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Within the Docker container we will use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 3, specifically the
  &lt;a href="https://hub.docker.com/r/library/python/tags/"&gt;slim-3.6.5 version&lt;/a&gt;
  from &lt;a href="https://hub.docker.com/"&gt;Docker Hub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; version 0.12.13&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All for the Dockerfile and the Bottle project are available open source
under the MIT license on GitHub under the 
&lt;a href="https://github.com/fullstackpython/blog-code-examples/tree/master/docker-bottle-mac"&gt;docker-bottle-mac directory&lt;/a&gt;
of the
&lt;a href="https://github.com/fullstackpython/blog-code-examples"&gt;blog-code-examples&lt;/a&gt;
repository.&lt;/p&gt;
&lt;h2&gt;Installing Docker on macOS&lt;/h2&gt;
&lt;p&gt;We must install Docker before we can spin up our containers. Jump to
the next section if you already have Docker for Mac installed and working
on your computer.&lt;/p&gt;
&lt;p&gt;On your Mac, 
&lt;a href="https://www.docker.com/community-edition#/download"&gt;download the Docker Community Edition (CE) for Mac&lt;/a&gt;
installer.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180604-bottle-docker/docker-ce.jpg" width="100%" 
 class="shot rnd" alt="Download the Docker Community Edition for Mac."&gt;&lt;/p&gt;
&lt;p&gt;Open Finder and go to the downloads folder where the installation file is located.
Follow the installation steps and open Terminal when the installer finishes. &lt;/p&gt;
&lt;p&gt;Test your Docker installation by running the &lt;code&gt;docker&lt;/code&gt; command along with the 
&lt;code&gt;--version&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker --version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If Docker is installed correctly you should see the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Docker version 18.03.1-ce, build 9ee9f40
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that Docker runs through a system agent you can find in the menu bar.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180604-bottle-docker/docker-agent.png" width="100%" 
     class="shot rnd" alt="Docker agent in the menu bar."&gt;&lt;/p&gt;
&lt;p&gt;Docker is now installed so we can run a container and write a simple
Bottle application to test running an app within the container. &lt;/p&gt;
&lt;h2&gt;Dockerfile&lt;/h2&gt;
&lt;p&gt;Docker needs to know what we want in our container so we specify an
image using a &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# this is an official Python runtime, used as the parent image
FROM python:3.6.5-slim

# set the working directory in the container to /app
WORKDIR /app

# add the current directory to the container as /app
ADD . /app

# execute everyone&amp;#39;s favorite pip command, pip install -r
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# unblock port 80 for the Bottle app to run on
EXPOSE 80

# execute the Flask app
CMD [&amp;quot;python&amp;quot;, &amp;quot;app.py&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save the Dockerfile and then on the commandline run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker build -t bottledock .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above &lt;code&gt;docker build&lt;/code&gt; file uses the &lt;code&gt;-t&lt;/code&gt; flag to tag the image with
the name of &lt;code&gt;bottledock&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the build worked successfully the &lt;a href="/shells.html"&gt;shell&lt;/a&gt; will show 
some completed output like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ docker build -t bottledock .
Sending build context to Docker daemon  &lt;span class="m"&gt;16&lt;/span&gt;.38kB
Step &lt;span class="m"&gt;1&lt;/span&gt;/6 : FROM python:3.6.5-slim
&lt;span class="m"&gt;3&lt;/span&gt;.6.5-slim: Pulling from library/python
f2aa67a397c4: Pull &lt;span class="nb"&gt;complete&lt;/span&gt; 
19cc085bc22b: Pull &lt;span class="nb"&gt;complete&lt;/span&gt; 
83bd7790bc68: Pull &lt;span class="nb"&gt;complete&lt;/span&gt; 
8b3329adba1b: Pull &lt;span class="nb"&gt;complete&lt;/span&gt; 
d0a8fd6eb5d0: Pull &lt;span class="nb"&gt;complete&lt;/span&gt; 
Digest: sha256:56100f5b5e299f4488f51ea81cc1a67b5ff13ee2f926280eaf8e527a881afa61
Status: Downloaded newer image &lt;span class="k"&gt;for&lt;/span&gt; python:3.6.5-slim
 ---&amp;gt; 29ea9c0b39c6
Step &lt;span class="m"&gt;2&lt;/span&gt;/6 : WORKDIR /app
Removing intermediate container 627538eb0d39
 ---&amp;gt; 26360255c163
Step &lt;span class="m"&gt;3&lt;/span&gt;/6 : ADD . /app
 ---&amp;gt; 9658b91b29db
Step &lt;span class="m"&gt;4&lt;/span&gt;/6 : RUN pip install --trusted-host pypi.python.org -r requirements.txt
 ---&amp;gt; Running in f0d0969f3066
Collecting &lt;span class="nv"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;.12.13 &lt;span class="o"&gt;(&lt;/span&gt;from -r requirements.txt &lt;span class="o"&gt;(&lt;/span&gt;line &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
  Downloading https://files.pythonhosted.org/packages/bd/99/04dc59ced52a8261ee0f965a8968717a255ea84a36013e527944dbf3468c/bottle-0.12.13.tar.gz &lt;span class="o"&gt;(&lt;/span&gt;70kB&lt;span class="o"&gt;)&lt;/span&gt;
Building wheels &lt;span class="k"&gt;for&lt;/span&gt; collected packages: bottle
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; bottle: started
  Running setup.py bdist_wheel &lt;span class="k"&gt;for&lt;/span&gt; bottle: finished with status &lt;span class="s1"&gt;&amp;#39;done&amp;#39;&lt;/span&gt;
  Stored in directory: /root/.cache/pip/wheels/76/a0/b4/2a3ee1a32d0506931e558530258de1cc04b628eff1b2f008e0
Successfully built bottle
Installing collected packages: bottle
Successfully installed bottle-0.12.13
Removing intermediate container f0d0969f3066
 ---&amp;gt; 0534575c8067
Step &lt;span class="m"&gt;5&lt;/span&gt;/6 : EXPOSE &lt;span class="m"&gt;80&lt;/span&gt;
 ---&amp;gt; Running in 14e49938d3be
Removing intermediate container 14e49938d3be
 ---&amp;gt; 05e087d2471d
Step &lt;span class="m"&gt;6&lt;/span&gt;/6 : CMD &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python&amp;quot;&lt;/span&gt;, &lt;span class="s2"&gt;&amp;quot;app.py&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
 ---&amp;gt; Running in ca9738bfd06a
Removing intermediate container ca9738bfd06a
 ---&amp;gt; 9afb4f01e0d3
Successfully built 9afb4f01e0d3
Successfully tagged bottledock:latest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also see the image with the &lt;code&gt;docker image ls&lt;/code&gt; command. Give that 
a try now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker image ls
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our tag name should appear in the images list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
bottledock          latest              9afb4f01e0d3        About a minute ago   145MB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our image is ready to load as a container so we can code a short
Bottle web app for testing and then further development.&lt;/p&gt;
&lt;h2&gt;Coding A Bottle Web App&lt;/h2&gt;
&lt;p&gt;It is time to code a simple "Hello, World!"-style Bottle app to test
running Python code within our Docker container. Within the current
project directory, create a file named &lt;code&gt;app.py&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;


&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello, world! (From Full Stack Python)&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.0.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reloader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code returns a simple "Hello, world!" message when
executed by the Bottle development server and contacted by a client.&lt;/p&gt;
&lt;p&gt;We need just one more file to specify our &lt;code&gt;bottle&lt;/code&gt; dependency. Create 
a &lt;code&gt;requirements.txt&lt;/code&gt; file within the same directory as &lt;code&gt;app.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bottle==0.12.13
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure both the &lt;code&gt;app.py&lt;/code&gt; and &lt;code&gt;requirements.txt&lt;/code&gt; file are saved then
we can give the code a try.&lt;/p&gt;
&lt;h2&gt;Running the Container&lt;/h2&gt;
&lt;p&gt;Now that we have our image in hand along with the Python code in a file 
we can run the image as a container with the &lt;code&gt;docker run&lt;/code&gt; command. Execute 
the following command, making sure to replace the absolute path for the 
volume to your own directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -p 5000:8080 --volume=/Users/matt/devel/py/blog-code-examples/docker-bottle-macapp bottledock
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you receive the error 
&lt;code&gt;python: can't open file 'app.py': [Errno 2] No such file or directory&lt;/code&gt; then
you likely did not change &lt;code&gt;/Users/matt/devel/py/bottledocker&lt;/code&gt; to the 
directory where your project files, especially &lt;code&gt;app.py&lt;/code&gt;, are located.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180604-bottle-docker/bottle-app-response.png" width="100%" 
 class="shot rnd" alt="Bottle web app responding to requests from within a Docker container."&gt;&lt;/p&gt;
&lt;p&gt;Everything worked when you see a simple text-based HTTP response like what
is shown above in the screenshot of my Chrome browser.&lt;/p&gt;
&lt;h2&gt;What's Next?&lt;/h2&gt;
&lt;p&gt;We just installed Docker and wrote a Bottle web app to run inside a 
container. That is just the beginning of how you can integrate Docker into 
your workflow.&lt;/p&gt;
&lt;p&gt;Next up take a look at the &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt;, &lt;a href="/docker.html"&gt;Docker&lt;/a&gt; 
and &lt;a href="/deployment.html"&gt;deployment&lt;/a&gt; pages for more tutorials.&lt;/p&gt;
&lt;p&gt;Questions? Let me know via a GitHub
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;issue ticket on the Full Stack Python repository&lt;/a&gt;, 
on Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Do you see a typo, syntax issue or just something that's confusing in this 
blog post? Fork
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/180604-bottle-docker-macos.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request with a fix or 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;file an issue ticket on GitHub&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>如何向开发者解释你的产品</title><link href="https://www.fullstackpython.com/blog/explain-products-developers.html" rel="alternate"></link><published>2018-05-25T00:00:00-04:00</published><updated>2018-05-25T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2018-05-25:blog/explain-products-developers.html</id><summary type="html">&lt;p&gt;This blog post contains the slides along with a loose transcript
from my talk on appropriately marketing products to 
software developers that I gave at
&lt;a href="https://www.svb.com/"&gt;Silicon Valley Bank&lt;/a&gt; during 
&lt;a href="http://www.ubiquity.vc/"&gt;Ubiquity.VC&lt;/a&gt;'s summit for founders, investors and 
technical advisors on May 24, 2018.&lt;/p&gt;
&lt;hr /&gt;
&lt;div class="row talk"&gt;&lt;div class="c6"&gt;
&lt;img src="/img/180526-explain-product/01-explain-products.jpg" width="100%" class="shot rnd outl" alt="Title slide for this talk on Explaining Products to Developers."&gt;
&lt;/div&gt;&lt;div class="c6"&gt;&lt;p&gt;
Hey folks, my name is &lt;a href="/about-author.html"&gt;Matt Makai&lt;/a&gt;. I serve the
&lt;a href="https://www.youtube.com/watch?v=TF129ioe8kc"&gt;Developer Network&lt;/a&gt; at
&lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt;. We've talked a lot today about 
making the real, physical world programmable. We ask "what if we could modify 
the world using GitHub and Jira?" When we succeed in creating programmatic 
access to the physical world, what then? Is that the end goal?
&lt;/p&gt;&lt;p&gt;
No, that's only the beginning. We need developers to use those new 
capabilities and code with them. 
&lt;/p&gt;&lt;p&gt;
How do you get developers to adopt what you are creating? That is a broad 
question so I am going to zoom in on just one small slice of developer 
relations that kicks off the whole adoption process. Unfortunately I 
see upwards of 90% of companies completely screw up explaining their 
products to developers.
&lt;/p&gt;&lt;p&gt;
Today we are going to look at how to appropriately explain and demo your 
product to developers to maximize developer adoption. This is the first
step towards getting a developer to care enough to try out what you have 
built.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="row talk"&gt;&lt;div class="c6"&gt;
&lt;img src="/img/180526-explain-product/02-matt-makai-bio.jpg" width="100%" class="shot rnd outl" alt="Bio information slide for Matt Makai."&gt;
&lt;/div&gt;&lt;div class="c6"&gt;&lt;p&gt;
In addition to serving the Developer Network at Twilio, I am also a 
&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; and 
&lt;a href="https://swift.org/"&gt;Swift&lt;/a&gt; developer as well as the creator of 
&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;. My 
background provides me an opportunity to give insight on this topic because 
I am a software developer, I market to fellow software developers and I write a 
community-driven site that is widely read and trusted by software developers.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="row talk"&gt;&lt;div class="c6"&gt;
&lt;img src="/img/180526-explain-product/03-show-it-live.jpg" width="100%" class="shot rnd outl" alt="Fred Wilson quote on showing rather than telling."&gt;
&lt;/div&gt;&lt;div class="c6"&gt;&lt;p&gt;
How do you explain your product? &lt;a href="https://avc.com/"&gt;Fred Wilson&lt;/a&gt; 
of &lt;a href="https://www.usv.com/"&gt;Union Square Ventures&lt;/a&gt; said it best in 
this quote, which we will roughly summarize as: 
&lt;em&gt;show, don't just tell&lt;/em&gt;.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="row talk"&gt;&lt;div class="c6"&gt;
&lt;img src="/img/180526-explain-product/04-demo.jpg" width="100%" class="shot rnd outl" alt="Demo slide for transitioning into a live-coded demo."&gt;
&lt;/div&gt;&lt;div class="c6"&gt;&lt;p&gt;
With Fred Wilson's quote in mind, it's demo time! 
&lt;/p&gt;&lt;p&gt;
(This is where I do a condensed, approximately two minute version of my 
Twilio five minute live-coded demo. For a rough approximation of what I 
showed, check out the 
&lt;a href="https://www.youtube.com/watch?v=-VuXIgp9S7o"&gt;NY Tech Meetup Twilio demo&lt;/a&gt;
from 2010.)
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="row talk"&gt;&lt;div class="c6"&gt;
&lt;img src="/img/180526-explain-product/05-phone-api.jpg" width="100%" class="shot rnd outl" alt="Twilio 2008-2011 had only the phone calling voice API."&gt;
&lt;/div&gt;&lt;div class="c6"&gt;&lt;p&gt;
That demo represented the Twilio 5 minute demo from 2008 through part of 
2011, when the 
&lt;a href="https://www.twilio.com/docs/voice/api"&gt;phone calling voice API&lt;/a&gt; 
was the company's main product.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="row talk"&gt;&lt;div class="c6"&gt;
&lt;img src="/img/180526-explain-product/06-story-arc.jpg" width="100%" class="shot rnd outl" alt="Story arc visual."&gt;
&lt;/div&gt;&lt;div class="c6"&gt;&lt;p&gt;
Let's break down the demo into its component pieces so we can learn from
it. The demo narrative fits into a story arc. Yes, a story arc like from a
novel. You may not have thought about explaining and showing your product
in a couple of minutes to be similiar to a novel, but you should follow the 
same narrative structure because it is easier for the audience to understand.
&lt;p&gt;&lt;/p&gt;
The demo we just saw follows the story arc in the beginning when I introduce 
myself and Twilio. A clear, concise set of intentional words are used to 
explain what Twilio *can do for a developer*. "Twilio makes it easy for 
software developers to add phone calling to applications using the 
programming languages that you already know." Breaking that down further:
&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;software developers&lt;/strong&gt;: a clear call out to who we are 
talking to&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;phone calling&lt;/strong&gt;: what problem we solve by adding this 
feature to applications&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;programming languages that you already know&lt;/strong&gt;: emphasizing
that you do not have to learn some complicated proprietary syntax from the 
telecommunications world&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Next in the exposition, we explain how it works 
&lt;a href="https://s3.amazonaws.com/com.twilio.prod.twilio-docs/images/incoming-voice.width-800.png"&gt;using a diagram&lt;/a&gt;
that shows inbound and outbound phone calls and how they interact with 
Twilio's service as well as your &lt;a href="/web-servers.html"&gt;web server&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
The inciting incident during the demo  happens when I finish the 
explanation of how Twilio works and say "rather than just show you a
little diagram, let's build an application together right now".
&lt;/p&gt;&lt;p&gt;
We move into the demo phase where I buy and configure a phone number then
we all test it by calling the number on our own cell phones. The audience 
learns that to configure the phone number to do something useful in this
case only requires two XML elements that can be stored in a static file or 
generated by an endpoint in their application.
&lt;/p&gt;&lt;p&gt;
The climax hits when we see outbound phone calling, everyone's
phones in the room start ringing and we are all on speaker phone together.
Finally, there is a short resolution where I re-explain what Twilio can
do for developers and outro with my name and where you can find me.
&lt;/p&gt;&lt;p&gt;
The whole two minute demo, or however long we need it to be, has a narrative
with a clear story arc.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="row talk"&gt;&lt;div class="c6"&gt;
&lt;img src="/img/180526-explain-product/07-sms-2011.jpg" width="100%" class="shot rnd outl" alt="Twilio added an SMS API in 2011."&gt;
&lt;/div&gt;&lt;div class="c6"&gt;&lt;p&gt;
In 2011, Twilio added SMS. This changed the 5 minute demo's explanation
to "Twilio makes it easy for developers to send and receive text messages
and make and receive phone calls using the programming languages that they
already know". The overall structure otherwise remained the same because we 
used SMS for inbound action and kept phone calling for the outbound action. 
&lt;/p&gt;&lt;p&gt;
Eventually your product line or features within a product line will reach
a point where you need to determine if it changes your explanation and
demo. In some cases there will be modifications that fit within the existing
framework and do not substantially change the narrative.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="row talk"&gt;&lt;div class="c6"&gt;
&lt;img src="/img/180526-explain-product/08-more-products.jpg" width="100%" class="shot rnd outl" alt="Eventually you expand your product lines or features within a product."&gt;
&lt;/div&gt;&lt;div class="c6"&gt;&lt;p&gt;
As you continue to grow you will eventually reach an inflection point where
you have too many products or features to explain, regardless of how
much time you have for your demo. You reach a situation where if you try to 
tell the audience everything that your product does, they will zone out
and ignore your laundry list of features.
&lt;/p&gt;&lt;p&gt;
If you are not intentional in the words you say and specific
in the products and features you choose to show, then your pitch becomes 
spread too thin and no developer will care to listen.
&lt;/p&gt;&lt;p&gt;
Twilio now has dozens of products under the communications umbrella. I talk
about specific products and tailor my explanation based on the audience. You
should too! For example, if I am talking to a group of web developers, I will
still use the classic Twilio 5 minute demo that shows off SMS and phone 
calling capability. On the other hand, if I am demoing to iOS and Android 
mobile developers then I will show off 
&lt;a href="https://www.twilio.com/docs/chat"&gt;Programmable Chat&lt;/a&gt; or 
&lt;a href="https://www.twilio.com/docs/video"&gt;Programmable Video&lt;/a&gt;.
&lt;/p&gt;&lt;p&gt;
The explanation is tuned to "Twilio makes it easy for developers to add 
communications, such as phone calling, messaging and video, to their 
applications using the programming languages that they already know." I 
draw a broad theme by saying the word "communications" then give three
specific examples of products that are the most widely used by developers
because they are incredibly useful for implementing common application
features.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="row talk"&gt;&lt;div class="c6"&gt;
&lt;img src="/img/180526-explain-product/09-devangelism.jpg" width="100%" class="shot rnd outl" alt="You as a founder, or as an investor who work with founders must be the chief evangelist for your product."&gt;
&lt;/div&gt;&lt;div class="c6"&gt;&lt;p&gt;
It's time to reinforce why it is so important for you, as a founder, or as an
investor that works with founders, to be the chief evangelist for your
product. You cannot ever outsource this role. You cannot hire someone to
lead an evangelism team and expect them to figure it all out for you. 
&lt;/p&gt;&lt;p&gt;
If you are not excited about the product you are building or are unable 
to transfer that excitement to developers with a clear explanation and demo, 
then all of the other priorities for your company become useless. If 
developers are your customers and they do not adopt your product then you
will not sell anything, you won't be able to set a great company culture
and you won't need to worry about what snacks are stocked in your office's
kitchen. If developers are the lifeblood of your company then you need to
be the chief evangelist, period.
&lt;/p&gt;&lt;p&gt;
Here are a few more important points for how to perform this role 
effectively.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="row talk"&gt;&lt;div class="c6"&gt;
&lt;img src="/img/180526-explain-product/10-be-specific.jpg" width="100%" class="shot rnd outl" alt="The earlier you are, the more specific you need to be about what problem you solve."&gt;
&lt;/div&gt;&lt;div class="c6"&gt;&lt;p&gt;
When you are early stage, be as specific as possible about what problem
that you are solving. You are &lt;strong&gt;not&lt;/strong&gt; "disrupting 
transportation by blah blah blah". No developer gives a shit. They want to 
know what problem you will solve for them right now.
&lt;/p&gt;&lt;p&gt;
Be specific, like the "add phone calling to your applications" line so that
it is absolutely clear what you do.
&lt;/p&gt;&lt;p&gt;
When your company grows and your brand expands, then you may expand to 
include the general industry your company works in, such as "communications".
Do not jump the gun in trying to become too grandiose with your ambitions 
because your developer audience cares about what problem you are solving for
them, not who you imagine yourself to be in your future vision.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="row talk"&gt;&lt;div class="c6"&gt;
&lt;img src="/img/180526-explain-product/11-refine-growth.jpg" width="100%" class="shot rnd outl" alt="Refine the message as you grow, or your industry grows."&gt;
&lt;/div&gt;&lt;div class="c6"&gt;&lt;p&gt;
Refine the explanation you use and the demo under two situations. 
&lt;/p&gt;&lt;p&gt;
First, when your products and features expand. Think critically if a new 
feature should be part of your explanation or it can be left as an answer 
to follow up questions that a developer asks you. 
&lt;/p&gt;&lt;p&gt;
Second, developer ecosystems are constantly changing. If you tried to talk
to me about containers ten years ago and I was not a Solaris sysadmin then
I would not have any clue what you are talking about. Today, it's generally
safe to assume most Bay Area developers have a working knowledge of what
containers are and what they are useful for accomplishing. Use that type of
context in your pitch to reinforce your technical credibility with your
developer audience.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="row talk"&gt;&lt;div class="c6"&gt;
&lt;img src="/img/180526-explain-product/12-rehearsal.jpg" width="100%" class="shot rnd outl" alt="No demo fails because you rehearse constantly."&gt;
&lt;/div&gt;&lt;div class="c6"&gt;&lt;p&gt;
I get asked a lot about live coding because everyone is worried about demo
fails. You should not demo fail, ever. To steal a line from 
&lt;a href="https://github.com/RobSpectre"&gt;Rob Spectre&lt;/a&gt;, former head of the 
Twilio Developer Network:&lt;/p&gt;

&lt;blockquote&gt;There is only one demo God, and her name is rehearsal.&lt;/blockquote&gt;

&lt;p&gt;
You do not just rehearse and practice the happy path, you also practice
what can go wrong. What happens when you mistype a character in your code?
Find out and get used to it. If and when it happens during your live demo 
then you can incorporate that mistake into your narrative as a learning
opportunity for the audience.
&lt;/p&gt;&lt;p&gt;
Magicians always have "outs" in their acts, essentially plan B, plan C, 
plan Z. You should too because something will always go wrong but if you
are ready for it and know how to handle it then you will never demo fail.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="row talk"&gt;&lt;div class="c6"&gt;
&lt;img src="/img/180526-explain-product/13-your-message-to-devs.jpg" width="100%" class="shot rnd outl" alt="Your message to developers."&gt;
&lt;/div&gt;&lt;div class="c6"&gt;&lt;p&gt;
That sums up my strong recommendations for this one small slice of the
field of developer product adoption. To re-iterate, create a narrative 
for your explanation and demo that follows the classic story arc. The 
earlier you are as a product, the more specific your explanation should
be in what problem you solve. Refine the message as your features and
product lines grow, as well as when the industry around you changes. 
Rehearse your demo including what can and will go wrong.
&lt;/p&gt;&lt;p&gt;
There is a lot more to developer adoption than a good explanation and
demo, but I see greater than 90% of companies never even get to this
point so you will be way ahead of the pack if you heed the advice from
this talk.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="row talk"&gt;&lt;div class="c6"&gt;
&lt;img src="/img/180526-explain-product/14-thank-you.jpg" width="100%" class="shot rnd outl" alt="Thank you slide."&gt;
&lt;/div&gt;&lt;div class="c6"&gt;&lt;p&gt;
That's all for today. My name is &lt;a href="/about-author.html"&gt;Matt Makai&lt;/a&gt;,
I am a software developer at &lt;a href="/twilio.html"&gt;Twilio&lt;/a&gt; and the
author of &lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;.
Thank you very much.
&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary></entry><entry><title>如何用 Mapbox 在 Django Web 应用程序中添加地图</title><link href="https://www.fullstackpython.com/blog/maps-django-web-applications-projects-mapbox.html" rel="alternate"></link><published>2018-05-25T00:00:00-04:00</published><updated>2018-05-25T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2018-05-19:blog/maps-django-web-applications-projects-mapbox.html</id><summary type="html">&lt;p&gt;Building interactive maps into a &lt;a href="/django.html"&gt;Django&lt;/a&gt; web application
can seem daunting if you do not know where to begin, but it is easier
than you think if you use a developer tool such as 
&lt;a href="https://www.mapbox.com/"&gt;Mapbox&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post we will build a simple Django project with a single app
and add an interactive map like the one you see below to the webpage that
Django renders with the &lt;a href="https://www.mapbox.com/maps/"&gt;Mapbox Maps&lt;/a&gt; 
&lt;a href="/application-programming-interfaces.html"&gt;API&lt;/a&gt;.&lt;/p&gt;
&lt;div id='map' width="100%" style='height:280px;margin-bottom:16px' class="shot rnd outl"&gt;&lt;/div&gt;

&lt;script&gt;
mapboxgl.accessToken = 'pk.eyJ1IjoibWF0dG1ha2FpIiwiYSI6ImNqZzU0OXNtYjIzdmIyeHA5OG1sNnhid2YifQ.kzJityumPUk9f9i1vkmWAg';
var map = new mapboxgl.Map({
 container: 'map',
 style: 'mapbox://styles/mapbox/streets-v10',
 center: [-77.03, 38.91],
 zoom: 9
});
&lt;/script&gt;

&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;&lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt; is strongly recommended for this tutorial
because Python 2 will no longer be supported starting January 1, 2020.
&lt;a href="https://www.python.org/downloads/release/python-365/"&gt;Python 3.6.5&lt;/a&gt; to 
was used to build this tutorial. We will also use the following 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt; to build
our application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/django.html"&gt;Django&lt;/a&gt; web framework, 
  &lt;a href="https://docs.djangoproject.com/en/2.0/"&gt;version 2.0.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt;, which come installed 
  with Python 3, to install and isolate these Django and Rollbar libraries 
  from your other applications&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://www.mapbox.com/"&gt;free Mapbox account&lt;/a&gt; to interact with their
  &lt;a href="/application-programming-interfaces.html"&gt;web API&lt;/a&gt; using 
  &lt;a href="/javascript.html"&gt;JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need help getting your 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; configured
before running this code, take a look at
&lt;a href="/blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;this guide for setting up Python 3 and Django on Ubuntu 16.04 LTS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This blog post's code is also available on GitHub within the
&lt;a href="https://github.com/fullstackpython/blog-code-examples"&gt;maps-django-mapbox directory of the blog-code-examples repository&lt;/a&gt;. 
Take the code and use it for your own purposes because it is all
provided under the MIT open source license.&lt;/p&gt;
&lt;h2&gt;Installing Dependencies&lt;/h2&gt;
&lt;p&gt;Start the Django project by creating a new 
&lt;a href="/virtual-environments-virtualenvs-venvs.html"&gt;virtual environment&lt;/a&gt; 
using the following command. I recommend using a separate directory 
such as &lt;code&gt;~/venvs/&lt;/code&gt; (the tilde is a shortcut for your user's &lt;code&gt;home&lt;/code&gt; 
directory) so that you always know where all your virtualenvs are 
located.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv djangomaps
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv with the &lt;code&gt;activate&lt;/code&gt; shell script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; djangomaps/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after activating the virtualenv:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180519-django-maps/virtualenv.jpg" width="100%" class="shot rnd outl" alt="Activate your djangomaps virtualenv."&gt;&lt;/p&gt;
&lt;p&gt;Remember that you have to activate your virtualenv in every new terminal 
window where you want to use dependencies in the virtualenv.&lt;/p&gt;
&lt;p&gt;We can now install the &lt;a href="https://pypi.org/project/Django/2.0.5"&gt;Django&lt;/a&gt; 
package into the activated but otherwise empty virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install django==2.0.5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Look for the following output to confirm Django installed
correctly from PyPI.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  Downloading https://files.pythonhosted.org/packages/23/91/2245462e57798e9251de87c88b2b8f996d10ddcb68206a8a020561ef7bd3/Django-2.0.5-py3-none-any.whl (7.1MB)
      100% |████████████████████████████████| 7.1MB 231kB/s 
      Collecting pytz (from django==2.0.5)
        Using cached https://files.pythonhosted.org/packages/dc/83/15f7833b70d3e067ca91467ca245bae0f6fe56ddc7451aa0dc5606b120f2/pytz-2018.4-py2.py3-none-any.whl
        Installing collected packages: pytz, django
        Successfully installed django-2.0.5 pytz-2018.4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Django dependency is ready to go so now we can create our project
and add some awesome maps to the application.&lt;/p&gt;
&lt;h2&gt;Building Our Django Project&lt;/h2&gt;
&lt;p&gt;We can use the &lt;a href="/django.html"&gt;Django&lt;/a&gt; &lt;code&gt;django-admin.py&lt;/code&gt; tool to create
the boilerplate code structure to get our project started.
Change into the directory where you develop your applications. For 
example, I typically use &lt;code&gt;/Users/matt/devel/py/&lt;/code&gt;. Then run the following 
command to start a Django project named &lt;code&gt;djmaps&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;django-admin.py startproject djmaps
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;django-admin.py&lt;/code&gt; command will create a directory named &lt;code&gt;djmaps&lt;/code&gt; along
with several subdirectories that you should be familiar with if you have 
previously worked with Django.&lt;/p&gt;
&lt;p&gt;Change directories into the new project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd djmaps
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a new Django app within &lt;code&gt;djmaps&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py startapp maps
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django will generate a new folder named &lt;code&gt;maps&lt;/code&gt; for the project.
We should update the URLs so the app is accessible before we write
our &lt;code&gt;views.py&lt;/code&gt; code.&lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;djmaps/djmaps/urls.py&lt;/code&gt;. Add the highlighted lines so that URLs
will check the &lt;code&gt;maps&lt;/code&gt; app for appropriate URL matching.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; (comments)&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;


&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;maps.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save &lt;code&gt;djmaps/djmaps/urls.py&lt;/code&gt; and open &lt;code&gt;djmaps/djmaps/settings.py&lt;/code&gt;.
Add the &lt;code&gt;maps&lt;/code&gt; app to &lt;code&gt;settings.py&lt;/code&gt; by inserting the highlighted line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Application definition&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
    &lt;span class="s1"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;maps&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you change the default &lt;code&gt;DEBUG&lt;/code&gt; and &lt;code&gt;SECRET_KEY&lt;/code&gt; 
values in &lt;code&gt;settings.py&lt;/code&gt; before you deploy any code to production. Secure 
your app properly with the information from the Django
&lt;a href="https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/"&gt;production deployment checklist&lt;/a&gt; 
so that you do not add your project to the list of hacked applications
on the web.&lt;/p&gt;
&lt;p&gt;Save and close &lt;code&gt;settings.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next change into the &lt;code&gt;djmaps/maps&lt;/code&gt; directory. Create a new file named 
&lt;code&gt;urls.py&lt;/code&gt; to contain routes for the &lt;code&gt;maps&lt;/code&gt; app.&lt;/p&gt;
&lt;p&gt;Add these lines to the empty &lt;code&gt;djmaps/maps/urls.py&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;                                                                                                                              
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_map&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save &lt;code&gt;djmaps/maps/urls.py&lt;/code&gt; and open &lt;code&gt;djmaps/maps/views.py&lt;/code&gt; add the
following two highlighted lines. You can keep the boilerplate comment or 
delete it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;


&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, create a directory for your template files named &lt;code&gt;templates&lt;/code&gt; under
the &lt;code&gt;djmaps/maps&lt;/code&gt; app directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir templates
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a new file named &lt;code&gt;default.html&lt;/code&gt; within &lt;code&gt;djmaps/maps/templates&lt;/code&gt; 
that contains the following &lt;a href="/django-templates.html"&gt;Django template&lt;/a&gt; markup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Interactive maps for Django web apps&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Map time!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can test out this static page to make sure all of our code is
correct, then we'll use Mapbox to embed a customizable map within
the page. Change into the base directory of your Django project
where the &lt;code&gt;manage.py&lt;/code&gt; file is located. Execute the development
server with the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Django development server will start up with no issues other than an 
unapplied migrations warning.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Performing system checks...

System check identified no issues (0 silenced).

You have 14 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run &amp;#39;python manage.py migrate&amp;#39; to apply them.

May 21, 2018 - 12:47:54
Django version 2.0.5, using settings &amp;#39;djmaps.settings&amp;#39;
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open a web browser and go to &lt;code&gt;localhost:8000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180519-django-maps/map-time.png" width="100%" class="shot rnd outl" alt="Plain old HTML page."&gt;&lt;/p&gt;
&lt;p&gt;Our code works, but boy is that a plain-looking HTML page. Let's make the
magic happen by adding JavaScript to the template to generate maps.&lt;/p&gt;
&lt;h2&gt;Adding Maps with Mapbox&lt;/h2&gt;
&lt;p&gt;Head to &lt;a href="https://www.mapbox.com/"&gt;mapbox.com&lt;/a&gt; in your web browser to
access the Mapbox homepage.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180519-django-maps/mapbox-homepage.jpg" width="100%" class="shot rnd outl" alt="Mapbox homepage."&gt;&lt;/p&gt;
&lt;p&gt;Click on "Get Started" or "Get Started for free" (the text depends on whether
or not you already have a Mapbox account).&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180519-django-maps/sign-up.jpg" width="100%" class="shot rnd outl" alt="Sign up for a Mapbox account."&gt;&lt;/p&gt;
&lt;p&gt;Sign up for a new free developer account or sign in to your existing 
account.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180519-django-maps/add-mapbox.png" width="100%" class="shot rnd outl" alt="Add Mapbox to your application."&gt;&lt;/p&gt;
&lt;p&gt;Click the "JS Web" option.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180519-django-maps/method-installation.png" width="100%" class="shot rnd outl" alt="Choose the method of installation."&gt;&lt;/p&gt;
&lt;p&gt;Choose "Use the Mapbox CDN" for the installation method. The next two screens
show some code that you should add to your &lt;code&gt;djmaps/maps/templates/default.html&lt;/code&gt; 
template file. The code will look like the following but you will need to 
replace the &lt;code&gt;mapboxgl.accessToken&lt;/code&gt; line with your own access token.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Interactive maps for Django web apps&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
~~    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
~~    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.css&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;stylesheet&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Map time!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
~~   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;map&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100%&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;height:400px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
~~   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mapbox_access_token&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;     &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;     &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mapbox://styles/mapbox/streets-v10&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Re-open &lt;code&gt;djmaps/maps/views.py&lt;/code&gt; to update the parameters passed into the
Django template. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;default_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="c1"&gt;# TODO: move this token to Django settings from an environment variable&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="c1"&gt;# found in the Mapbox account settings and getting started instructions&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="c1"&gt;# see https://www.mapbox.com/account/ under the &amp;quot;Access tokens&amp;quot; section&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;mapbox_access_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pk.my_mapbox_access_token&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;default.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="o"&gt;~~&lt;/span&gt;                  &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mapbox_access_token&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;mapbox_access_token&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Mapbox access token should really be stored in the Django settings
file, so we left a "TODO" note to handle that as a future step.&lt;/p&gt;
&lt;p&gt;Now we can try our webpage again. Refresh &lt;code&gt;localhost:8000&lt;/code&gt; in your
web browser.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180519-django-maps/map-time-with-map.jpg" width="100%" class="shot rnd outl" alt="Screenshot of the Mapbox map showing up in our Django front end."&gt;&lt;/p&gt;
&lt;p&gt;Sweet, we've got a live, interactive map! It's kind of weird thought how it
is zoomed out to view the entire world. Time to customize the map using
a few JavaScript parameters.&lt;/p&gt;
&lt;h2&gt;Customizing the Map&lt;/h2&gt;
&lt;p&gt;We can modify the map by changing parameters for the style, zoom level,
location and many other attributes.&lt;/p&gt;
&lt;p&gt;We'll start by changing the location that the initial map centers in
on as well as the zoom level.&lt;/p&gt;
&lt;p&gt;Re-open &lt;code&gt;djmaps/maps/templates/default.html&lt;/code&gt; and modify the first 
highlighted lines so it ends with a commas and add the two new 
highlighted lines shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Interactive maps for Django web apps&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.css&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;stylesheet&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Map time!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;map&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100%&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;height:400px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mapbox_access_token&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
     &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;     &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mapbox://styles/mapbox/streets-v10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;     &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;77.03&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;38.91&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;     &lt;span class="nx"&gt;zoom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first number, -77.03, for the &lt;code&gt;center&lt;/code&gt; array is the longitude
and the second number, 38.91, is the latitude. Zoom level 9 is much
closer to the city than the default which was the entire world at
level 0. All of the customization values are listed in the 
&lt;a href="https://www.mapbox.com/mapbox-gl-js/api/"&gt;Mapbox GL JS API documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now refresh the page at &lt;code&gt;localhost:8000&lt;/code&gt; to reload our map.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180519-django-maps/map-updated-style-1.jpg" width="100%" class="shot rnd outl" alt="Updated map centered and zoomed in on Washington, D.C."&gt;&lt;/p&gt;
&lt;p&gt;Awesome, now we are zoomed in on Washington, D.C. and can still move
around to see more of the map. Let's make a couple other changes to
our map before wrapping up.&lt;/p&gt;
&lt;p&gt;Again back in &lt;code&gt;djmaps/maps/templates/default.html&lt;/code&gt; change the highlighted
line for the &lt;code&gt;style&lt;/code&gt; key to the &lt;code&gt;mapbox://styles/mapbox/satellite-streets-v10&lt;/code&gt;
value. That will change the look from an abstract map style to satellite
image data. Update &lt;code&gt;zoom: 9&lt;/code&gt; so that it has a comma at the end of the line
and add &lt;code&gt;bearing: 180&lt;/code&gt; as the last key-value pair in the configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Interactive maps for Django web apps&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.js&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;https://api.mapbox.com/mapbox-gl-js/v0.44.2/mapbox-gl.css&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;stylesheet&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Map time!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;map&amp;#39;&lt;/span&gt; &lt;span class="na"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;100%&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;height:400px&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;accessToken&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;mapbox_access_token&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;map&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;mapboxgl&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Map&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
     &lt;span class="nx"&gt;container&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;map&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;     &lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mapbox://styles/mapbox/satellite-streets-v10&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;     &lt;span class="nx"&gt;center&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;77.03&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;38.91&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;     &lt;span class="nx"&gt;zoom&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;     &lt;span class="nx"&gt;bearing&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;180&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
   &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save the template and refresh &lt;code&gt;localhost:8000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180519-django-maps/map-updated-style-2.jpg" width="100%" class="shot rnd outl" alt="Updated map with satellite imagery and street map overlay."&gt;&lt;/p&gt;
&lt;p&gt;The map now provides a satellite view with streets overlay but it is
also... "upside down"! At least the map is upside down compared to how 
most maps are drawn, due to the &lt;code&gt;bearing: 180&lt;/code&gt; value, which modified
this map's rotation.&lt;/p&gt;
&lt;p&gt;Not bad for a few lines of JavaScript in our Django application.
Remember to check the 
&lt;a href="https://www.mapbox.com/mapbox-gl-js/api/"&gt;Mapbox GL JS API documentation&lt;/a&gt;
for the exhaustive list of parameters that you can adjust.&lt;/p&gt;
&lt;h2&gt;What's Next?&lt;/h2&gt;
&lt;p&gt;We just learned how to add interactive JavaScript-based maps to our 
&lt;a href="/django.html"&gt;Django&lt;/a&gt; web applications, as well as modify the look
and feel of the maps. Next try out some of the other APIs Mapbox
provides including: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.mapbox.com/api-documentation/#directions"&gt;directions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mapbox.com/api-documentation/#map-matching"&gt;map matching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.mapbox.com/api-documentation/#geocoding"&gt;geocoding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Questions? Let me know via 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;a GitHub issue ticket on the Full Stack Python repository&lt;/a&gt;, 
on Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Do you see a typo, syntax issue or wording that's confusing in this blog 
post? Fork
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/180519-django-maps-mapbox.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request with a fix or 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;file an issue ticket on GitHub&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>全栈 Python 在 PyCon US 2018 上</title><link href="https://www.fullstackpython.com/blog/full-stack-python-pycon-us-2018.html" rel="alternate"></link><published>2018-05-09T00:00:00-04:00</published><updated>2018-05-09T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2018-05-09:blog/full-stack-python-pycon-us-2018.html</id><summary type="html">&lt;p&gt;&lt;a href="https://us.pycon.org/2018/about/"&gt;PyCon US 2018&lt;/a&gt; kicked off today with the 
&lt;a href="https://us.pycon.org/2018/schedule/tutorials/"&gt;first day of tutorials&lt;/a&gt;. I am
flying in tomorrow and will be there through the end of the 
weekend. If you're around, come by either the 
&lt;a href="https://www.twilio.com/"&gt;Twilio booth&lt;/a&gt; or the community booth where the 
gang from &lt;a href="https://talkpython.fm/"&gt;Talk Python to Me&lt;/a&gt;, 
&lt;a href="https://realpython.com/"&gt;Real Python&lt;/a&gt;, &lt;a href="https://pybit.es/"&gt;PyBites&lt;/a&gt; and 
&lt;a href="http://testandcode.com/"&gt;Test &amp;amp; Code&lt;/a&gt; will be hanging out. I will be 
at one of those two spots when I am not watching talks! I'd love your 
feedback on what I can improve on 
&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;. It's also great 
hearing your stories about how the site has helped you improve your 
development skills.&lt;/p&gt;
&lt;p&gt;For those folks who can't make it to PyCon, I'll be tweeting the best stuff 
that I see throughout the conference via 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;. Likewise, if I miss 
something let me know on Twitter or via email so we can highlight it.&lt;/p&gt;
&lt;p&gt;One quick update on the
&lt;a href="https://www.deploypython.com/"&gt;Full Stack Python Guide to Deployments book&lt;/a&gt;. 
I have a great update in the works that bumps to the latest versions of 
Ubuntu (now 18.04 LTS), Ansible 2.5.1 and Flask 1.0.2. It has been a long 
time coming and will be a free update to all existing purchasers. If you have
not bought the book yet, I recommend waiting until the update is out 
because the existing book's software versions are getting way too out of 
date to be useful to most projects.&lt;/p&gt;
&lt;p&gt;Got questions or comments about 
&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;? Send me an email or 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;submit an issue ticket on GitHub&lt;/a&gt; 
to let me know how to improve the site as I continue to fill in the 
&lt;a href="https://www.fullstackpython.com/table-of-contents.html"&gt;table of contents&lt;/a&gt; 
with &lt;a href="https://www.fullstackpython.com/change-log.html"&gt;new pages&lt;/a&gt; and 
&lt;a href="https://www.fullstackpython.com/blog.html"&gt;new tutorials&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>在 AWS Lambda 上监控 Python 3.6 函数</title><link href="https://www.fullstackpython.com/blog/monitor-python-3-6-example-code-aws-lambda-rollbar.html" rel="alternate"></link><published>2018-04-25T00:00:00-04:00</published><updated>2018-04-25T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2018-04-20:blog/monitor-python-3-6-example-code-aws-lambda-rollbar.html</id><summary type="html">&lt;p&gt;&lt;a href="/aws-lambda.html"&gt;Amazon Web Services (AWS) Lambda&lt;/a&gt; is a usage-based
execution environment that can run Python 3.6 code. If you have never
previously used AWS Lambda then you can read&lt;br /&gt;
&lt;a href="/blog/aws-lambda-python-3-6.html"&gt;How to Create Your First Python 3.6 AWS Lambda Function&lt;/a&gt;.
However, this tutorial will give you every step to follow even if you
are completely new to AWS.&lt;/p&gt;
&lt;p&gt;In this post we are going to monitor Python code that is running on AWS 
Lambda by using a hosted &lt;a href="/monitoring.html"&gt;monitoring&lt;/a&gt; service, 
&lt;a href="/rollbar.html"&gt;Rollbar&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Required Tools and Code&lt;/h2&gt;
&lt;p&gt;A local &lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; is not
required to follow this tutorial. All the work will happen in a web
browser through the &lt;a href="https://console.aws.amazon.com/console/"&gt;AWS Console&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The example code can be copy and pasted from this blog post or you
can access it on GitHub under the
&lt;a href="https://github.com/fullstackpython/blog-code-examples"&gt;Full Stack Python blog-post-examples&lt;/a&gt;
repository within the 
&lt;a href="https://github.com/fullstackpython/blog-code-examples/tree/master/aws-lambda-python-3-6"&gt;monitor-aws-lambda-python-3-6 directory&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Accessing the AWS Lambda Service&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://aws.amazon.com/console"&gt;Sign into your existing AWS account&lt;/a&gt; 
or sign up for a &lt;a href="https://aws.amazon.com/"&gt;new account&lt;/a&gt;. AWS Lambda
comes with a free tier so you can test code and execute basic 
applications without cost.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/aws-amazon-com.jpg" width="100%" class="shot rnd outl" alt="AWS Lambda landing page."&gt;&lt;/p&gt;
&lt;p&gt;AWS has a boatload of services so use the search box to enter
"lambda" and select "Lambda" when it appears to get to the appropriate
starting page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/search-for-lambda.jpg" width="100%" class="shot rnd outl" alt="Search for lambda in the dashboard text box."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Create function" button.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/create-function.png" width="100%" class="shot rnd outl" alt="The create Lambda function screen."&gt;&lt;/p&gt;
&lt;p&gt;Select "Author from Scratch". Fill in a name so you can easily recognize this
function for future reference. I chose "monitorPython3". Select "Python 3.6"
for Runtime.&lt;/p&gt;
&lt;p&gt;Select "Create new role from template(s)", input a Role name, for example
"basicEdgeLambdaRole". For Policy templates choose "Basic Edge Lambda 
Permissions".&lt;/p&gt;
&lt;p&gt;Then click "Create function."&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/monitorpython3.png" width="100%" class="shot rnd outl" alt="Blank AWS Lambda function named monitorPython3."&gt;&lt;/p&gt;
&lt;p&gt;Ok, finally we have arrived at the configuration screen where we can write
our code.&lt;/p&gt;
&lt;h2&gt;Coding a Python Function&lt;/h2&gt;
&lt;p&gt;Scroll down to the "Function code" user interface section.&lt;/p&gt;
&lt;p&gt;Paste or type in the following code, replacing what is already in the 
text box.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;rollbar&lt;/span&gt;


&lt;span class="n"&gt;ROLLBAR_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ROLLBAR_SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;missing Rollbar secret key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rollbar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ROLLBAR_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;production&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@rollbar.lambda_function&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lambda_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;print_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;print_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# check if message exists and how many times to print it&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;print_count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_count&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# formatted string literals are new in Python 3.6&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message: {message}.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;print_count&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code contains the required &lt;code&gt;lambda_handler&lt;/code&gt; function. &lt;code&gt;lambda_handler&lt;/code&gt; 
is Lambda's hook for where to start execution the code.&lt;/p&gt;
&lt;p&gt;The Python code expects two environment variables that are read by the
&lt;code&gt;os&lt;/code&gt; module with the &lt;code&gt;getenv&lt;/code&gt; function. The &lt;code&gt;message&lt;/code&gt; and
&lt;code&gt;print_count&lt;/code&gt; variables are set by the environment variables.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/lambda-coded.png" width="100%" class="shot rnd outl" alt="Python 3.6 code within a Lambda function."&gt;&lt;/p&gt;
&lt;p&gt;Below the code input text box on this function configuration screen there 
is a section to set environment variable key-value pairs. We need to input 
two environment variables and then we can run our code.&lt;/p&gt;
&lt;p&gt;Enter the keys named &lt;code&gt;message&lt;/code&gt; with a value of &lt;code&gt;Hello World!&lt;/code&gt;. Then
enter &lt;code&gt;print_count&lt;/code&gt; as a second key with the value of &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our Python code's error handling is not robust. A value other than a 
number in the &lt;code&gt;print_count&lt;/code&gt; variable will cause the script to throw 
an exception when it is executed due to the forced casting of &lt;code&gt;print_count&lt;/code&gt; 
via the &lt;code&gt;int()&lt;/code&gt; function. We will use the exception that can occur during 
this forced casting as a trivial example that shows what happens when 
errors in our code happen during Lambda function execution.&lt;/p&gt;
&lt;p&gt;Hit the "Save" button at the top right. Use the
default "Hello World" test template values and name it "testHelloWorld".
We do not need any of those values for our function. &lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/configure-test-event.png" width="100%" class="shot rnd outl" alt="Configure an empty test event for your Lambda function."&gt;&lt;/p&gt;
&lt;p&gt;Click "Create" and your test template will be created. Now click
"Test" to run the function. You should see "Execution result: succeeded" 
with the &lt;code&gt;message&lt;/code&gt; variable printed five times.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/success-execution.png" width="100%" class="shot rnd outl" alt="Execution succeeds when there is an integer value for the print_count variable."&gt;&lt;/p&gt;
&lt;p&gt;Now change the value of &lt;code&gt;print_count&lt;/code&gt; to &lt;code&gt;i dunno&lt;/code&gt;. Save the function
and click "Test" again. The function will fail.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/failed-execution-result.png" width="100%" class="shot rnd outl" alt="Execution fails when we do not have an integer value for print_count variable."&gt;&lt;/p&gt;
&lt;p&gt;It is obvious when we are working in the Console that an error just
occurred. However, in most cases an error will happen sporadically 
which is why we need a monitoring system in place to catch and report
on those exceptions.&lt;/p&gt;
&lt;h2&gt;Monitoring our Lambda Function&lt;/h2&gt;
&lt;p&gt;Head over to the &lt;a href="https://rollbar.com/"&gt;Rollbar homepage&lt;/a&gt; 
to obtain a free account and grab the necessary information to add their 
hosted monitoring service into our Lambda application.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/rollbar-home.jpg" width="100%" class="shot rnd outl" alt="Rollbar homepage."&gt;&lt;/p&gt;
&lt;p&gt;Click "Sign Up" in the upper right-hand corner. Enter your 
email address, username and desired password.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/sign-up-rollbar.jpg" width="100%" class="shot rnd outl" alt="Signing up for a Rollbar account in your browser."&gt;&lt;/p&gt;
&lt;p&gt;After the sign up page you will see the onboarding flow where you can
enter a project name and select a programming language. For the project
name type in "Full Stack Python" and then select that you are monitoring 
a Python-based application.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/create-project.jpg" width="100%" class="shot rnd outl" alt="Name your project 'Full Stack Python' and select Python as your language."&gt;&lt;/p&gt;
&lt;p&gt;Press "Continue" at the bottom of the screen. The next
page shows us a few instructions on how to add monitoring.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/configure-project.jpg" width="100%" class="shot rnd outl" alt="Configure project using your server-side access token."&gt;&lt;/p&gt;
&lt;p&gt;Take note of that server-side access token as we will need to set it
as an environment variable on AWS Lambda.&lt;/p&gt;
&lt;p&gt;We can now update our Python function to collect and aggregate
the errors that occur in our application. Add the following highlighted
lines to your Lambda code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;rollbar&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;ROLLBAR_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ROLLBAR_SECRET_KEY&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;missing Rollbar secret key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;rollbar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ROLLBAR_KEY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;production&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nd"&gt;@rollbar.lambda_function&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lambda_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;print_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;print_count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# check if message exists and how many times to print it&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;print_count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;print_count&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# formatted string literals are new in Python 3.6&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;message: {message}.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;print_count&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above highlighted new code lines incorporate the &lt;code&gt;rollbar&lt;/code&gt; library
into our application, set the &lt;code&gt;ROLLBAR_KEY&lt;/code&gt; with our environment variable
and use the &lt;code&gt;rollbar.lambda_function&lt;/code&gt; decorator to catch all errors in
our &lt;code&gt;lambda_handler&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Add the following third environment variable named &lt;code&gt;ROLLBAR_SECRET_KEY&lt;/code&gt;
that is the server-side token from your new Rollbar project.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/rollbar-key-env-var.png" width="100%" class="shot rnd outl" alt="Add your Rollbar server-side key into a Lambda environment variable."&gt;&lt;/p&gt;
&lt;p&gt;There is just one issue with this function on Lambda as it stands: there is 
no way for Lambda to know about the Rollbar package code. The external Rollbar
dependency needs to be included. There are a couple of ways to handle the
issue:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download 
   &lt;a href="https://github.com/fullstackpython/blog-code-examples/raw/master/monitor-aws-lambda-python-3-6/hello-rollbar.zip"&gt;this pre-made zip file&lt;/a&gt;
   from the GitHub repository which includes all of the Rollbar package
   code and our code in the &lt;code&gt;lambda_function.py&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;Re-create the above code on your local system and 
   &lt;a href="https://haythamsalhi.wordpress.com/2017/10/04/creating-lambda-deployment-package-of-python/"&gt;use pip to obtain the dependencies and create a zip file locally&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I provided the pre-made zip file to save time in this tutorial so try
that one now so we can see the final results. Under "Function code", change
the "Code entry type" from "Edit code inline" to "Upload a .ZIP file".
Hit the "Upload" button under "Function package".&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/upload-zip-package.png" width="100%" class="shot rnd outl" alt="Upload the ZIP file with Rollbar dependency."&gt;&lt;/p&gt;
&lt;p&gt;Hit the "Save" button at the top. With our new code we can now see if 
Rollbar will capture and report the exceptions. Hit the "Save" button and 
then "Test".&lt;/p&gt;
&lt;p&gt;The function will fail as expected. If we move over to our Rollbar
dashboard and refresh the page, we see the exceptions.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180420-monitor-aws-lambda/rollbar-exceptions.png" width="100%" class="shot rnd outl" alt="Rollbar user interface with exceptions."&gt;&lt;/p&gt;
&lt;p&gt;Now we can track Lambda exceptions across many functions regardless
of how frequently they are running.&lt;/p&gt;
&lt;h2&gt;What's Next?&lt;/h2&gt;
&lt;p&gt;We just wrote and executed a Python 3.6 function on AWS Lambda then
captured the exception message into our Rollbar logs. Now you can
continue building out your Python code knowing that when something
goes wrong you will have full visibility on what happened.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="/aws-lambda.html"&gt;AWS Lambda section&lt;/a&gt; for 
more tutorials by other developers.&lt;/p&gt;
&lt;p&gt;Further questions? Contact me on Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I am also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/180420-monitor-aws-lambda-python-3-6.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>在 macOS 上用 Docker 容器开发 Flask 应用程序</title><link href="https://www.fullstackpython.com/blog/develop-flask-web-apps-docker-containers-macos.html" rel="alternate"></link><published>2018-06-05T00:00:00-04:00</published><updated>2018-06-05T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2018-03-09:blog/develop-flask-web-apps-docker-containers-macos.html</id><summary type="html">&lt;p&gt;Adding &lt;a href="/docker.html"&gt;Docker&lt;/a&gt; to your &lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; and 
&lt;a href="/flask.html"&gt;Flask&lt;/a&gt; &lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; 
can be confusing when you are just getting started with containers. Let's 
quickly get Docker installed and configured for developing Flask web 
applications on your local system.&lt;/p&gt;
&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;This tutorial is written for &lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt;. It will work with
Python 2 but I have not tested it with the 
&lt;a href="https://pythonclock.org/"&gt;soon-to-be deprecated 2.7 version&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://docs.docker.com/docker-for-mac/install/"&gt;Docker for Mac&lt;/a&gt; is necessary.
I recommend the stable release unless you have an explicit purpose for the edge 
channel.&lt;/p&gt;
&lt;p&gt;Within the Docker container we will use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 3, specifically the
  &lt;a href="https://hub.docker.com/r/library/python/tags/"&gt;slim-3.6.5 version&lt;/a&gt;
  from Docker Hub&lt;/li&gt;
&lt;li&gt;&lt;a href="/flask.html"&gt;Flask&lt;/a&gt; version 1.0.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of the code for the Dockerfile and the Flask app are available open source
under the MIT license on GitHub under the 
&lt;a href="https://github.com/fullstackpython/blog-code-examples/tree/master/docker-flask-mac"&gt;docker-flask-mac directory&lt;/a&gt;
of the
&lt;a href="https://github.com/fullstackpython/blog-code-examples"&gt;blog-code-examples&lt;/a&gt;
repository. Use the code for your own purposes as much as you like.&lt;/p&gt;
&lt;h2&gt;Installing Docker on macOS&lt;/h2&gt;
&lt;p&gt;We need to install Docker before we can spin up our Docker containers. If you
already have Docker for Mac installed and working, feel free to jump to the
next section.&lt;/p&gt;
&lt;p&gt;On your Mac, 
&lt;a href="https://www.docker.com/community-edition#/download"&gt;download the Docker Community Edition (CE) for Mac&lt;/a&gt;
installer.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180309-flask-docker/docker-ce.jpg" width="100%" 
 class="shot rnd" alt="Download the Docker Community Edition for Mac."&gt;&lt;/p&gt;
&lt;p&gt;Find the newly-downloaded install within Finder and double click on the file.
Follow the installation process, which includes granting administrative privileges
to the installer.&lt;/p&gt;
&lt;p&gt;Open Terminal when the installer is done. Test your Docker installation with the 
&lt;code&gt;--version&lt;/code&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker --version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If Docker is installed correctly you should see the following output:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Docker version 18.03.1-ce, build 9ee9f40
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that Docker runs through a system agent you can find in the menu bar.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180309-flask-docker/docker-agent.png" width="100%" 
 class="shot rnd" alt="Docker agent in the menu bar."&gt;&lt;/p&gt;
&lt;p&gt;I have found the Docker agent to take up some precious battery life
on my Macbook Pro. If I am not developing and need to max battery time I will
close down the agent and start it back up again when I am ready to code. &lt;/p&gt;
&lt;p&gt;Now that Docker is installed let's get to running a container and writing
our Flask application.&lt;/p&gt;
&lt;h2&gt;Dockerfile&lt;/h2&gt;
&lt;p&gt;Docker needs to know what we want in a container, which is where the 
&lt;code&gt;Dockerfile&lt;/code&gt; comes in. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# this is an official Python runtime, used as the parent image
FROM python:3.6.5-slim

# set the working directory in the container to /app
WORKDIR /app

# add the current directory to the container as /app
ADD . /app

# execute everyone&amp;#39;s favorite pip command, pip install -r
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# unblock port 80 for the Flask app to run on
EXPOSE 80

# execute the Flask app
CMD [&amp;quot;python&amp;quot;, &amp;quot;app.py&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save the Dockerfile so that we can run our next command with the completed
contents of the file. On the commandline run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker build -t flaskdock .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above &lt;code&gt;docker build&lt;/code&gt; file uses the &lt;code&gt;-t&lt;/code&gt; flag to tag the image with
the name of &lt;code&gt;flaskdock&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the build worked successfully we can see the image in with the 
&lt;code&gt;docker image ls&lt;/code&gt; command. Give that a try now:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker image ls
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We should then see our tag name in the images list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
flaskdock           latest              24045e0464af        2 minutes ago       165MB
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our image is ready to load up as a container so we can write a quick
Flask app that we will use to test our environment by running it within
the container.&lt;/p&gt;
&lt;h2&gt;Coding A Simple Flask app&lt;/h2&gt;
&lt;p&gt;Time to put together a super simple "Hello, World!" Flask web app to test
running Python code within our Docker container. Within the current
project directory, create a file named &lt;code&gt;app.py&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi from your Flask app running in your Docker container!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0.0.0.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above 7 lines of code (not counting blank PEP8-compliant lines) in 
&lt;a href="https://github.com/fullstackpython/blog-code-examples/blob/master/docker-flask-mac/app.py"&gt;app.py&lt;/a&gt; 
allow our application to return a simple message when run with the 
Flask development server.&lt;/p&gt;
&lt;p&gt;We need just one more file to specify our &lt;code&gt;Flask&lt;/code&gt; dependency. Create 
a &lt;code&gt;requirements.txt&lt;/code&gt; file within the same directory as &lt;code&gt;app.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;flask==1.0.2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure both the &lt;code&gt;app.py&lt;/code&gt; and &lt;code&gt;requirements.txt&lt;/code&gt; file are saved then
we can give the code a try.&lt;/p&gt;
&lt;h2&gt;Running the Container&lt;/h2&gt;
&lt;p&gt;Now that we have our image in hand along with the Python code in a file 
we can run the image as a container with the &lt;code&gt;docker run&lt;/code&gt; command. Execute 
the following command, making sure to replace the absolute path for the 
volume to your own directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker run -p 5000:80 --volume=/Users/matt/devel/py/flaskdocker:/app flaskdock
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you receive the error 
&lt;code&gt;python: can't open file 'app.py': [Errno 2] No such file or directory&lt;/code&gt; then
you likely forgot to chance &lt;code&gt;/Users/matt/devel/py/flaskdocker&lt;/code&gt; to the 
directory where your project files, especially &lt;code&gt;app.py&lt;/code&gt;, are located.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180309-flask-docker/flask-app-response.png" width="100%" 
 class="shot rnd" alt="Flask app responding to requests from within a Docker container."&gt;&lt;/p&gt;
&lt;p&gt;Everything worked when you see a simple text-based HTTP response like what
is shown above in the screenshot of my Chrome browser.&lt;/p&gt;
&lt;h2&gt;What's Next?&lt;/h2&gt;
&lt;p&gt;We just installed Docker and configured a Flask application to run inside a 
container. That is just the beginning of how you can integrate Docker into 
your workflow. I strongly recommend reading the 
&lt;a href="https://docs.docker.com/compose/django/"&gt;Django with PostgreSQL quickstart&lt;/a&gt;
that will introduce you to Docker Swarm as well as the core Docker container
service.&lt;/p&gt;
&lt;p&gt;Next up take a look at the &lt;a href="/docker.html"&gt;Docker&lt;/a&gt; and 
&lt;a href="/deployment.html"&gt;deployment&lt;/a&gt; pages for more related tutorials.&lt;/p&gt;
&lt;p&gt;Questions? Let me know via a GitHub
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;issue ticket on the Full Stack Python repository&lt;/a&gt;, 
on Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Do you see a typo, syntax issue or just something that's confusing in this 
blog post? Fork
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/180309-flask-docker-macos.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request with a fix or 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;file an issue ticket on GitHub&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>ReportLab 和未来社区项目启动</title><link href="https://www.fullstackpython.com/blog/python-community-project-launches.html" rel="alternate"></link><published>2018-03-04T00:00:00-05:00</published><updated>2018-03-04T00:00:00-05:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2018-03-04:blog/python-community-project-launches.html</id><summary type="html">&lt;p&gt;Congratulations to fellow Python developer 
&lt;a href="https://github.com/driscollis"&gt;Mike Driscoll&lt;/a&gt; for his successful 
&lt;strong&gt;&lt;a href="https://www.kickstarter.com/projects/34257246/reportlab-pdf-processing-with-python/"&gt;ReportLab: PDF Processing with Python Kickstarter&lt;/a&gt;&lt;/strong&gt; 
that just concluded with over double his funding goal.&lt;/p&gt;
&lt;p&gt;I was excited to back Mike's project for a couple of reasons. First, I've
used &lt;a href="https://www.reportlab.com/opensource/"&gt;ReportLab&lt;/a&gt; on past projects 
and it is a handy library for working with PDFs. Second, it is super useful 
to have entire books written on niche Python code libraries such as ReportLab.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt; will gladly back and 
spread the word about other awesome, legitimate Python community projects. Let 
me know via email (matthew.makai@gmail.com or mattmakai@fullstackguides.com) 
when you are getting ready to launch a Python project so I can help give a 
boost.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://talkpython.fm/"&gt;Michael Kennedy&lt;/a&gt; and I know from our 
&lt;a href="https://www.kickstarter.com/projects/mikeckennedy/python-for-entrepreneurs-video-course"&gt;own Kickstarter experience&lt;/a&gt; 
how much work goes into making these ideas come to fruition. It's a big 
confidence boost to have a community tailwind at your back and I am always 
happy to be part of that tailwind.&lt;/p&gt;
&lt;p&gt;Got questions or comments about 
&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;? Send me an email or 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;submit an issue ticket on GitHub&lt;/a&gt; 
to let me know how to improve the site
as I continue to 
&lt;a href="https://www.fullstackpython.com/table-of-contents.html"&gt;fill in the table of contents&lt;/a&gt; 
with &lt;a href="https://www.fullstackpython.com/change-log.html"&gt;new pages&lt;/a&gt;
and 
&lt;a href="https://www.fullstackpython.com/blog.html"&gt;new tutorials&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>使用 Rollbar 监控 Django 项目</title><link href="https://www.fullstackpython.com/blog/monitor-django-projects-web-apps-rollbar.html" rel="alternate"></link><published>2018-05-20T00:00:00-04:00</published><updated>2018-05-20T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2018-02-02:blog/monitor-django-projects-web-apps-rollbar.html</id><summary type="html">&lt;p&gt;One fast way to scan for exceptions and errors in your
&lt;a href="/django.html"&gt;Django&lt;/a&gt; web application projects is to add a few lines of 
code to include a hosted &lt;a href="/monitoring.html"&gt;monitoring&lt;/a&gt; tool.&lt;/p&gt;
&lt;p&gt;In this tutorial we will learn to add the
&lt;a href="https://rollbar.com"&gt;Rollbar monitoring service&lt;/a&gt;
to a web app to visualize any issues produced by our web app.
This tutorial will use &lt;a href="/django.html"&gt;Django&lt;/a&gt; as the 
&lt;a href="/web-frameworks.html"&gt;web framework&lt;/a&gt; to build the web application but
there are also tutorials for 
the &lt;a href="/blog/hosted-monitoring-flask-web-apps.html"&gt;Flask&lt;/a&gt; and 
&lt;a href="/blog/monitor-python-web-applications.html"&gt;Bottle&lt;/a&gt; frameworks as well.
You can also check out a list of other hosted and open source tools on the 
&lt;a href="/monitoring.html"&gt;monitoring&lt;/a&gt; page.&lt;/p&gt;
&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;&lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt; is strongly recommended for this tutorial
because Python 2 will no longer be supported starting January 1, 2020.
&lt;a href="https://www.python.org/downloads/release/python-364/"&gt;Python 3.6.4&lt;/a&gt; to 
was used to build this tutorial. We will also use the following 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt; to build
our application:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/django.html"&gt;Django&lt;/a&gt; web framework, 
  &lt;a href="https://docs.djangoproject.com/en/2.0/"&gt;version 2.0.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rollbar.com/docs/notifier/pyrollbar/"&gt;rollbar&lt;/a&gt; monitoring 
  instrumentation library,
  &lt;a href="https://github.com/rollbar/pyrollbar/tree/v0.13.18"&gt;version 0.13.18&lt;/a&gt;,
  to report exceptions and errors&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt;, which come installed 
  with Python 3, to install and isolate these Django and Rollbar libraries 
  from your other applications&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://rollbar.com/"&gt;free Rollbar account&lt;/a&gt; where we will send error
  data and view it when it is captured&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need help getting your 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; configured
before running this code, take a look at
&lt;a href="/blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;this guide for setting up Python 3 and Django on Ubuntu 16.04 LTS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All code in this blog post is available open source on GitHub under the 
MIT license within the
&lt;a href="https://github.com/fullstackpython/blog-code-examples"&gt;monitor-python-django-apps directory of the blog-code-examples repository&lt;/a&gt;. 
Use and modify the code however you like for your own applications.&lt;/p&gt;
&lt;h2&gt;Installing Dependencies&lt;/h2&gt;
&lt;p&gt;Start the project by creating a new 
&lt;a href="/virtual-environments-virtualenvs-venvs.html"&gt;virtual environment&lt;/a&gt; 
using the following command. I recommend keeping a separate directory 
such as &lt;code&gt;~/venvs/&lt;/code&gt; so that you always know where all your virtualenvs are 
located.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv monitordjango
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv with the &lt;code&gt;activate&lt;/code&gt; shell script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; monitordjango/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after activating the virtualenv:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180202-monitor-django/activate-virtualenv.png" width="100%" class="shot rnd outl" alt="Activate the virtualenv on the command line."&gt;&lt;/p&gt;
&lt;p&gt;Remember that you need to activate your virtualenv in every new terminal 
window where you want to use the virtualenv to run the project.&lt;/p&gt;
&lt;p&gt;We can now install the &lt;a href="https://pypi.org/project/Django/2.0.4"&gt;Django&lt;/a&gt; 
and &lt;a href="https://pypi.org/project/rollbar"&gt;Rollbar&lt;/a&gt; packages into the 
activated, empty virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install django==2.0.4 rollbar==0.13.18
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Look for output like the following to confirm the 
dependencies installed correctly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Collecting certifi&amp;gt;=2017.4.17 (from requests&amp;gt;=0.12.1-&amp;gt;rollbar==0.13.18)
  Downloading certifi-2018.1.18-py2.py3-none-any.whl (151kB)
    100% |████████████████████████████████| 153kB 767kB/s 
Collecting urllib3&amp;lt;1.23,&amp;gt;=1.21.1 (from requests&amp;gt;=0.12.1-&amp;gt;rollbar==0.13.18)
  Using cached urllib3-1.22-py2.py3-none-any.whl
Collecting chardet&amp;lt;3.1.0,&amp;gt;=3.0.2 (from requests&amp;gt;=0.12.1-&amp;gt;rollbar==0.13.18)
  Using cached chardet-3.0.4-py2.py3-none-any.whl
Collecting idna&amp;lt;2.7,&amp;gt;=2.5 (from requests&amp;gt;=0.12.1-&amp;gt;rollbar==0.13.18)
  Using cached idna-2.6-py2.py3-none-any.whl
Installing collected packages: pytz, django, certifi, urllib3, chardet, idna, requests, six, rollbar
  Running setup.py install for rollbar ... done
Successfully installed certifi-2018.1.18 chardet-3.0.4 django-2.0.4 idna-2.6 pytz-2018.3 requests-2.18.4 rollbar-0.13.18 six-1.11.0 urllib3-1.22
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have our dependencies ready to go so now we can write the code for
our Django project.&lt;/p&gt;
&lt;h2&gt;Our Django Web App&lt;/h2&gt;
&lt;p&gt;&lt;a href="/django.html"&gt;Django&lt;/a&gt; makes it easy to generate the boilerplate code 
for new projects and apps using the &lt;code&gt;django-admin.py&lt;/code&gt; commands. Go to the 
directory where you typically store your coding projects. For example, on 
my Mac I use &lt;code&gt;/Users/matt/devel/py/&lt;/code&gt;. Then run the following command to 
start a Django project named &lt;code&gt;djmonitor&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;django-admin.py startproject djmonitor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command will create a directory named &lt;code&gt;djmonitor&lt;/code&gt; with several
subdirectories that you should be familiar with when you've previously 
worked with Django.&lt;/p&gt;
&lt;p&gt;Change directories into the new project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd djmonitor
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Start a new Django app for our example code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py startapp billions
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Django will create a new folder named &lt;code&gt;billions&lt;/code&gt; for our project.
Let's make sure our Django URLS work properly before before we write 
the code for the app.&lt;/p&gt;
&lt;p&gt;Now open &lt;code&gt;djmonitor/djmonitor/urls.py&lt;/code&gt; and add the highlighted lines so that URLs
with the path &lt;code&gt;/billions/&lt;/code&gt; will be routed to the app we are working on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot; (comments section)&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;billions/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;billions.urls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;admin/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save &lt;code&gt;djmonitor/djmonitor/urls.py&lt;/code&gt; and open &lt;code&gt;djmonitor/djmonitor/settings.py&lt;/code&gt;.
Add the &lt;code&gt;billions&lt;/code&gt; app to &lt;code&gt;settings.py&lt;/code&gt; by inserting the highlighted line,
which will become line number 40 after insertion:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Application definition&lt;/span&gt;

&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
    &lt;span class="s1"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;billions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save and close &lt;code&gt;settings.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reminder&lt;/strong&gt;: make sure you change the default &lt;code&gt;DEBUG&lt;/code&gt; and &lt;code&gt;SECRET_KEY&lt;/code&gt; 
values in &lt;code&gt;settings.py&lt;/code&gt; before you deploy any code to production. Secure 
your app properly with the information from the
&lt;a href="https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/"&gt;Django production deployment checklist&lt;/a&gt; 
so that you do not add your project to the list of hacked applications
on the web.&lt;/p&gt;
&lt;p&gt;Next change into the &lt;code&gt;djmonitor/billions&lt;/code&gt; directory. Create a new file named 
&lt;code&gt;urls.py&lt;/code&gt; that will be specific to the routes for the &lt;code&gt;billions&lt;/code&gt; app within 
the &lt;code&gt;djmonitor&lt;/code&gt; project.&lt;/p&gt;
&lt;p&gt;Add the following lines to the currently-blank &lt;code&gt;djmonitor/billions/urls.py&lt;/code&gt; 
file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf.urls&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;                                                                                                                              
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(?P&amp;lt;slug&amp;gt;[\wa-z-]+)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;views&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;they&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;they&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save &lt;code&gt;djmonitor/billions/urls.py&lt;/code&gt;. One more file before we can test that
our simple Django app works. Open &lt;code&gt;djmonitor/billions/views.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PermissionDenied&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;they&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;are&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;billions.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;PermissionDenied&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hmm, can&amp;#39;t find what you&amp;#39;re looking for.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a directory for your template files named &lt;code&gt;templates&lt;/code&gt; under
the &lt;code&gt;djmonitor/billions&lt;/code&gt; app directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir templates
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Within &lt;code&gt;templates&lt;/code&gt; create a new file named &lt;code&gt;billions.html&lt;/code&gt; that contains
the following &lt;a href="/django-templates.html"&gt;Django template&lt;/a&gt; markup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;They... are BILLIONS!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://store.steampowered.com/app/644930/They_Are_Billions/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;They Are Billions&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://media.giphy.com/media/2jUHXTGhGo156/giphy.gif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alright, all of our files are in place so we can test the application.
Within the base directory of your project run the Django development
server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Django development server will start up with no issues other than an 
unapplied migrations warning.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(monitordjango) $ python manage.py runserver
Performing system checks...

System check identified no issues (0 silenced).

You have 14 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.
Run &amp;#39;python manage.py migrate&amp;#39; to apply them.

April 08, 2018 - 19:06:44
Django version 2.0.4, using settings &amp;#39;djmonitor.settings&amp;#39;
Starting development server at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Only the &lt;code&gt;/billions/&lt;/code&gt; route will successfully hit our &lt;code&gt;billions&lt;/code&gt; app. Try
to access "http://localhost:8000/billions/are/". We should see our template
render with the gif:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180202-monitor-django/localhost-dev-server.jpg" width="100%" class="shot rnd outl" alt="Testing local development server at /billions/are/."&gt;&lt;/p&gt;
&lt;p&gt;Cool, our application successfully rendered a super-simple HTML page 
with a GIF of one of my favorite computer games. What if we try another
path under &lt;code&gt;/billions/&lt;/code&gt; such as "http://localhost:8000/billions/arenot/"?&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180202-monitor-django/arenot-403-forbidden.png" width="100%" class="shot rnd outl" alt="403 Forbidden error with any path under /billions/ other than /billions/are/."&gt;&lt;/p&gt;
&lt;p&gt;Our 403 Forbidden is raised, which is what we expected based on our code.
That is a somewhat contrived block of code but let's see how we can
catch and report this type of error without changing our &lt;code&gt;views.py&lt;/code&gt;
code at all. This approach will be much easier on us when modifying an
existing application than having to refactor the code to report on
these types of errors, if we even know where they exist.&lt;/p&gt;
&lt;h2&gt;Monitoring with Rollbar&lt;/h2&gt;
&lt;p&gt;Go to the &lt;a href="https://rollbar.com/"&gt;Rollbar homepage in your browser&lt;/a&gt; 
to add their tool to our Django app.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180202-monitor-django/rollbar-home.jpg" width="100%" class="shot rnd outl" alt="rollbar.com in Chrome."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Sign Up" button in the upper right-hand corner. Enter your 
email address, a username and the password you want on the sign up page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180202-monitor-django/sign-up-rollbar.jpg" width="100%" class="shot rnd outl" alt="Sign up for Rollbar."&gt;&lt;/p&gt;
&lt;p&gt;After the sign up page you will see the onboarding flow where you can
enter a project name and select a programming language. For the project
name type in "Full Stack Python" (or whatever project name you are
working on) then select that you are monitoring a Python-based application.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180202-monitor-django/create-project.jpg" width="100%" class="shot rnd outl" alt="Create a project named 'Full Stack Python' and select Python for programming language."&gt;&lt;/p&gt;
&lt;p&gt;Press the "Continue" button at the bottom to move along. The next
screen shows us a few instructions on how to add monitoring.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180202-monitor-django/configure-project.jpg" width="100%" class="shot rnd outl" alt="Configure project using your server-side access token."&gt;&lt;/p&gt;
&lt;p&gt;Let's change our Django project code to let Rollbar collect and aggregate the
errors that pop up in our application. &lt;/p&gt;
&lt;p&gt;Re-open &lt;code&gt;djmonitor/djmonitor/settings.py&lt;/code&gt; and look for the &lt;code&gt;MIDDLEWARE&lt;/code&gt;
list. Add &lt;code&gt;rollbar.contrib.django.middleware.RollbarNotifierMiddleware&lt;/code&gt;
as the last item:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MIDDLEWARE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; 
    &lt;span class="s1"&gt;&amp;#39;django.middleware.security.SecurityMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.sessions.middleware.SessionMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.common.CommonMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.csrf.CsrfViewMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth.middleware.AuthenticationMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.messages.middleware.MessageMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.middleware.clickjacking.XFrameOptionsMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="s1"&gt;&amp;#39;rollbar.contrib.django.middleware.RollbarNotifierMiddleware&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Do not close &lt;code&gt;settings.py&lt;/code&gt; just yet. Next add the following lines 
to the bottom of the file. Change the &lt;code&gt;access_token&lt;/code&gt; value to your
Rollbar server side access token and &lt;code&gt;root&lt;/code&gt; to the directory where
you are developing your project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ROLLBAR = {
    &amp;#39;access_token&amp;#39;: &amp;#39;access token from dashboard&amp;#39;,
    &amp;#39;environment&amp;#39;: &amp;#39;development&amp;#39; if DEBUG else &amp;#39;production&amp;#39;,
    &amp;#39;branch&amp;#39;: &amp;#39;master&amp;#39;,
    &amp;#39;root&amp;#39;: &amp;#39;/Users/matt/devel/py/blog-code-examples/monitor-django-apps/djmonitor&amp;#39;,
    &amp;#39;patch_debugview&amp;#39;: False,
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are uncertain about what your secret token is, it can be found on 
the Rollbar onboarding screen or "Settings" -&amp;gt; "Access Tokens" within 
&lt;a href="https://rollbar.com"&gt;rollbar.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note that I typically store all my environment variables in a &lt;code&gt;.env&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;We can test that Rollbar is working as we run our application. Run it
now using the development server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Back in your web browser press the "Done! Go to Dashboard" button.&lt;/p&gt;
&lt;p&gt;If an event hasn't been reported yet we'll see a waiting screen like this
one:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180202-monitor-django/waiting-for-events.jpg" width="100%" class="shot rnd outl" alt="Waiting for events data on the dashboard."&gt;&lt;/p&gt;
&lt;p&gt;Make sure your Django development still server is running and try to go to 
"http://localhost:8000/billions/arenot/". A 403 error is immediately reported
on the dashboard:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180202-monitor-django/forbidden-exception.jpg" width="100%" class="shot rnd outl" alt="403 Forbidden exceptions on the Rollbar dashboard screen."&gt;&lt;/p&gt;
&lt;p&gt;We even get an email with the error (which can also be turned off if you
don't want emails for every error):&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/180202-monitor-django/email-report.jpg" width="100%" class="shot rnd outl" alt="Email report on the errors in your Django application."&gt;&lt;/p&gt;
&lt;p&gt;Alright we now have monitoring and error reporting all configured for our
Django application!&lt;/p&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;We learned to catch issues in our Django project using Rollbar and view the
errors in Rollbar's interface. Next try out Rollbar's more advanced monitoring
features such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rollbar.com/docs/person-tracking/"&gt;sorting errors by user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rollbar.com/docs/custom-grouping/"&gt;configuring rules on group errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rollbar.com/docs/deploy-tracking/"&gt;debugging deployment issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is plenty more to learn about in the areas of 
&lt;a href="/web-development.html"&gt;web development&lt;/a&gt; and 
&lt;a href="/deployments.html"&gt;deployments&lt;/a&gt; so keep learning by reading 
about &lt;a href="/web-frameworks.html"&gt;web frameworks&lt;/a&gt;. You can also learn more 
about integrating Rollbar with Python applications via 
&lt;a href="https://rollbar.com/docs/notifier/pyrollbar/"&gt;their Python documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Questions? Let me know via 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;a GitHub issue ticket on the Full Stack Python repository&lt;/a&gt;, 
on Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Do you see a typo, syntax issue or wording that's confusing in this blog 
post? Fork
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/180202-monitor-django-web-apps.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request with a fix or 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;file an issue ticket on GitHub&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>全栈 Python 五周年</title><link href="https://www.fullstackpython.com/blog/five-years-full-stack-python.html" rel="alternate"></link><published>2017-12-23T00:00:00-05:00</published><updated>2017-12-23T00:00:00-05:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-12-23:blog/five-years-full-stack-python.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;&lt;/strong&gt; began five years 
ago today, on December 23, 2012, with 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/commit/69f5f466196f572aab187504d52bc368cde840cd"&gt;Git commit 69f5f46&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;I originally built the site to help out a group of junior developers that 
kept asking me similar Python web development questions via email. It seemed 
like the answers would be useful to more people if I put them in a
publicly-accessible location. One day over lunch with a friend before I 
started writing I sketched out some of my vague ideas on a napkin: &lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.fullstackpython.com/img/visuals/fsp-napkin.jpg" width="100%" class="rnd" alt="Original Full Stack Python concept drawing."&gt;&lt;/p&gt;
&lt;p&gt;The site started as a single page 
&lt;a href="https://www.fullstackpython.com/static-site-generator.html"&gt;static website&lt;/a&gt; 
but eventually was split into topic-specific pages such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/deployments.html"&gt;deployments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/servers.html"&gt;servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/web-frameworks.html"&gt;web frameworks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/wsgi-servers.html"&gt;WSGI servers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/source-control.html"&gt;source control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/operating-systems.html"&gt;operating systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.fullstackpython.com/web-servers.html"&gt;web servers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most pages were on deployment and web framework topics. I have made a 
concerted effort to write more about 
&lt;a href="https://www.fullstackpython.com/data.html"&gt;data&lt;/a&gt; and 
&lt;a href="https://www.fullstackpython.com/development-environments.html"&gt;development environment&lt;/a&gt; 
subjects as I continue to learn and grow my own software development skills. 
In some ways Full Stack Python's evolution represents my own growth as a 
programmer.&lt;/p&gt;
&lt;p&gt;The site now has over 120,000 words and 150+ pages, split between topics
pages and &lt;a href="https://www.fullstackpython.com/blog.html"&gt;tutorial blog posts&lt;/a&gt;. 
I've also given a few technical talks on many of these topics, such as 
&lt;a href="https://www.youtube.com/watch?v=s6NaOKD40rY"&gt;Full Stack Python&lt;/a&gt; at 
EuroPython 2014 and 
&lt;a href="https://www.youtube.com/watch?v=L5YQbNrFfyw"&gt;WebSockets in Python&lt;/a&gt; at
the San Francisco Python meetup. With so much content on the site, it's time
to revamp many of the original pages to ensure they are still accurate and
contain solid resources that explain those subjects. It can be sad to see so
many awesome blog posts I used to reference that have succumbed to link rot.
Maintenance takes up an increasing amount of time spent working on the site
so please submit 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;issue tickets&lt;/a&gt; 
whenever you see a 404 or a link that's not the original correct resource.&lt;/p&gt;
&lt;p&gt;Full Stack Python has now been read by over 2.5 million developers, but
it took a long time to get to that milestone. In fact there were only a few
hundred readers within the first year. Over time with daily updates I have
been fortunate to grow the readership to around 125,000 developers per month.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.fullstackpython.com/img/visuals/traffic.png" width="100%" class="rnd" alt="Full Stack Python traffic growth via Google Analytics."&gt;&lt;/p&gt;
&lt;p&gt;Watching the numbers go up has been fun but the best part is receiving 
"thank you" emails and tweets, as well as talking to readers in person at 
PyCon. Keep those emails coming as they keep me motivated to continue writing! 
If you'll be at PyCon in April, I'll definitely be there at the 
&lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt; booth or around the community
booths where &lt;a href="https://talkpython.fm/"&gt;Michael Kennedy of Talk Python to Me&lt;/a&gt; 
and other Python community folks such as &lt;a href="https://dbader.org/"&gt;Dan Bader&lt;/a&gt;, 
&lt;a href="https://www.pyimagesearch.com/"&gt;Adrian Rosebrock of PyImageSearch&lt;/a&gt;,
&lt;a href="https://pybit.es/"&gt;Bob Belderbos of PyBites&lt;/a&gt; and the 
&lt;a href="https://realpython.com"&gt;Real Python&lt;/a&gt; guys will also be hanging out.&lt;/p&gt;
&lt;p&gt;It's been a real pleasure working on Full Stack Python over the past five
years and I'm really excited for what's coming for the site in the next 
five years. The 
&lt;a href="https://www.fullstackpython.com/change-log.html"&gt;change log page&lt;/a&gt; contains
a complete list of major modifications and 
&lt;a href="https://www.fullstackpython.com/future-directions.html"&gt;future directions&lt;/a&gt;
has some insight into my thought process for creating additional content.&lt;/p&gt;
&lt;p&gt;Got questions or comments about 
&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;? Send me an email or 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;submit an issue ticket on GitHub&lt;/a&gt; 
to let me know how to improve the site
as I continue to 
&lt;a href="https://www.fullstackpython.com/table-of-contents.html"&gt;fill in the table of contents&lt;/a&gt; 
with &lt;a href="https://www.fullstackpython.com/change-log.html"&gt;new pages&lt;/a&gt;
and 
&lt;a href="https://www.fullstackpython.com/blog.html"&gt;new tutorials&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>GitPython 和新的 Git 教程</title><link href="https://www.fullstackpython.com/blog/gitpython-git-tutorials.html" rel="alternate"></link><published>2017-12-11T00:00:00-05:00</published><updated>2017-12-11T00:00:00-05:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-12-11:blog/gitpython-git-tutorials.html</id><summary type="html">&lt;p&gt;&lt;a href="/blog/first-steps-gitpython.html"&gt;&lt;strong&gt;First Steps with GitPython&lt;/strong&gt;&lt;/a&gt;
is a quick tutorial that shows how to get started using the awesome
&lt;a href="https://gitpython.readthedocs.io/en/stable/"&gt;GitPython&lt;/a&gt; library for
programmatically interacting with Git repositories in your Python 
applications. In the spirit of the 
&lt;a href="https://github.com/jhund/filterrific/issues/147#issuecomment-341867147"&gt;thank you maintainers&lt;/a&gt; 
issue ticket I wrote about last newsletter, I opened a quick
&lt;a href="https://github.com/gitpython-developers/GitPython/issues/709"&gt;"non-issue" ticket for the GitPython developers&lt;/a&gt;
to thank them. Give them a thank you +1 if you've used the project and also 
found it useful.&lt;/p&gt;
&lt;p&gt;The &lt;a href="/git.html"&gt;&lt;strong&gt;Git&lt;/strong&gt;&lt;/a&gt; page on Full Stack
Python has also just been updated with new resources. A few of my favorite
new tutorials list on the &lt;a href="/git.html"&gt;Git page&lt;/a&gt; 
are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/k88hudson/git-flight-rules"&gt;Flight rules for Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://philna.sh/blog/2017/01/04/git-back-to-the-future/"&gt;Git back to the future&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jqassistant.org/shadows-of-the-past-analysis-of-git-repositories/"&gt;Shadows Of The Past: Analysis Of Git Repositories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://blog.thoughtram.io/git/2014/11/18/the-anatomy-of-a-git-commit.html"&gt;The anatomy of a Git commit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also split out the Git page resources into beginner, more advanced, specific
use case and workflow sections so it's easier to parse based on whether you're
a Git veteran or still up-and-coming in that area of your development skills.&lt;/p&gt;
&lt;p&gt;Got questions or comments about 
&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;? Send me an email or 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;submit an issue ticket on GitHub&lt;/a&gt; 
to let me know how to improve the site
as I continue to 
&lt;a href="/table-of-contents.html"&gt;fill in the table of contents&lt;/a&gt; 
with &lt;a href="/change-log.html"&gt;new pages&lt;/a&gt;
and 
&lt;a href="/blog.html"&gt;new tutorials&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>使用 GitPython 的第一步</title><link href="https://www.fullstackpython.com/blog/first-steps-gitpython.html" rel="alternate"></link><published>2017-11-30T00:00:00-05:00</published><updated>2017-11-30T00:00:00-05:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-11-29:blog/first-steps-gitpython.html</id><summary type="html">&lt;p&gt;&lt;a href="http://gitpython.readthedocs.io/"&gt;GitPython&lt;/a&gt; is a Python code library
for programmatically reading from and writing to &lt;a href="/git.html"&gt;Git&lt;/a&gt;
&lt;a href="/source-control.html"&gt;source control&lt;/a&gt; repositories.&lt;/p&gt;
&lt;p&gt;Let's learn how to use GitPython by quickly installing it and reading from
a local cloned Git repository.&lt;/p&gt;
&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;This tutorial should work with either &lt;a href="/python-2-or-3.html"&gt;Python 2.7 or 3&lt;/a&gt;, 
but Python 3, especially 3.6+, is strongly recommended for all new 
applications. I used
&lt;a href="https://www.python.org/downloads/release/python-363/"&gt;Python 3.6.3&lt;/a&gt; to 
write this post. In addition to Python, throughout this tutorial we 
will also use the following 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/git.html"&gt;Git&lt;/a&gt;, 
  a &lt;a href="/static-site-generator.html"&gt;source (version) control&lt;/a&gt; implementation, 
  &lt;a href="https://github.com/git/git/tree/v2.15.1"&gt;version 2.15.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gitpython-developers/GitPython/tree/2.1.7"&gt;GitPython&lt;/a&gt;
  version &lt;a href="https://github.com/gitpython-developers/GitPython/tree/2.1.7"&gt;2.1.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt;, which come
  packaged with Python 3, to install and isolate the GitPython library
  from any of your other Python projects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Take a look at
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;this guide for setting up Python 3 and Flask on Ubuntu 16.04 LTS&lt;/a&gt;
if you need specific instructions to get a base
&lt;a href="/development-environments.html"&gt;Python development environment&lt;/a&gt; set up.&lt;/p&gt;
&lt;p&gt;All code in this blog post is available open source under the MIT license 
on GitHub under the 
&lt;a href="https://github.com/fullstackpython/blog-code-examples/tree/master/first-steps-gitpython"&gt;first-steps-gitpython directory of the blog-code-examples repository&lt;/a&gt;.
Use and abuse the source code as you like for your own applications.&lt;/p&gt;
&lt;h2&gt;Install GitPython&lt;/h2&gt;
&lt;p&gt;Start by creating a new virtual environment for your project. My virtualenv
is named &lt;code&gt;testgit&lt;/code&gt; but you can name yours whatever matches the project 
you are creating.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv gitpy
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the newly-created virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source gitpy/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The virtualenv's name will be prepended to the command prompt after 
activation.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171129-gitpython/activate-virtualenv.png" width="100%" class="shot rnd outl" alt="Create and activate the Python virtual environment."&gt;&lt;/p&gt;
&lt;p&gt;Now that the virutalenv is activated we can use the &lt;code&gt;pip&lt;/code&gt; command to install
GitPython.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install &lt;span class="nv"&gt;gitpython&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.7
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run the &lt;code&gt;pip&lt;/code&gt; command and after everything is installed you should see output
similar to the following "Successfully installed" message.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gitpy&lt;span class="o"&gt;)&lt;/span&gt; $ pip install &lt;span class="nv"&gt;gitpython&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.7
Collecting &lt;span class="nv"&gt;gitpython&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.7
  Downloading GitPython-2.1.7-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;446kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 450kB 651kB/s 
Collecting gitdb2&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.0 &lt;span class="o"&gt;(&lt;/span&gt;from &lt;span class="nv"&gt;gitpython&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.7&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading gitdb2-2.0.3-py2.py3-none-any.whl &lt;span class="o"&gt;(&lt;/span&gt;63kB&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="m"&gt;100&lt;/span&gt;% &lt;span class="p"&gt;|&lt;/span&gt;████████████████████████████████&lt;span class="p"&gt;|&lt;/span&gt; 71kB 947kB/s 
Collecting smmap2&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.0 &lt;span class="o"&gt;(&lt;/span&gt;from gitdb2&amp;gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.0.0-&amp;gt;gitpython&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.1.7&lt;span class="o"&gt;)&lt;/span&gt;
  Downloading smmap2-2.0.3-py2.py3-none-any.whl
Installing collected packages: smmap2, gitdb2, gitpython
Successfully installed gitdb2-2.0.3 gitpython-2.1.7 smmap2-2.0.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we can start programmatically interacting with Git repositories in our
Python applications with the GitPython installed.&lt;/p&gt;
&lt;h2&gt;Clone Repository&lt;/h2&gt;
&lt;p&gt;GitPython can work with remote repositories but for simplicity in this 
tutorial we'll use a cloned repository on our local system.&lt;/p&gt;
&lt;p&gt;Clone a repository you want to work with to your local system. If you don't
have a specific one in mind use the 
&lt;a href="https://github.com/mattmakai/fullstackpython.com"&gt;open source Full Stack Python Git repository&lt;/a&gt;
that is hosted on GitHub.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git clone git@github.com:mattmakai/fullstackpython.com fsp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Take note of the location where you cloned the repository because we need
the path to tell GitPython what repository to handle. Change into the 
directory for the new Git repository with &lt;code&gt;cd&lt;/code&gt; then run the &lt;code&gt;pwd&lt;/code&gt; (present
working directory) command to get the full path.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; fsp
&lt;span class="nb"&gt;pwd&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will see some output like &lt;code&gt;/Users/matt/devel/py/fsp&lt;/code&gt;. This path is your
absolute path to the base of the Git repository.&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;export&lt;/code&gt; command to set an environment variable for the absolute path
to the Git repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;GIT_REPO_PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/Users/matt/devel/py/fsp&amp;#39;&lt;/span&gt; &lt;span class="c1"&gt;# make sure this your own path&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our Git repository and path environment variable are all set so let's write
the Python code that uses GitPython.&lt;/p&gt;
&lt;h2&gt;Read Repository and Commit Data&lt;/h2&gt;
&lt;p&gt;Create a new Python file named &lt;code&gt;read_repo.py&lt;/code&gt; and open it so we can start
to code up a simple script.&lt;/p&gt;
&lt;p&gt;Start with a couple of imports and a constant:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;git&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Repo&lt;/span&gt;


&lt;span class="n"&gt;COMMITS_TO_PRINT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;os&lt;/code&gt; module makes it easy to read environment variables, such as our
&lt;code&gt;GIT_REPO_PATH&lt;/code&gt; variable we set earlier. &lt;code&gt;from git import Repo&lt;/code&gt; gives our
application access to the GitPython library when we create the &lt;code&gt;Repo&lt;/code&gt; object.
&lt;code&gt;COMMITS_TO_PRINT&lt;/code&gt; is a constant that limits the number of lines of output
based on the amount of commits we want our script to print information on.
Full Stack Python has over 2,250 commits so there'd be a whole lot of output
if we printed every commit.&lt;/p&gt;
&lt;p&gt;Next within our &lt;code&gt;read_repo.py&lt;/code&gt; file create a function to print individual
commit information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;----&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexsha&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt;{}&lt;/span&gt;&lt;span class="se"&gt;\&amp;quot;&lt;/span&gt;&lt;span class="s2"&gt; by {} ({})&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authored_datetime&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;count: {} and size: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                                              &lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;print_commit&lt;/code&gt; function takes in a GitPython commit object and
prints the 40-character SHA-1 hash for the commit followed by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;the commit summary&lt;/li&gt;
&lt;li&gt;author name &lt;/li&gt;
&lt;li&gt;author email&lt;/li&gt;
&lt;li&gt;commit date and time&lt;/li&gt;
&lt;li&gt;count and update size&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below the &lt;code&gt;print_commit&lt;/code&gt; function, create another function named 
&lt;code&gt;print_repository&lt;/code&gt; to print details of the &lt;code&gt;Repo&lt;/code&gt; object:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_repository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Repo description: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Repo active branch is {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;active_branch&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remotes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Remote named &amp;quot;{}&amp;quot; with URL &amp;quot;{}&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Last commit for repo is {}.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hexsha&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;print_repository&lt;/code&gt; is similar to &lt;code&gt;print_commit&lt;/code&gt; but instead prints the
repository description, active branch, all remote Git URLs configured
for this repository and the latest commit.&lt;/p&gt;
&lt;p&gt;Finally, we need a "main" function for when we invoke the script from the
terminal using the &lt;code&gt;python&lt;/code&gt; command. Round out our &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;repo_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getenv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;GIT_REPO_PATH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Repo object used to programmatically interact with Git repositories&lt;/span&gt;
    &lt;span class="n"&gt;repo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Repo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# check that the repository loaded correctly&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bare&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Repo at {} successfully loaded.&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;print_repository&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# create list of commits then print some of them to stdout&lt;/span&gt;
        &lt;span class="n"&gt;commits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter_commits&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;master&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))[:&lt;/span&gt;&lt;span class="n"&gt;COMMITS_TO_PRINT&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;commits&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;print_commit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;pass&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Could not load repository at {} :(&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repo_path&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The main function handles grabbing the &lt;code&gt;GIT_REPO_PATH&lt;/code&gt; environment variable
and creates a Repo object based on the path if possible.&lt;/p&gt;
&lt;p&gt;If the repository is not empty, which indicates a failure to find the 
repository, then the &lt;code&gt;print_repository&lt;/code&gt; and &lt;code&gt;print_commit&lt;/code&gt; functions are 
called to show the repository data.&lt;/p&gt;
&lt;p&gt;If you want to copy and paste all of the code found above at once, take a
look at the 
&lt;a href="https://github.com/fullstackpython/blog-code-examples/blob/master/first-steps-gitpython/read_repo.py"&gt;&lt;code&gt;read_repo.py&lt;/code&gt; file on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Time to test our GitPython-using script. Invoke the &lt;code&gt;read_repo.py&lt;/code&gt; file using
the following command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;gitpy&lt;span class="o"&gt;)&lt;/span&gt; $ python read_repo.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the virtualenv is activated and the &lt;code&gt;GIT_REPO_PATH&lt;/code&gt; environment variable
is set properly, we should see output similar to the following.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Repo at ~/devel/py/fsp/ successfully loaded.
Repo description: Unnamed repository&lt;span class="p"&gt;;&lt;/span&gt; edit this file &lt;span class="s1"&gt;&amp;#39;description&amp;#39;&lt;/span&gt; to name the repository.
Repo active branch is master
Remote named &lt;span class="s2"&gt;&amp;quot;origin&amp;quot;&lt;/span&gt; with URL &lt;span class="s2"&gt;&amp;quot;git@github.com:mattmakai/fullstackpython.com&amp;quot;&lt;/span&gt;
Last commit &lt;span class="k"&gt;for&lt;/span&gt; repo is 1fa2de70aeb2ea64315f69991ccada51afac1ced.
----
1fa2de70aeb2ea64315f69991ccada51afac1ced
&lt;span class="s2"&gt;&amp;quot;update latest blog post with code&amp;quot;&lt;/span&gt; by Matt Makai &lt;span class="o"&gt;(&lt;/span&gt;matthew.makai@gmail.com&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-11-30 &lt;span class="m"&gt;17&lt;/span&gt;:15:14-05:00
count: &lt;span class="m"&gt;2256&lt;/span&gt; and size: &lt;span class="m"&gt;254&lt;/span&gt;
----
1b026e4268d3ee1bd55f1979e9c397ca99bb5864
&lt;span class="s2"&gt;&amp;quot;new blog post, just needs completed code section&amp;quot;&lt;/span&gt; by Matt Makai &lt;span class="o"&gt;(&lt;/span&gt;matthew.makai@gmail.com&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-11-30 &lt;span class="m"&gt;09&lt;/span&gt;:00:06-05:00
count: &lt;span class="m"&gt;2255&lt;/span&gt; and size: &lt;span class="m"&gt;269&lt;/span&gt;
----
2136d845de6f332505c3df38efcfd4c7d84a45e2
&lt;span class="s2"&gt;&amp;quot;change previous email newsletters list style&amp;quot;&lt;/span&gt; by Matt Makai &lt;span class="o"&gt;(&lt;/span&gt;matthew.makai@gmail.com&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-11-20 &lt;span class="m"&gt;11&lt;/span&gt;:44:13-05:00
count: &lt;span class="m"&gt;2254&lt;/span&gt; and size: &lt;span class="m"&gt;265&lt;/span&gt;
----
9df077a50027d9314edba7e4cbff6bb05c433257
&lt;span class="s2"&gt;&amp;quot;ensure picture sizes are reasonable&amp;quot;&lt;/span&gt; by Matt Makai &lt;span class="o"&gt;(&lt;/span&gt;matthew.makai@gmail.com&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-11-14 &lt;span class="m"&gt;13&lt;/span&gt;:29:39-05:00
count: &lt;span class="m"&gt;2253&lt;/span&gt; and size: &lt;span class="m"&gt;256&lt;/span&gt;
----
3f6458c80b15f58a6e6c85a46d06ade72242c572
&lt;span class="s2"&gt;&amp;quot;add databases logos to relational databases pagem&amp;quot;&lt;/span&gt; by Matt Makai &lt;span class="o"&gt;(&lt;/span&gt;matthew.makai@gmail.com&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="m"&gt;2017&lt;/span&gt;-11-14 &lt;span class="m"&gt;13&lt;/span&gt;:28:02-05:00
count: &lt;span class="m"&gt;2252&lt;/span&gt; and size: &lt;span class="m"&gt;270&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The specific commits you see will vary based on the last 5 commits I've
pushed to the GitHub repository, but if you see something like the output
above that is a good sign everything worked as expected.&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;We just cloned a &lt;a href="/git.html"&gt;Git&lt;/a&gt; repository and used the GitPython 
library to read a slew of data about the repository and all of its commits.&lt;/p&gt;
&lt;p&gt;GitPython can do more than just read data though - it can also create and 
write to Git repositories! Take a look at the 
&lt;a href="http://gitpython.readthedocs.io/en/stable/tutorial.html#modifying-references"&gt;modifying references&lt;/a&gt;
documentation page in the official GitPython tutorial or check back here in
the future when I get a chance to write up a more advanced GitPython 
walkthrough.&lt;/p&gt;
&lt;p&gt;Questions? Let me know via 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;a GitHub issue ticket on the Full Stack Python repository&lt;/a&gt;, 
on Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;See something wrong in this blog post? Fork
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/171129-first-steps-gitpython.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>DevOps，感谢维护人员为开源做贡献</title><link href="https://www.fullstackpython.com/blog/devops-python-maintaining-contributing-open-source.html" rel="alternate"></link><published>2017-11-13T00:00:00-05:00</published><updated>2017-11-13T00:00:00-05:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-11-13:blog/devops-python-maintaining-contributing-open-source.html</id><summary type="html">&lt;p&gt;&lt;a href="/blog/devops-continuous-delivery-you.html"&gt;&lt;strong&gt;DevOps, Continuous Delivery... and You&lt;/strong&gt;&lt;/a&gt;
is a blog post with the slides and notes based on a class I taught at
the &lt;a href="http://www.virginia.edu/"&gt;University of Virginia&lt;/a&gt; this past week. The
talk is relevant as a brief introduction to 
&lt;a href="/devops.html"&gt;DevOps&lt;/a&gt; and Continuous Delivery, 
especially for junior developers and less-technical managers of software 
teams. I'm experimenting with the "talk as blog post" style so let me know 
via email or a tweet if you enjoy it and would want to see future technical 
talks in that format.&lt;/p&gt;
&lt;p&gt;Speaking of feedback on projects, 
&lt;a href="https://github.com/jhund/filterrific/issues/147#issuecomment-341867147"&gt;this GitHub issue thread named "&lt;strong&gt;thank you&lt;/strong&gt;"&lt;/a&gt;
is incredible to read. The issue ticket blew up on the front page of Hacker
News as an example of how powerful genuine positive comments can be for 
project maintainers.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://talkpython.fm/episodes/show/132/contributing-to-open-source"&gt;&lt;strong&gt;Contributing to open source&lt;/strong&gt;&lt;/a&gt; 
is a recent &lt;a href="https://talkpython.fm/"&gt;Talk Python to Me&lt;/a&gt; podcast episode in 
the same vein as thanking your maintainer. Working on open source projects
with your own contributions to documentation or simple bug fixes can be a
great way to become a better programmer. I particularly enjoyed the 
recommendations of the panel to cut your teeth on smaller open source projects
rather than trying to jump into a massive codebase like 
&lt;a href="https://github.com/django/django"&gt;Django&lt;/a&gt; or the 
&lt;a href="https://github.com/python/cpython"&gt;CPython&lt;/a&gt; implementation. Take a listen
to that podcast episode if you are new to open source or have been wondering
how to get involved.&lt;/p&gt;
&lt;p&gt;As always, send me an email or &lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;submit an issue ticket on GitHub&lt;/a&gt; 
to let me know how to improve 
&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt; 
as I continue to 
&lt;a href="/table-of-contents.html"&gt;fill in the table of contents&lt;/a&gt; 
with &lt;a href="/change-log.html"&gt;new pages&lt;/a&gt;
and 
&lt;a href="/blog.html"&gt;new tutorials&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>DevOps, 持续交付... 和你</title><link href="https://www.fullstackpython.com/blog/devops-continuous-delivery-you.html" rel="alternate"></link><published>2017-11-05T00:00:00-04:00</published><updated>2017-11-05T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-11-01:blog/devops-continuous-delivery-you.html</id><summary type="html">&lt;p&gt;This blog post contains the slides along with a loose transcript and 
additional resources from my technical talk on DevOps and Continuous
Delivery concepts given at my alma mater, the University of Virginia,
to the &lt;a href="https://www.commerce.virginia.edu/ms-mit"&gt;M.S. in Management of Information Technology program&lt;/a&gt; on November 2nd and 4th of 2017.&lt;/p&gt;
&lt;p&gt;Links to learn more about the concepts presented in this talk can
be found in the sidebar and at the bottom of this page.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.001.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Title slide for technical talk."&gt;
Hey folks, my name is &lt;a href="/about-author.html"&gt;Matt Makai&lt;/a&gt;. I am a 
&lt;a href="https://www.twilio.com/blog/2014/02/introducing-developer-evangelist-matt-makai.html"&gt;software developer at Twilio&lt;/a&gt;
and the creator of &lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;,
which over 125,000 developers read each month to learn how to 
&lt;a href="/web-development.html"&gt;build&lt;/a&gt;, &lt;a href="/deployment.html"&gt;deploy&lt;/a&gt; and 
&lt;a href="/devops.html"&gt;operate&lt;/a&gt; &lt;a href="/why-use-python.html"&gt;Python-based applications&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.004.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="What's the point of Agile?"&gt;
You've talked about using the Agile software development methodology
on your teams, but what's the purpose? Why does Agile development matter 
to you and your organization?&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.005.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Cargo ship with containers."&gt;
Agile matters because it allows you to ship more code, faster than 
traditional "waterfall" methodology approaches. &lt;/p&gt;
&lt;p&gt;Shipping is a common allegory in software development nowadays, because 
code that is not in production, in the hands of your users, doesn't create
value for anyone.&lt;/p&gt;
&lt;p&gt;If code is not running in production, it's not creating value. New
code created by your Agile development teams every couple of weeks does
not create more value until it is executing in production.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.006.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Docker logo."&gt;
Shipping code is so important to high functioning companies that the
maritime theme is used across all sorts of projects, including in the Docker
logo.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.007.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Kubernetes logo."&gt;
As well as in the Kubernetes logo in the form of a ship steering wheel.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.008.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Agile sprints need to ship code into production to create anything of value."&gt;
Here is a super high-level diagram of the ideal scenario we need for
Agile development teams. Create working code and get it shipped as soon
as possible into production.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.009.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Move fast and break things."&gt;
Facebook's internal motto used to be "Move fast and break things." They 
thought that if you aren't breaking things then you aren't moving fast 
enough. &lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.010.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="If you do not have the right processes and tools in place eventually production will break."&gt;
And eventually if you're constantly shipping to production and you do not
have the appropriate processes and tools in place, your applications
will break. The breakage has nothing to do with the Agile methodology
itself.&lt;/p&gt;
&lt;p&gt;Your team and organization will come to a fork in the road when you
end up with a broken environment.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.011.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Fight the urge to put manual processes in place that slow you down. You must automate."&gt;
Traditionally, organizations have tried to prevent breakage by putting
more manual tools and processes in place. Manual labor slows... down...
your... ability... to... execute.&lt;/p&gt;
&lt;p&gt;This is one path provided by the fork in the road. Put your "Enterprise
Change Review Boards" in place. Require production sign-offs by some 
Executive Vice President who has never written a line of code in his life.
Put several dozen "technical architects" in a room together to argue over
who gets to deploy their changes to production that month.&lt;/p&gt;
&lt;p&gt;The manual path is insanity. Eventually the best developers in your
organization will get frustrated and leave. Executives will ask why
nothing ever gets done. Why does it take our organization three years
to ship a small change to a critical application?&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.012.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Some teams try to get around the production problem by shipping to dev, but they still are not creating value."&gt;
Some development teams try to get around the manual production challenges
by shipping everything to a development environment. The dev environment is
under their control.&lt;/p&gt;
&lt;p&gt;But what's the huge glaring problem in this situation?&lt;/p&gt;
&lt;p&gt;If you are not shipping to production, then you are not creating any value
for your users. The teams have made a rational decision to ship to development
but the organization still suffers due to the manual controls.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.013.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="This session is about DevOps and Continuous Delivery."&gt;
The problems we are talking about are created by the Agile methodology
because they become acute when your development team is producing code at
high velocity. Once code is created faster, you need a way to reliably,
consistently put the code into production so that it can create value for
its users.&lt;/p&gt;
&lt;p&gt;DevOps and Continuous Delivery are the broad terms that encompass how to
reliably ship code to production and operate it when the code is running in 
production.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.014.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="What DevOps is NOT."&gt;
We are going to use the terms "DevOps" and "Continuous Delivery" a lot today,
so let's start by defining what they mean. In fact, the term "DevOps" has 
already accumulated a lot of buzzword baggage, so we'll start by defining
what DevOps is &lt;em&gt;not&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;First,DevOps is not a new role. If you go hire a bunch of people and call them
"DevOps engineers" then sit them in the middle of your developers and system
admin/ops folks, you are going to have a bad time. You just added a new layer
between the two groups you need to pull closer together.&lt;/p&gt;
&lt;p&gt;Second, DevOps is not a specific tool or application. You do not need to
use Docker or Puppet to do DevOps in your organization. The processes that
make DevOps work are made much easier by some tools such as cloud platforms
where infrastructure is transient, but even those platforms are not required
to do DevOps right.&lt;/p&gt;
&lt;p&gt;Third, DevOps is not tied to a specific programming language ecosystem. You
do not need to use Node.js or Ruby on Rails. You can still use DevOps
in a COBOL- or J2EE-only organization.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.015.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="What DevOps IS."&gt;
With those misconceptions out of the way, let's talk about what DevOps IS.
First, at the risk of being way too obvious, DevOps is the combination of the
two words Development and Operations. This combination is not a random
pairing, it's an intentional term. &lt;/p&gt;
&lt;p&gt;Second, DevOps means your application developers handle operations. Not 
necessarily &lt;em&gt;all&lt;/em&gt; operations work, but ops work that deals with the code they
write and deploy as part of their sprints. The developers also will likely
become intimately familiar with the underlying infrastructure such as the
web application servers, &lt;a href="/web-servers.html"&gt;web servers&lt;/a&gt; and 
&lt;a href="/deployment.html"&gt;deployment&lt;/a&gt; code for 
&lt;a href="/configuration-management.html"&gt;configuration management&lt;/a&gt; tools.&lt;/p&gt;
&lt;p&gt;Third, DevOps allows your organization to be more efficient in handling
issues by ensuring the correct person is handling errors and application
failures.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.016.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="What Continuous Delivery is."&gt;
We are not going to go through Continuous Delivery (CD) by defining what it is
not, but there are a couple bits to say about it. First, CD is a collection of 
engineering practices aimed at automating the delivery of code from 
version control check-in until it is running in a production environment.&lt;/p&gt;
&lt;p&gt;The benefit of the automation CD approach is that your organization will have
far greater confidence in the code running in production even as the code
itself changes more frequently with every deployment.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.017.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Move fast and BUILD things."&gt;
Facebook's original motto changed a few years ago to "Move Fast and Build 
Things" because they realized that breaking production was not a byproduct
of moving fast, it was a result of immature organizational processes and
tools. DevOps and Continuous Delivery are why organizations can now deploy
hundreds or thousands of times to production every day but have increasing,
not decreasing, confidence in their systems as they continue to move faster.&lt;/p&gt;
&lt;p&gt;Let's take a look at a couple of example scenarios that drive home what
DevOps and CD are all about, as well as learn about some of the processes, 
concepts and tools that fall in this domain.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.018.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="San Francisco skyline at night."&gt;
Here is a beautiful evening picture of the city I just moved away from, San 
Francisco.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.019.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Twilio billboard, ask your developer!"&gt;
The company I work for, &lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt; is located in
San Francisco. If you ever fly into the SFO airport and catch a ride towards
downtown, you will see our billboard on the right side of the road. &lt;/p&gt;
&lt;p&gt;Twilio makes it easy for software developers to add communications, such as
phone calling, messaging and video, into their applications. We are a 
telecommunications company built with the power of software that eliminates
the need for customers to buy all the expensive legacy hardware that they
used to have to acquire. As a telecomm company, we can never go down, or
our customers are hosed and then our business is hosed.&lt;/p&gt;
&lt;p&gt;However, we have had challenges in our history that have forced us to 
confront the fork in the road between manual processes and moving faster via 
trust in our automation.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.020.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="August 2013."&gt;
In August 2013, Twilio faced an infrastructure failure.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.021.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="How customers pay for Twilio."&gt;
First, some context. When a developer signs up for Twilio, she puts some 
credit on their account and the credit is drawn upon by making phone calls,
sending messages and such. When credit runs low we can re-charge your card
so you get more credit.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.022.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Hacker News post on Twilio not billing correctly."&gt;
There was a major production issue with the recurring charges in August 2013.
Our engineers were alerted to the errors and the issue blew up on the top of
&lt;a href="https://news.ycombinator.com/"&gt;Hacker News&lt;/a&gt;, drawing widespread atttention.&lt;/p&gt;
&lt;p&gt;So now there is a major production error... what do we do? &lt;/p&gt;
&lt;p&gt;(Reader note: this section is primarily audience discussion based on their 
own experiences handling these difficult technical situations.)&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.023.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Billing incident update blog post."&gt;
One step is to figure out when the problem started and whether or not it
is over. If it's not over, triage the specific problems and start 
communicating with customers. Be as accurate and transparent as possible.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.024.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Redis logo."&gt;
The specific technical issue in this case was due to our misconfiguration of
Redis instances.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.025.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Text that reads 'Root cause?'"&gt;
We know the particular technical failure was due to our Redis mishandling,
but how do we look past the specific bit and get to a broader understanding
of the processes that caused the issue?&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.026.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Billing incident response from Twilio developer evangelist."&gt;
Let's take a look at the resolution of the situation and then learn about
the concepts and tools that could prevent future problems.&lt;/p&gt;
&lt;p&gt;In this case, we communicated with our customers as much about the problem
as possible. As a developer-focused company, we were fortunate that by being
transparent about the specific technical issue, many of our customers gained
respect for us because they had also faced similar misconfigurations in their 
own environments.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.027.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Twilio status page."&gt;
Twilio became more transparent with the status of services, especially with
showing partial failures and outages.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.028.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Twilio number of production deployments."&gt;
Twilio was also deliberate in avoiding the accumulation of manual processes
and controls that other organizations often put in place after failures. We
doubled down on resiliency through automation to increase our ability to
deploy to production.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.029.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Text that reads 'tools and concepts'."&gt;
What are some of the tools and concepts we use at Twilio to prevent future
failure scenarios?&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.030.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Eventually you ship code into production that breaks your application."&gt;
If you do not have the right tools and processes in place, eventually you
end up with a broken production environment after shipping code. What is
one tool we can use to be confident that the code going into production is
not broken?&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.031.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Text that reads 'automated testing' with example code coverage in the background."&gt;
Automated &lt;a href="/testing.html"&gt;testing&lt;/a&gt;, in its many forms, such as unit testing, 
integration testing, security testing and performance testing, helps to 
ensure the integrity of the code. You need to automate because manual 
testing is too slow.&lt;/p&gt;
&lt;p&gt;Other important tools that fall into the automated testing bucket but are
not traditionally thought of as a "test case" include code coverage and
&lt;a href="/code-metrics.html"&gt;code metrics&lt;/a&gt; (such as Cyclomatic Complexity).&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.032.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Automated tests in dev only deploy to production when they are successful."&gt;
Awesome, now you only deploy to production when a big batch of automated
test cases ensure the integrity of your code. All good, right?&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.033.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Bugs can still occur in production."&gt;
Err, well no. Stuff can still break in production, espcially in environments
where for various reasons you do not have the same exact data in test
that you do in production. Your automated tests and code metrics will
simply not catch every last scenario that could go wrong in production.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.034.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Text that reads 'monitoring and alerting' with New Relic dashboard in the background."&gt;
When something goes wrong with your application, you need monitoring to
know what the problem is, and alerting to tell the right folks. Traditionally,
the "right" people were in operations. But over time many organizations 
realized the ops folks ended up having to call the original application 
developers who wrote the code that had the problem. &lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.035.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="When something breaks in prod, your developers know about it and can fix the problem."&gt;
A critical piece to DevOps is about ensuring the appropriate developers 
are carrying the pagers. It sucks to carry the pager and get woken up in the
middle of the night, but it's a heck of a lot easier to debug the code that
your team wrote than if you are a random ops person who's never seen the
code before in her life.&lt;/p&gt;
&lt;p&gt;Another by-product of having application developers carry the "pagers" for
alerts on production issues is that over time the code they write is more
defensive. Errors are handled more appropriately, because otherwise you know
something will blow up on you later on at a less convenient time.  &lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.036.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="When production is running smoothly with many tests, do that increase the chance of black swan-type events?"&gt;
Typically you find though that there are still plenty of production errors
even when you have defensive code in place with a huge swath of the most 
important parts of your codebase being constantly tested.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.037.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Text that reads 'Chaos engineering' with the chaos engineering monkey logo in the background."&gt;
That's where a concept known as "chaos engineering" can come in. Chaos
engineering breaks parts of your production environment on a schedule and
even unscheduled basis. This is a very advanced technique- you are not going
to sell this in an environment that has no existing automated test coverage
or appropriate controls in place.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.038.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Chaos engineering introduces intentional failures in your infrastructure both on a scheduled and unschedule basis."&gt;
By deliberately introducing failures, especially during the day when your
well-caffeinated team can address the issues and put further safeguards in
place, you make your production environment more resilient.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.039.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Text that reads '1. other peoples money' with money in the background."&gt;
We talked about the failure in Twilio's payments infrastructure several years 
ago that led us to ultimately become more resilient to failure by putting 
appropriate automation in place.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.040.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Text that reads '2. other peoples lives' with people in the background."&gt;
Screwing with other people's money is really bad, and so is messing with
people's lives.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.041.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Text that reads 'War on Terror' with an exploded vehicle in the background."&gt;
Let's discuss a scenario where human lives were at stake. &lt;/p&gt;
&lt;p&gt;To be explicit about this next scenario, I'm only going to talk about public 
information, so my cleared folks in the audience can relax.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.042.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="U.S. military and civilian casualties in Iraq."&gt;
During the height of U.S forces' Iraq surge in 2007, more improvised explosive
devices were killing and maiming soldiers and civilians than ever before. It
was an incredible tragedy that contributed to the uncertainty of the time in
the country.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.043.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Biometrics devices."&gt;
However, efforts in biometrics were one part of the puzzle that helped to
prevent more attacks, as shown in this picture from General Petraeus' report
to Congress.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.044.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Eclipse IDE."&gt;
One major challenge with the project was a terrible manual build process that
literally involved clicking buttons in an integrated 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; to create the
application artifacts. The process was too manual and the end result was that
the latest version of the software took far too long to get into production.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.045.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="The situation did not have reasonable deployments to dev or to production."&gt;
We did not have automated deployments to a development environment, staging
or production.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.046.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Start somewhere, automate your deployments to dev environment."&gt;
Our team had to start somewhere, but with a lack of approved tools, all we
had available to us was shell scripts. But shell scripts were a start. We were
able to make a very brittle but repeatable, automated deployment process to
a development environment?&lt;/p&gt;
&lt;p&gt;There is still a huge glaring issue though: until the code is actually 
deployed to production it does not provide any value for the users.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.047.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Some environments have tricky issues with automated prod deployments like disconnected networks."&gt;
In this case, we could never fully automate the deployment because we had to
burn to a CD before moving to a physically different computer network. The
team could automate just about everything else though, and that really mattered
for iteration and speed to deployment.&lt;/p&gt;
&lt;p&gt;You do the best you can with the tools at your disposal.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.048.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Text that reads 'Tools and concepts'."&gt;
What are the tools and concepts behind automating deployments?&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.049.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Several development teams commit to a Git repository."&gt;
Source code is stored in a 
&lt;a href="/source-control.html"&gt;source control (or version control)&lt;/a&gt; repository.
Source control is the start of the automation process, but what do we need
to get the code into various environments using a repeatable, automated
process?&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.050.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Text that reads 'continuous integration' with a screenshot of Jenkins dashboard in the background."&gt;
This is where &lt;a href="/continuous-integration.html"&gt;continuous integration&lt;/a&gt; comes
in. Continuous integration takes your code from the version control system,
builds it, tests it and calculate the appropriate code metrics before the
code is deployed to an environment.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.051.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Add a continuous integration server to build the code that is committed to your source control repository."&gt;
Now we have a continuous integration server hooked up to source control, but
this picture still looks odd.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.052.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="How do we automate the building of these environments and the deployments themselves?"&gt;
Technically, continuous integration does not handle the details of the build
and how to configure individual execution environments.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.053.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Text that reads 'configuration management' with a screenshot of Ansible AWX in the background."&gt;
&lt;a href="/configuration-management.html"&gt;Configuration management&lt;/a&gt; tools handle the
setup of application code and environments.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.054.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Agile sprints deliver code to a development environment and then automate the deployment into production."&gt;
Those two scenarios provided some context for why DevOps and Continuous 
Delivery matter to organizations in varying industries. When you have high
performing teams working via the Agile development methodology, you will
encounter a set of problems that are not solvable by doing Agile "better". You
need the tools and concepts we talked about today as well as a slew of other
engineering practices to get that new code into production.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.055.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Review list of continuous delivery tools."&gt;
The tools and concepts we covered today were 
&lt;a href="/testing.html"&gt;automated testing&lt;/a&gt;, &lt;a href="/monitoring.html"&gt;monitoring&lt;/a&gt;, chaos
engineering, &lt;a href="/continuous-integration.html"&gt;continuous integration&lt;/a&gt; and
&lt;a href="/configuration-management.html"&gt;configuration management&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.056.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="A list of more concepts and tools for continuous delivery."&gt;
There are many other practices you will need as you continue your journey.
You can learn about 
&lt;a href="/table-of-contents.html"&gt;all of them on Full Stack Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/171101-devops-cd-you/devops-cd-you.057.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Thank you slide."&gt;&lt;/p&gt;
&lt;p&gt;That's all for today. My name is &lt;a href="/about-author.html"&gt;Matt Makai&lt;/a&gt;
and I'm a software developer at &lt;a href="/twilio.html"&gt;Twilio&lt;/a&gt; and the
author of &lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;.
Thank you very much.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Additional resources to learn more about the following topics can be found
on their respective pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/deployments.html"&gt;Deployments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/continuous-integration.html"&gt;Continuous integration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/serverless.html"&gt;Serverless computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/aws-lambda.html"&gt;AWS Lambda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/static-site-generator.html"&gt;Static site generators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/monitoring.html"&gt;Monitoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/devops.html"&gt;DevOps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/configuration-management.html"&gt;Configuration management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/platform-as-a-service.html"&gt;Platform-as-a-Service (PaaS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/docker.html"&gt;Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/web-application-security.html"&gt;Web application security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/testing.html"&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/source-control.html"&gt;Source control&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/git.html"&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/hosted-source-control-services.html"&gt;Hosted source control services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/code-metrics.html"&gt;Code metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/no-sql-datastore.html"&gt;NoSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>本周 PyDev，Django 2.0 和 Twilio Voices</title><link href="https://www.fullstackpython.com/blog/pydev-week-django-2-twilio-voices.html" rel="alternate"></link><published>2017-10-30T00:00:00-04:00</published><updated>2017-10-30T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-10-30:blog/pydev-week-django-2-twilio-voices.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.blog.pythonlibrary.org/category/pydevoftheweek/"&gt;&lt;strong&gt;PyDev of the Week&lt;/strong&gt;&lt;/a&gt; 
is a developer interview series by 
&lt;a href="https://github.com/driscollis"&gt;Mike Driscoll&lt;/a&gt; that asks Python programmers 
how they started coding, the projects they're working on and what advice
they have for beginners. Mike was kind enough to 
&lt;a href="https://www.blog.pythonlibrary.org/2017/10/30/pydev-of-the-week-matthew-makai/"&gt;interview me in the latest PyDev of the Week post&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the PyDev interview I gave a big shoutout to the fine folks working on the
&lt;a href="/django.html"&gt;Django project&lt;/a&gt;, which is 
currently beta testing the major upcoming
&lt;a href="https://docs.djangoproject.com/en/2.0/releases/2.0/"&gt;&lt;strong&gt;Django 2.0 release&lt;/strong&gt;&lt;/a&gt;.
Django 2.0 is the first release to support only Python 3, specifically 
&lt;a href="https://docs.djangoproject.com/en/2.0/releases/2.0/#python-compatibility"&gt;Python 3.4, 3.5 and 3.6&lt;/a&gt;. 
The &lt;a href="https://www.djangoproject.com/weblog/2017/oct/16/django-20-beta-1-released/"&gt;Django 2.0 beta 1 release&lt;/a&gt; 
needs
&lt;a href="https://code.djangoproject.com/query?version=2.0&amp;amp;col=id&amp;amp;col=summary&amp;amp;col=status&amp;amp;col=owner&amp;amp;col=type&amp;amp;col=component&amp;amp;col=version&amp;amp;desc=1&amp;amp;order=id"&gt;feedback on bugs in the issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One bit I missed calling out in the PyDev interview is a new program I'm 
working on called &lt;a href="http://www.twiliovoices.com"&gt;&lt;strong&gt;Twilio Voices&lt;/strong&gt;&lt;/a&gt;. Twilio
Voices pays developers to write great technical tutorials for the 
&lt;a href="https://www.twilio.com/blog"&gt;Twilio blog&lt;/a&gt;. We have already published a slew 
of awesome Python walkthroughs such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/blog/2017/06/hacked-my-universitys-registration-system-python-twilio.html"&gt;How I Hacked My University's Registration System with Twilio SMS&lt;/a&gt; by Samuel Taylor&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/blog/2017/08/geospatial-analysis-python-geojson-geopandas.html"&gt;Getting Started on Geospatial Analysis with Python, GeoJSON and GeoPandas&lt;/a&gt; by Lesley Cordero&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/blog/2017/08/json-serialization-in-python-using-serpy.html"&gt;JSON Serialization in Python using serpy&lt;/a&gt; by Siddhant Goel&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/blog/2017/04/wedding-at-scale-how-i-used-twilio-python-and-google-to-automate-my-wedding.html"&gt;Wedding at Scale: How I Used Twilio, Python and Google to Automate My Wedding&lt;/a&gt; by Thomas Curtis&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/blog/2017/09/never-forget-friends-birthday-python-flask-twilio.html"&gt;Never Forget A Friend’s Birthday with Python, Flask and Twilio&lt;/a&gt;
  by Bob Belderbos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Take a look at the &lt;a href="http://www.twiliovoices.com/"&gt;Twilio Voices page&lt;/a&gt; and 
submit the interest form if you want to get paid to write code tutorials 
in any programming language of your choice. We'll take care of promoting your 
posts to the broader developer community.&lt;/p&gt;
&lt;p&gt;As always, send me an email or &lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;submit an issue ticket on GitHub&lt;/a&gt; 
to let me know how to improve 
&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt; 
as I continue to 
&lt;a href="/table-of-contents.html"&gt;fill in the table of contents&lt;/a&gt; 
with &lt;a href="/change-log.html"&gt;new pages&lt;/a&gt;
and 
&lt;a href="/blog.html"&gt;new tutorials&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>PyCon US 2018 CFP, Python Bytes 和 Pelican</title><link href="https://www.fullstackpython.com/blog/pycon-us-2018-cfp-python-bytes-pelican.html" rel="alternate"></link><published>2017-10-09T00:00:00-04:00</published><updated>2017-10-09T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-10-09:blog/pycon-us-2018-cfp-python-bytes-pelican.html</id><summary type="html">&lt;p&gt;&lt;a href="https://us.pycon.org/2018/"&gt;&lt;strong&gt;PyCon US 2018&lt;/strong&gt;&lt;/a&gt; is coming up in Cleveland, Ohio
on May 9th-17th. The 
&lt;a href="https://us.pycon.org/2018/speaking/talks/"&gt;call for proposals (CFP)&lt;/a&gt; 
went live in the past few days so now is the time to sharpen your keyboards 
and get yourself into the proposal writing zone. &lt;/p&gt;
&lt;p&gt;When you start working on your proposal, here are some awesome resources 
on building a great tech talk, public speaking and describing your session
by writing a solid proposal:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://emptysqua.re/blog/seven-tips-for-pycon/"&gt;Seven tips to get into PyCon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://akaptur.com/blog/2014/09/11/rejected-pycon-proposals/"&gt;Rejected PyCon proposals&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://hynek.me/articles/speaking/"&gt;On conference speaking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.oreilly.com/conferences/sample_proposals.html"&gt;Example conference proposals&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Looking forward to seeing you all at PyCon US in Cleveland early next year!&lt;/p&gt;
&lt;p&gt;Speaking of folks who will definitely be at PyCon, 
&lt;a href="https://pythonbytes.fm/"&gt;&lt;strong&gt;Python Bytes&lt;/strong&gt;&lt;/a&gt; is an awesome weekly Python
podcast by &lt;a href="https://twitter.com/mkennedy"&gt;Michael Kennedy&lt;/a&gt; of 
&lt;a href="https://talkpython.fm/"&gt;Talk Python to Me&lt;/a&gt; and 
&lt;a href="https://twitter.com/brianokken"&gt;Brian Okken&lt;/a&gt; of 
&lt;a href="http://testandcode.com/"&gt;Test and Code&lt;/a&gt;. Michael and Brian teamed up to
host and produce Python Bytes. I really enjoy listening to the rapid-fire 
discussion of several programming topics within a single podcast. &lt;/p&gt;
&lt;p&gt;Michael and Brian were kind enough to invite me on as a co-host for the
&lt;a href="https://pythonbytes.fm/episodes/show/38/hacking-classic-nintendo-games-with-python"&gt;38th episode "Hacking Classic Nintendo Games with Python"&lt;/a&gt;
while Michael was on vacation. 
The &lt;a href="https://pythonbytes.fm/episodes/show/39/the-new-pypi"&gt;following episode "The new PyPI"&lt;/a&gt; 
also had a great discussion of the 
&lt;a href="/object-relational-mappers-orms.html"&gt;Object-Relational Mappers (ORMs) page on Full Stack Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of the projects I talked about on the Python Bytes podcast episode that
I guest hosted is &lt;a href="http://docs.getpelican.com/en/stable/"&gt;&lt;strong&gt;Pelican&lt;/strong&gt;&lt;/a&gt;, the
&lt;a href="/static-site-generator.html"&gt;static site generator&lt;/a&gt; 
that turns &lt;a href="/markdown.html"&gt;Markdown&lt;/a&gt; and some 
&lt;a href="/jinja2.html"&gt;Jinja templates&lt;/a&gt; into the 
Full Stack Python site. Here are some additional tutorials and resources
to get started using Pelican if you've been meaning to build a static site 
yourself:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="/blog/generating-static-websites-pelican-jinja2-markdown.html"&gt;How to Create Your First Static Site with Pelican and Jinja2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/pelican.html"&gt;An overview of the Pelican static site generator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stormpath.com/blog/ultimate-guide-deploying-static-site-aws"&gt;The Ultimate Guide to Deploying Static Sites on AWS&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One last bit: &lt;a href="https://training.talkpython.fm/courses/explore_entrepreneurs/python-for-entrepreneurs-build-and-launch-your-online-business"&gt;Python for Entrepreneurs&lt;/a&gt; 
is now fully released with all 20 hours of content. Got non-developer 
friends who wants you to build them an app? Send them the 
&lt;a href="https://training.talkpython.fm/courses/explore_entrepreneurs/python-for-entrepreneurs-build-and-launch-your-online-business"&gt;Python for Entrepreneurs course&lt;/a&gt; 
so they can stop bugging you and build it themselves :)&lt;/p&gt;</summary></entry><entry><title>如何监控 Python web 应用程序</title><link href="https://www.fullstackpython.com/blog/monitor-python-web-applications.html" rel="alternate"></link><published>2017-09-29T00:00:00-04:00</published><updated>2017-09-29T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-09-26:blog/monitor-python-web-applications.html</id><summary type="html">&lt;p&gt;A quick way to check for errors and issues in your operational 
&lt;a href="/web-development.html"&gt;Python web application&lt;/a&gt; is to drop-in one of many
awesome hosted &lt;a href="/monitoring.html"&gt;monitoring&lt;/a&gt; tools.&lt;/p&gt;
&lt;p&gt;Let's learn to quickly add &lt;a href="https://rollbar.com"&gt;Rollbar monitoring&lt;/a&gt;
to a web app to visualize when our application is running properly and
when it has issues. This tutorial will use &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; as the 
example &lt;a href="/web-frameworks.html"&gt;web framework&lt;/a&gt; along with Rollbar as the 
monitoring service but you can also check out the list of other tools 
on the &lt;a href="/monitoring.html"&gt;monitoring page&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;We can use either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt; to build this
tutorial, but Python 3 is &lt;em&gt;strongly&lt;/em&gt; recommended for all new applications. 
&lt;a href="https://www.python.org/downloads/release/python-362/"&gt;Python 3.6.2&lt;/a&gt; 
was used to build this tutorial. We will also use the following 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt; throughout
the post: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt;, which come installed 
  with Python 3, to install and isolate the Bottle and Rollbar libraries 
  from your other projects&lt;/li&gt;
&lt;li&gt;&lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; web framework, 
  &lt;a href="https://bottlepy.org/docs/0.12/"&gt;version 0.12.13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rollbar.com/docs/notifier/pyrollbar/"&gt;pyrollbar&lt;/a&gt; monitoring 
  instrumentation library,
  &lt;a href="https://github.com/rollbar/pyrollbar/tree/v0.13.13"&gt;version 0.13.13&lt;/a&gt;
  in Bottle applications so pyrollbar can report on all errors&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://rollbar.com/"&gt;free Rollbar account&lt;/a&gt; where we will send error
  data and view it when it is captured&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need help getting your 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; configured
before running this code, take a look at
&lt;a href="/blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;this guide for setting up Python 3 and Bottle on Ubuntu 16.04 LTS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All code in this blog post is available open source under the MIT license 
on GitHub under the 
&lt;a href="https://github.com/fullstackpython/blog-code-examples"&gt;monitor-python-bottle-apps directory of the blog-code-examples repository&lt;/a&gt;. 
Use and abuse the source code as you desire for your own applications.&lt;/p&gt;
&lt;h2&gt;Installing Dependencies&lt;/h2&gt;
&lt;p&gt;Create a new virtual environment for this project using the following
command. I recommend keeping a separate directory for virtualenvs under 
&lt;code&gt;~/Envs/&lt;/code&gt; so you will know where all your project virtualenvs are located.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv monitorpython
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv with the &lt;code&gt;activate&lt;/code&gt; shell script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; monitorpython/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after activating the virtualenv:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170926-monitor-python-web-apps/activate-python-virtualenv.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Activating our Python virtual environment on the command line."&gt;&lt;/p&gt;
&lt;p&gt;Remember that you need to activate your virtualenv in every new terminal 
window where you want to use the virtualenv to run the project.&lt;/p&gt;
&lt;p&gt;We can now install Bottle and Rollbar into the activated
virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install bottle==0.12.13 rollbar==0.13.13
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Look for output like the following to confirm the 
dependencies installed correctly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installing collected packages: bottle, urllib3, certifi, idna, chardet, requests, six, rollbar
  Running setup.py install for bottle ... done
    Running setup.py install for rollbar ... done
    Successfully installed bottle-0.12.13 certifi-2017.7.27.1 chardet-3.0.4 idna-2.6 requests-2.18.4 rollbar-0.13.13 six-1.11.0 urllib3-1.22
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have our dependencies ready to go so now we can build
our Python web application.&lt;/p&gt;
&lt;h2&gt;Our Python Web App&lt;/h2&gt;
&lt;p&gt;Create a folder for your project named &lt;code&gt;monitor-python-apps&lt;/code&gt;. &lt;code&gt;cd&lt;/code&gt; into
the folder and then create a file named &lt;code&gt;app.py&lt;/code&gt; with the following
code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;


&lt;span class="n"&gt;TEMPLATE_STRING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;lt;title&amp;gt;Full Stack Python Web App&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;lt;h1&amp;gt;{{ h1 }}&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;MIN_MSG_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;


&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;lt;msg&amp;gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Display a message if the msg value is greater than 2 characters&lt;/span&gt;
&lt;span class="sd"&gt;    in the path.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;valid_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;MIN_MSG_LENGTH&lt;/span&gt;
    &lt;span class="n"&gt;valid_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^[a-z\-]+$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;valid_length&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;valid_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;error_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sorry, only alpha characters and hyphens allowed.&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error_msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above application code has a few standard Bottle imports so we can
create a Bottle web app and handle URL routes. &lt;/p&gt;
&lt;p&gt;We have a single function, &lt;code&gt;show_message&lt;/code&gt;, that handles a single Bottle 
URL route. &lt;code&gt;show_message&lt;/code&gt; checks if the URL path contains only alphabetic 
characters and hyphens for a message to display. If the message passes 
the conditions then a page is rendered with that message
in an &lt;code&gt;h1&lt;/code&gt; element. If &lt;code&gt;msg&lt;/code&gt; does not pass the condition test then an 
exception is thrown that only alpha characters and hyphens are allowed.&lt;/p&gt;
&lt;p&gt;Save &lt;code&gt;app.py&lt;/code&gt; and we can run our code. Execute &lt;code&gt;app.py&lt;/code&gt; using the &lt;code&gt;python&lt;/code&gt;
command as follows (make sure your virtualenv is still activated in the
terminal where you are running this command):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python app.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Bottle development server should start up and display a few lines
of output.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170926-monitor-python-web-apps/run-bottle-app.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Run the local Bottle development server."&gt;&lt;/p&gt;
&lt;p&gt;Try to access a URL with a path that contains only alphabetic characters and 
hyphens, such as 
&lt;a href="http://localhost:8080/hello-world/"&gt;localhost:8080/hello-world/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170926-monitor-python-web-apps/localhost-hello-world.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Testing at /hello-world/ returns an HTTP 200 response."&gt;&lt;/p&gt;
&lt;p&gt;The application was successful in displaying "hello-world" but what if we
try a URL that contains numbers in addition to the alphabetic characters,
such as
&lt;a href="http://localhost:8080/fullstackpython/"&gt;localhost:8080/fullstackpython123/&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170926-monitor-python-web-apps/localhost-500.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="We receive a 500 error when numbers are added to the URL."&gt;&lt;/p&gt;
&lt;p&gt;An HTTP 500 error. That is surely not a good user experience.&lt;/p&gt;
&lt;p&gt;The 500 error is obvious to us right now because we are 
testing the application locally during development. However, what happens 
when the app is deployed and a user gets the error in their own web 
browser? They will likely quit out of frustration and you will never 
know what happened unless you add some error tracking and application 
monitoring.&lt;/p&gt;
&lt;p&gt;Time to modify our code to add Rollbar to report errors that occur.&lt;/p&gt;
&lt;h2&gt;Monitoring for Errors with Rollbar&lt;/h2&gt;
&lt;p&gt;Go to the &lt;a href="https://rollbar.com/"&gt;Rollbar homepage in your browser&lt;/a&gt; 
to add their tool to our Bottle app.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170926-monitor-python-web-apps/rollbar-homepage.jpg" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="The Rollbar homepage in the Chrome web browser."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Sign Up" button in the upper right-hand corner. Enter your 
email address, a username and the password you want on the sign up page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170926-monitor-python-web-apps/sign-up-page.jpg" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Enter your account information on the sign up page."&gt;&lt;/p&gt;
&lt;p&gt;After the sign up page you will see the onboarding flow where you can
enter a project name and select a programming language. For the project
name type in "Full Stack Python" then select that you are monitoring a 
Python app.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170926-monitor-python-web-apps/create-new-project.jpg" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Create a new project named 'Battlegrounds' and select Python as the programming language."&gt;&lt;/p&gt;
&lt;p&gt;Press the "Continue" button at the bottom to move along. The next
screen shows us a few instructions to add monitoring to a Python
application.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170723-monitor-flask-apps/project-setup.jpg" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Set up your project using your server-side access token."&gt;&lt;/p&gt;
&lt;p&gt;Let's change our Bottle code to let Rollbar collect and aggregate the
errors that pop up in our application. Modify &lt;code&gt;app.py&lt;/code&gt; to include the 
following highlighted lines. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rollbar.contrib.bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RollbarBottleReporter&lt;/span&gt;


&lt;span class="n"&gt;TEMPLATE_STRING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;lt;title&amp;gt;Full Stack Python Web App&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;lt;h1&amp;gt;{{ h1 }}&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;MIN_MSG_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;ROLLBAR_SECRET&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ROLLBAR_SECRET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;rb_monitor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RollbarBottleReporter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ROLLBAR_SECRET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;                                   &lt;span class="n"&gt;environment&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;production&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="n"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rb_monitor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;lt;msg&amp;gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Display a message if the msg value is greater than 2 characters&lt;/span&gt;
&lt;span class="sd"&gt;    in the path.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;valid_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;MIN_MSG_LENGTH&lt;/span&gt;
    &lt;span class="n"&gt;valid_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^[a-z\-]+$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;valid_length&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;valid_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;error_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sorry, only alpha characters and hyphens allowed.&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;error_msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8080&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A new import &lt;code&gt;from rollbar.contrib.bottle import RollbarBottleReporter&lt;/code&gt;
is our conduit between the application and the Rollbar server. &lt;code&gt;rollbar&lt;/code&gt;
is the library we installed earlier. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ROLLBAR_SECRET&lt;/code&gt; token needs to be set in an environment variable.
Save and quit &lt;code&gt;app.py&lt;/code&gt;. Run the following command in the terminal where your
virtualenv is activated:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;ROLLBAR_SECRET&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;token here&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you are uncertain about what your secret token is, it can be found on 
the Rollbar onboarding screen. &lt;/p&gt;
&lt;p&gt;Note that I typically store all my environment variables in a &lt;code&gt;.env&lt;/code&gt; 
file and use a 
&lt;a href="https://github.com/fullstackpython/blog-code-examples/blob/master/monitor-flask-apps/template.env"&gt;template.env&lt;/a&gt; 
as a template for what I should fill into &lt;code&gt;.env&lt;/code&gt;. &lt;code&gt;.env&lt;/code&gt; can be invoked
from the terminal using the &lt;code&gt;. .env&lt;/code&gt; command. Make sure to &lt;em&gt;never&lt;/em&gt; commit 
your secret tokens to a source control repository though, especially if 
the repository is public!&lt;/p&gt;
&lt;p&gt;After exporting your &lt;code&gt;ROLLBAR_SECRET&lt;/code&gt; key as an environment variable
we can test that Rollbar is working as we run our application. Run it
now using &lt;code&gt;python&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python app.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Back in your web browser press the "Done! Go to Dashboard" button.&lt;/p&gt;
&lt;p&gt;If an event hasn't been reported yet we'll see a waiting screen like this
one:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170926-monitor-python-web-apps/waiting.jpg" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Waiting for data on the Rollbar dashboard."&gt;&lt;/p&gt;
&lt;p&gt;Make sure your Bottle development server is running and try to go to 
&lt;a href="http://localhost:8080/fullstackpython123/"&gt;localhost:8080/fullstackpython123/&lt;/a&gt;.
A 500 server error is immediately reported on the dashboard:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170926-monitor-python-web-apps/exception-reported.jpg" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Viewing the 500 errors reported in the Rollbar dashboard."&gt;&lt;/p&gt;
&lt;p&gt;We even get an email with the error (which can also be turned off if you
don't want emails for every error):&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170926-monitor-python-web-apps/email-error-report.jpg" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Email with the Rollbar error report."&gt;&lt;/p&gt;
&lt;p&gt;Nice, with just a few lines of code we now have our Bottle app reporting
errors for any user that's working with our application.&lt;/p&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;We just learned how to catch and handle errors with Rollbar as a hosted
monitoring platform in a simple example 
&lt;a href="/bottle.html"&gt;Bottle application&lt;/a&gt;. Next you will want to 
add &lt;a href="/monitoring.html"&gt;monitoring&lt;/a&gt; to more complicated web apps, including
ones that use &lt;a href="/django.html"&gt;Django&lt;/a&gt; or &lt;a href="/flask.html"&gt;Flask&lt;/a&gt;. You can also 
try Rollbar's more advanced features to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rollbar.com/docs/custom-grouping/"&gt;set up rules to group errors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rollbar.com/docs/deploy-tracking/"&gt;debug and track deployment issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rollbar.com/docs/person-tracking/"&gt;sort and view errors by user&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is plenty more to learn about in the areas of 
&lt;a href="/web-development.html"&gt;web development&lt;/a&gt; and 
&lt;a href="/deployments.html"&gt;deployments&lt;/a&gt; so keep learning by reading 
about &lt;a href="/web-frameworks.html"&gt;web frameworks&lt;/a&gt;. You can also learn more 
about integrating Rollbar with Python applications via 
&lt;a href="https://rollbar.com/docs/notifier/pyrollbar/"&gt;their Python documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Questions? Let me know via 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;a GitHub issue ticket on the Full Stack Python repository&lt;/a&gt;, 
on Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Do you see a typo, syntax issue or just something that's confusing in this 
blog post? Fork
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170926-monitor-python-web-apps.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request with a fix or 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;file an issue ticket on GitHub&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>如何在 Linode 上配置 Ubuntu 16.04 Linux 服务器</title><link href="https://www.fullstackpython.com/blog/provision-ubuntu-linux-servers-linode.html" rel="alternate"></link><published>2017-09-20T00:00:00-04:00</published><updated>2017-09-20T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-09-20:blog/provision-ubuntu-linux-servers-linode.html</id><summary type="html">&lt;p&gt;Your live web application must be &lt;a href="/deployment.html"&gt;deployed&lt;/a&gt; and run 
somewhere other than your local 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt;. That deployment 
location is known as a "production environment" and it is built out of 
one or more &lt;a href="/servers.html"&gt;servers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's learn how to provision an &lt;a href="/ubuntu.html"&gt;Ubuntu Linux 16.04 LTS&lt;/a&gt; 
&lt;a href="/virtual-private-servers-vps.html"&gt;virtual private server (VPS)&lt;/a&gt; on Linode 
that can be used for production or development purposes.&lt;/p&gt;
&lt;h2&gt;Signing up for Linode&lt;/h2&gt;
&lt;p&gt;We need a Linode account to provision a server, so start by pointing your 
web browser to &lt;a href="https://www.linode.com/"&gt;Linode.com&lt;/a&gt;. Their 
landing page will look something like the following image.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170920-provision-ubuntu-linode/linode-landing-page.jpg" class="technical-diagram img-rounded" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://manager.linode.com/session/signup"&gt;Sign up&lt;/a&gt; for an account.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170920-provision-ubuntu-linode/linode-sign-up.png" class="technical-diagram img-rounded" style="border:1px solid #ccc" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;You should receive an email for account confirmation. Fill out the 
appropriate information and add initial credit to your account. If you 
want to enter a referral code, mine is 
&lt;code&gt;bfeecaf55a83cd3dd224a5f2a3a001fdf95d4c3d&lt;/code&gt;. Your account will go for 
a quick review to ensure you are not a malicious spam bot and then 
your account will be fully activated.&lt;/p&gt;
&lt;p&gt;Once your account is activated refresh the page. The new page will allow
you to add a Linode instance.&lt;/p&gt;
&lt;p&gt;Provisioning a server for $5 or $10/month (depending on
how much memory and storage you want) is more than enough for small-scale
Python web applications.&lt;/p&gt;
&lt;p&gt;Select the 1024 option and the data center location of your choice. I chose 
Newark, NJ because I grew up in northern NJ and otherwise the location is not
important for my deployment. If your most of your users are located in a 
specific region then you should select the data center location closest to 
them.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170920-provision-ubuntu-linode/select-instance.jpg" class="technical-diagram img-rounded" style="border:1px solid #ccc" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Click the "Add this Linode!" button and a dashboard will appear that
shows the Linode is being provisioned.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170920-provision-ubuntu-linode/dashboard.jpg" class="technical-diagram img-rounded" style="border:1px solid #ccc" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Refresh the page and look for the status to change to "Brand New." Write 
down or copy the IP address as it will be needed later to SSH into the 
server, then click on the name of the Linode. A page will appear to 
show more information about your new virtual private server.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170920-provision-ubuntu-linode/dashboard-provisioned.jpg" class="technical-diagram img-rounded" style="border:1px solid #ccc" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Click the "Rebuild" link.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170920-provision-ubuntu-linode/rebuild.jpg" class="technical-diagram img-rounded" style="border:1px solid #ccc" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Select Ubuntu 16.04, which is the current Long Term Support (LTS) release 
and has a 5 year support lifecycle. This version will receive security 
updates until April 2021 as shown on the 
&lt;a href="https://www.ubuntu.com/info/release-end-of-life"&gt;Ubuntu wiki page for LTS releases&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170920-provision-ubuntu-linode/ubuntu-lts-releases.jpg" class="technical-diagram img-rounded" style="border:1px solid #ccc" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;Enter a root password. Make sure you type the password in carefully and 
remember it! The password will be needed when you log into the server
as the root user. The "Deployment Disk Size" and "Swap Disk" can be left as 
their default values.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170920-provision-ubuntu-linode/deploy-distribution.png" class="technical-diagram img-rounded" style="border:1px solid #ccc" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;When the build process begins Linode will send us back to our server's 
dashboard page. The progress bars will show the status and in a couple of 
minutes the server will be ready to boot up.&lt;/p&gt;
&lt;h2&gt;Boot and Log In&lt;/h2&gt;
&lt;p&gt;Click the "Boot" button and the Ubuntu boot process will get started. 
Booting should take less than a minute. Bring up your local command line 
as we will need it to connect to the remote machine.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170920-provision-ubuntu-linode/boot.jpg" class="technical-diagram img-rounded" style="border:1px solid #ccc" width="100%"&gt;&lt;/p&gt;
&lt;p&gt;SSH into your server with &lt;code&gt;ssh root@{ip.address.here}&lt;/code&gt; where 
&lt;code&gt;{ip.address.here}&lt;/code&gt; is your server's IP address, which can be found on the 
Linode dashboard. For example, if your new Linode's IP address 
is 66.175.209.129, you'll enter &lt;code&gt;ssh root@66.175.209.129&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You'll likely receive a prompt like the following warning. This prompt 
states that you've never connected to this server before and it asks if 
you are sure that this host's signature matches the server on which you 
intend to connect. Enter &lt;code&gt;yes&lt;/code&gt; then enter the root password you created 
during the earlier Linode server provisioning step.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;The authenticity of host &lt;span class="s1"&gt;&amp;#39;66.175.209.192 (66.175.209.192)&amp;#39;&lt;/span&gt; can&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;t be established.
RSA key fingerprint is &lt;span class="m"&gt;51&lt;/span&gt;:3c:ba:bc:c3:83:1a:36:b1:2d:e3:f6:6d:f0:11:56.
Are you sure you want to &lt;span class="k"&gt;continue&lt;/span&gt; connecting &lt;span class="o"&gt;(&lt;/span&gt;yes/no&lt;span class="o"&gt;)&lt;/span&gt;? yes
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A message like "Welcome to Ubuntu 16.04.3 LTS" will appear followed by a 
prompt. Now we can enter commands on the remote machine to get the 
server secured and setup.&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;You are all set to start configuring your server. You will want to 
immediately create 
&lt;a href="https://www.fullstackpython.com/blog/ssh-keys-ubuntu-linux.html"&gt;SSH keys&lt;/a&gt;
and disable password logins as well as install tools like 
&lt;a href="https://www.fail2ban.org/wiki/index.php/Main_Page"&gt;fail2ban&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170920-provision-ubuntu-16-04-server-linode.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>使用 Bokeh，Bottle 和 Python 3 创建条形图视觉效果</title><link href="https://www.fullstackpython.com/blog/python-bottle-bokeh-bar-charts.html" rel="alternate"></link><published>2017-07-30T00:00:00-04:00</published><updated>2017-07-30T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-07-25:blog/python-bottle-bokeh-bar-charts.html</id><summary type="html">&lt;p&gt;The &lt;a href="/bokeh.html"&gt;Bokeh&lt;/a&gt; open source Python visualization library assists 
developers with creating web browser visuals. You can build charts for 
web applications &lt;em&gt;without coding any JavaScript&lt;/em&gt;, like you'd need to do
to use libraries such as &lt;a href="https://d3js.org/"&gt;d3.js&lt;/a&gt; and plotly.&lt;/p&gt;
&lt;p&gt;Bokeh can create many common and custom visualizations using only
Python, such as this bar chart we will create in this tutorial:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170725-bottle-bokeh-bar-charts/chart-example-48.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Responsive Bokeh bar chart with 48 bars."&gt;&lt;/p&gt;
&lt;p&gt;Let's use the 
&lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; &lt;a href="/web-frameworks.html"&gt;web framework&lt;/a&gt; with Bokeh to 
build custom Python web app bar charts.&lt;/p&gt;
&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;This tutorial works with either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt;, 
but Python 3 is strongly recommended for new applications. I used
&lt;a href="https://www.python.org/downloads/release/python-362/"&gt;Python 3.6.2&lt;/a&gt; while 
writing this post. In addition to Python throughout this tutorial we 
will also use the following 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; web framework, 
  &lt;a href="https://github.com/bottlepy/bottle/tree/0.12.13"&gt;version 0.12.13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/bokeh.html"&gt;Bokeh&lt;/a&gt; data visualization library, 
  &lt;a href="https://github.com/bokeh/bokeh/releases/tag/0.12.6"&gt;version 0.12.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/pandas.html"&gt;pandas&lt;/a&gt; data structures and analysis library, 
  &lt;a href="https://github.com/pandas-dev/pandas/releases/tag/v0.20.3"&gt;version 0.20.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt;, which come
  packaged with Python 3, to install and isolate the Bottle, Bokeh,
  and pandas libraries from other Python projects you are working on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need help getting your 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; configured
before running this code, take a look at
&lt;a href="/blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;this guide for setting up Python 3 and Bottle on Ubuntu 16.04 LTS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All code in this blog post is available open source under the MIT license 
on GitHub under the 
&lt;a href="https://github.com/fullstackpython/blog-code-examples"&gt;bar-charts-bokeh-bottle-python-3 directory of the blog-code-examples repository&lt;/a&gt;. 
Use the source code as you want to for your own projects.&lt;/p&gt;
&lt;h2&gt;Installing Bottle and Bokeh&lt;/h2&gt;
&lt;p&gt;Create a new virtual environment for this project to isolate our 
dependencies using the following command in the terminal. I usually run the 
venv command within a separate &lt;code&gt;venvs&lt;/code&gt; directory where all my virtualenvs
are store.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv bottlechart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; bottlechart/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after activating the virtualenv:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170725-bottle-bokeh-bar-charts/activate-virtualenv.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Activating our Python virtualenv for this project on the command line."&gt;&lt;/p&gt;
&lt;p&gt;Keep in mind that you need to activate the virtualenv in every new terminal 
window where you want to use the virtualenv to run the project.&lt;/p&gt;
&lt;p&gt;Bokeh and Bottle are installable into the now-activated virtualenv
using pip. Run this command to get the appropriate Bokeh and Bottle
versions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install bokeh==0.12.6 bottle==0.12.13 pandas==0.20.3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our required dependencies will be installed within our virtualenv after
a brief download and installation period.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installing collected packages: bottle, six, chardet, certifi, idna, urllib3, requests, PyYAML, python-dateutil, MarkupSafe, Jinja2, numpy, tornado, bkcharts, bokeh, pytz, pandas
  Running setup.py install for bottle ... done
  Running setup.py install for PyYAML ... done
  Running setup.py install for MarkupSafe ... done
  Running setup.py install for tornado ... done
  Running setup.py install for bkcharts ... done
  Running setup.py install for bokeh ... done
Successfully installed Jinja2-2.9.6 MarkupSafe-1.0 PyYAML-3.12 bkcharts-0.2 bokeh-0.12.6 bottle-0.12.13 certifi-2017.7.27.1 chardet-3.0.4 idna-2.5 numpy-1.13.1 pandas-0.20.3 python-dateutil-2.6.1 pytz-2017.2 requests-2.18.2 six-1.10.0 tornado-4.5.1 urllib3-1.22
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can now begin coding our web app.&lt;/p&gt;
&lt;h2&gt;Building the Bottle App&lt;/h2&gt;
&lt;p&gt;First we'll code a basic Bottle application and then we will add the
bar charts to the rendered page.&lt;/p&gt;
&lt;p&gt;Create a folder for your project named &lt;code&gt;bottle-bokeh-charts&lt;/code&gt;. Within
&lt;code&gt;bottle-bokeh-charts&lt;/code&gt; create a new file named &lt;code&gt;app.py&lt;/code&gt; with the following
code: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;TEMPLATE_STRING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;lt;title&amp;gt;Bar charts with Bottle and Bokeh&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;lt;h1&amp;gt;Bugs found over the past {{ bars_count }} days&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;lt;num_bars:int&amp;gt;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_bars&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Returns a simple template stating the number of bars that should&lt;/span&gt;
&lt;span class="sd"&gt;    be generated when the rest of the function is complete.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num_bars&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_bars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bars_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num_bars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reloader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code shown above provides a short &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; application
with a single route, defined with the &lt;code&gt;chart&lt;/code&gt; function. &lt;code&gt;chart&lt;/code&gt; receives
an arbitrary integer value as input. The &lt;code&gt;template&lt;/code&gt; function within 
&lt;code&gt;chart&lt;/code&gt; uses the HTML template defined in &lt;code&gt;TEMPLATE_STRING&lt;/code&gt; to render
an HTML page as a response to incoming requests.&lt;/p&gt;
&lt;p&gt;The last two lines in the allow us to run the Bottle application 
in debug mode on port 8000. 
&lt;strong&gt;Never use debug mode for production deployments!&lt;/strong&gt;
&lt;a href="/wsgi-servers.html"&gt;WSGI servers&lt;/a&gt; like 
&lt;a href="/green-unicorn-gunicorn.html"&gt;Gunicorn&lt;/a&gt; are built for handling real
traffic and will be easier to configure without major security
holes.&lt;/p&gt;
&lt;p&gt;We can now test out our application.&lt;/p&gt;
&lt;p&gt;Make sure your virtualenv is still activated and that you are in the 
base directory of your project where &lt;code&gt;app.py&lt;/code&gt; is located. Run &lt;code&gt;app.py&lt;/code&gt;
using the &lt;code&gt;python&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(bottlechart)$ python app.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go to &lt;a href="http://localhost:8000/16/"&gt;localhost:8000/16/&lt;/a&gt; in your web browser.
You should see a header message about the number of bugs found over the
past 16 days. However, there's no bar chart to accompany that message
just yet.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170725-bottle-bokeh-bar-charts/basic-app-no-chart.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="A simple Bottle app without the bar chart."&gt;&lt;/p&gt;
&lt;p&gt;Our single Bottle route is in place but it is not very exciting. Time
to create a nice-looking bar chart.&lt;/p&gt;
&lt;h2&gt;Creating A Bar Chart with Bokeh&lt;/h2&gt;
&lt;p&gt;We'll build on our basic Bottle app foundation using some new Python code 
to engage the &lt;a href="/bokeh.html"&gt;Bokeh&lt;/a&gt; library. &lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;app.py&lt;/code&gt; back up and add the following highlighted import lines.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HoverTool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FactorRange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Plot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LinearAxis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;                          &lt;span class="n"&gt;Range1d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.models.glyphs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;VBar&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.plotting&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.charts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bar&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.embed&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.models.sources&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ColumnDataSource&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The rest of our application will use these imports to generate random
data and the bar chart.&lt;/p&gt;
&lt;p&gt;Our bar chart will have "software bugs found" for its theme. The data will
randomly generate each time the page is generated. In a real application
you would of course likely have a more stable and useful data source.&lt;/p&gt;
&lt;p&gt;Continue modifying &lt;code&gt;app.py&lt;/code&gt; so the section after the imports looks like
the following code. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;TEMPLATE_STRING&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;lt;title&amp;gt;Bar charts with Bottle and Bokeh&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;~~  &amp;lt;link href=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-0.12.6.min.css&amp;quot; &lt;/span&gt;
&lt;span class="s2"&gt;~~        rel=&amp;quot;stylesheet&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;~~  &amp;lt;link href=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.6.min.css&amp;quot; &lt;/span&gt;
&lt;span class="s2"&gt;~~        rel=&amp;quot;stylesheet&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;lt;h1&amp;gt;Bugs found over the past {{ bars_count }} days&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;~~  {{ !the_div }}&lt;/span&gt;
&lt;span class="s2"&gt;~~  &amp;lt;script src=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-0.12.6.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;~~  &amp;lt;script src=&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.6.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;~~  {{ !the_script }}&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;


&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;lt;num_bars:int&amp;gt;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num_bars&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Returns a simple template stating the number of bars that should&lt;/span&gt;
&lt;span class="sd"&gt;    be generated when the rest of the function is complete.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;num_bars&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;num_bars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bugs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;costs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]}&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num_bars&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;days&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bugs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;costs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1000.00&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;hover&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_hover_tool&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;plot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_bar_chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bugs found per day&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;                            &lt;span class="s2"&gt;&amp;quot;bugs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hover&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TEMPLATE_STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bars_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num_bars&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;                    &lt;span class="n"&gt;the_div&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_script&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;chart&lt;/code&gt; function gains three new lists that are randomly generated by 
&lt;a href="https://docs.python.org/3/library/random.html"&gt;Python 3's super-handy random module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chart&lt;/code&gt; calls two functions, &lt;code&gt;create_hover_tool&lt;/code&gt; and &lt;code&gt;create_bar_chart&lt;/code&gt;.
We haven't written those functions yet, so let's do that now. Add these
two new functions below the &lt;code&gt;chart&lt;/code&gt; function, but before the 
&lt;code&gt;if __name__ == '__main__':&lt;/code&gt; line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_hover_tool&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# we&amp;#39;ll code this function in a moment&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_bar_chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hover_tool&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Creates a bar chart plot with the exact styling for the centcom&lt;/span&gt;
&lt;span class="sd"&gt;       dashboard. Pass in data as a dictionary, desired plot title,&lt;/span&gt;
&lt;span class="sd"&gt;       name of x axis, y axis and the hover tool HTML.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ColumnDataSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;xdr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FactorRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x_name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;ydr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Range1d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y_name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hover_tool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hover_tool&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;

    &lt;span class="n"&gt;plot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x_range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;xdr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ydr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plot_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;plot_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h_symmetry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v_symmetry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;min_border&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;toolbar_location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;above&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;responsive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outline_line_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#666666&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;glyph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VBar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;fill_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#6599ed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_glyph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;glyph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;xaxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinearAxis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;yaxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinearAxis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dimension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ticker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dimension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ticker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_border_top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xgrid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid_line_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ygrid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid_line_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#999999&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bugs found&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ygrid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid_line_alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Days after app deployment&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;major_label_orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That's a lot of new code. The &lt;code&gt;create_hover_tool&lt;/code&gt; function does not do 
anything just yet other than returning.  &lt;code&gt;None&lt;/code&gt;, which is used when no
hover tool is desired for the graph.&lt;/p&gt;
&lt;p&gt;Within the &lt;code&gt;create_bar_chart&lt;/code&gt; function we take in our randomly-generated 
data source and convert it into a &lt;code&gt;ColumnDataSource&lt;/code&gt; object that is one 
type of input object we can pass to Bokeh functions. We specify two ranges 
for the chart's x and y axes.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;tools&lt;/code&gt; list will remain empty because we do not yet have a hover tool.
A lot of the magic happens in the lines where we create &lt;code&gt;plot&lt;/code&gt; using the 
&lt;code&gt;figure&lt;/code&gt; function. We specify all the parameters we want our graph to have
such as the size, toolbar, borders and whether or not the graph should be
responsive upon changing the web browser size.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;VBar&lt;/code&gt; object creates vertical bars to add them to the plot with
the &lt;code&gt;add_glyph&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;The last lines of the function change the graph's appearance. For
example, we took away the &lt;code&gt;Bokeh&lt;/code&gt; logo by specifying 
&lt;code&gt;plot.toolbar.logo = None&lt;/code&gt; and added labels to both axes. I recommend 
keeping the 
&lt;a href="http://bokeh.pydata.org/en/latest/docs/reference/plotting.html#bokeh-plotting"&gt;bokeh.plotting&lt;/a&gt;
documentation open so you know what your options are for customizing the
charts and visualizations.&lt;/p&gt;
&lt;p&gt;Let's test our app by trying a 6-bar chart. The Bottle app should 
automatically reload when you save &lt;code&gt;app.py&lt;/code&gt; with the new code. If you shut 
down the development server, start it back up using &lt;code&gt;python app.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When you start up the development server you will receive the following 
warning because we are using the latest (at the time of this writing) 0.12.6 
Bokeh release. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/Users/matt/Envs/bottlechart/lib/python3.6/site-packages/bokeh/util/deprecation.py:34: BokehDeprecationWarning: 
The bokeh.charts API has moved to a separate &amp;#39;bkcharts&amp;#39; package.

This compatibility shim will remain until Bokeh 1.0 is released.
After that, if you want to use this API you will have to install
the bkcharts package explicitly.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Eventually a separate &lt;code&gt;bkcharts&lt;/code&gt; project will be required but for now 
we can keep our code as is.&lt;/p&gt;
&lt;p&gt;Open your browser to &lt;a href="http://localhost:8000/6/"&gt;localhost:8000/6/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170725-bottle-bokeh-bar-charts/chart-example-6.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Responsive Bokeh bar chart with 6 bars."&gt;&lt;/p&gt;
&lt;p&gt;That one looks a bit sparse, so we can crank it up by 3x to 18 bars
by going to &lt;a href="http://localhost:5000/18/"&gt;localhost:5000/18/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170725-bottle-bokeh-bar-charts/chart-example-18.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Responsive Bokeh bar chart with 18 bars."&gt;&lt;/p&gt;
&lt;p&gt;Now another 5x to 90 bars with 
&lt;a href="http://localhost:8000/90/"&gt;localhost:5000/90/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170725-bottle-bokeh-bar-charts/chart-example-90.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Responsive Bokeh bar chart with 90 bars."&gt;&lt;/p&gt;
&lt;p&gt;Looking good so far! What about that hover tool we skipped over though?
We can add the hover tool with just a few more lines of code in the 
&lt;code&gt;create_hover_tool&lt;/code&gt; function.&lt;/p&gt;
&lt;h2&gt;Creating a Hover Tool&lt;/h2&gt;
&lt;p&gt;Add these highlighted lines to &lt;code&gt;app.py&lt;/code&gt; within the &lt;code&gt;create_hover_tool&lt;/code&gt;
function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_hover_tool&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;Generates the HTML for the Bokeh&amp;#39;s hover data tool on our graph.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;hover_html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;~~      &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;~~        &amp;lt;span class=&amp;quot;hover-tooltip&amp;quot;&amp;gt;$x&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;~~      &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;~~      &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;~~        &amp;lt;span class=&amp;quot;hover-tooltip&amp;quot;&amp;gt;@bugs bugs&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;~~      &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;~~      &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;~~        &amp;lt;span class=&amp;quot;hover-tooltip&amp;quot;&amp;gt;$@costs{0.00}&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;~~      &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;~~    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HoverTool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tooltips&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hover_html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Embedding HTML within your Python application isn't usually a great
idea but it works for small snippets like this hover tool.
The hover tool uses &lt;code&gt;$x&lt;/code&gt; to show the bar's x axis, &lt;code&gt;@bugs&lt;/code&gt; to show the 
"bugs" field from our data source, and &lt;code&gt;$@costs{0.00}&lt;/code&gt; to show the "costs" 
field formatted as a dollar amount with exactly 2 decimal places.&lt;/p&gt;
&lt;p&gt;Ensure that you changed &lt;code&gt;return None&lt;/code&gt; to 
&lt;code&gt;return HoverTool(tooltips=hover_html)&lt;/code&gt; in your function so the results of 
the new code are reflected in the refreshed graph.&lt;/p&gt;
&lt;p&gt;Go back to the browser and reload the 
&lt;a href="http://localhost:8000/122"&gt;localhost:8000/122/&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170725-bottle-bokeh-bar-charts/chart-example-122.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Responsive Bokeh bar chart with 122 bars."&gt;&lt;/p&gt;
&lt;p&gt;Well done! Try playing around with the number of bars in the URL and the
window size to see what the graph looks like under different conditions.&lt;/p&gt;
&lt;p&gt;The chart gets crowded with more than 100. However, you can try to create
as many bars as you want if your computer can handle the rendering.
This screenshot shows what the completely impractical amount of 40,000
bars looks like:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170725-bottle-bokeh-bar-charts/chart-example-40000.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Responsive Bokeh bar chart with 40000 bars."&gt;&lt;/p&gt;
&lt;p&gt;You may need to do some more work to get the chart to be useful for displaying
more than a couple hundred bars at a time.&lt;/p&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;We created a nice little configurable bar chart using the Bokeh code library. &lt;/p&gt;
&lt;p&gt;Next you can change the input data source, work with other types of charts
or modify the chart color scheme.&lt;/p&gt;
&lt;p&gt;There is a lot more than Bokeh can do. Take a look at the 
&lt;a href="http://bokeh.pydata.org/en/latest/"&gt;official project documentation&lt;/a&gt; , 
&lt;a href="https://github.com/bokeh/bokeh"&gt;GitHub repository&lt;/a&gt;, 
the &lt;a href="/bokeh.html"&gt;Full Stack Python Bokeh page&lt;/a&gt; or take a look at 
&lt;a href="/table-of-contents.html"&gt;other topics on Full Stack Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Questions? Let me know via 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;a GitHub issue ticket on the Full Stack Python repository&lt;/a&gt;, 
on Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Do you see something wrong in this blog post? Fork
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170725-bar-charts-bottle-bokeh.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request with a fix.&lt;/p&gt;</summary></entry><entry><title>如何将托管监视添加到 Flask Web 应用程序</title><link href="https://www.fullstackpython.com/blog/hosted-monitoring-flask-web-apps.html" rel="alternate"></link><published>2017-07-23T00:00:00-04:00</published><updated>2017-07-23T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-07-23:blog/hosted-monitoring-flask-web-apps.html</id><summary type="html">&lt;p&gt;How do you know whether your application is running properly with minimal 
errors after &lt;a href="/web-development.html"&gt;building&lt;/a&gt; and 
&lt;a href="/deployment.html"&gt;deploying&lt;/a&gt; it? The fastest and easiest way
to monitor your operational &lt;a href="/flask.html"&gt;Flask web application&lt;/a&gt; is to 
integrate one of the many available fantastic hosted 
&lt;a href="/monitoring.html"&gt;monitoring&lt;/a&gt; tools.&lt;/p&gt;
&lt;p&gt;In this post we will quickly add &lt;a href="https://rollbar.com"&gt;Rollbar monitoring&lt;/a&gt;
to catch errors and visualize our application is running properly. There
are also many other great hosted monitoring tools, which you can check
out on the &lt;a href="/monitoring.html"&gt;monitoring&lt;/a&gt; page.&lt;/p&gt;
&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;We can use either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt; to build this
tutorial, but Python 3 is &lt;em&gt;strongly&lt;/em&gt; recommended for all new applications. 
I used 
&lt;a href="https://www.python.org/downloads/release/python-362/"&gt;Python 3.6.2&lt;/a&gt; to 
execute my code. We will also use the following 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt; throughout
the post: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/flask.html"&gt;Flask&lt;/a&gt; web framework, 
  &lt;a href="https://github.com/pallets/flask/releases/tag/0.12.2"&gt;version 0.12.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rollbar.com/docs/notifier/pyrollbar/"&gt;pyrollbar&lt;/a&gt; monitoring 
  instrumentation library,
  &lt;a href="https://github.com/rollbar/pyrollbar/tree/v0.13.12"&gt;version 0.13.12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/blinker"&gt;blinker&lt;/a&gt; for signaling support
  in Flask applications so pyrollbar can report on all errors&lt;/li&gt;
&lt;li&gt;A &lt;a href="https://rollbar.com/"&gt;free Rollbar account&lt;/a&gt; where we will send error
  data and view it when it is captured&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and the 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; virtual environment
  library, which come packaged with Python 3, to install and isolate the 
  Flask and Rollbar libraries from other Python projects you are working on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need help getting your 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; configured
before running this code, take a look at
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;this guide for setting up Python 3 and Flask on Ubuntu 16.04 LTS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;All code in this blog post is available open source under the MIT license 
on GitHub under the 
&lt;a href="https://github.com/fullstackpython/blog-code-examples"&gt;monitor-flask-apps directory of the blog-code-examples repository&lt;/a&gt;. 
Use and abuse the source code as you desire for your own applications.&lt;/p&gt;
&lt;h2&gt;Installing Dependencies&lt;/h2&gt;
&lt;p&gt;Change into the directory where you keep your Python virtualenvs. 
Create a new virtual environment for this project using the following
command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv monitorflask
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; monitorflask/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after activating the virtualenv:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170723-monitor-flask-apps/activate-virtualenv.png" width="100%" class="shot rnd outl" alt="Activating our Python virtual environment on the command line."&gt;&lt;/p&gt;
&lt;p&gt;Remember that you need to activate the virtualenv in every new terminal 
window where you want to use the virtualenv to run the project.&lt;/p&gt;
&lt;p&gt;Flask, Rollbar and Blinker can now be installed into the now-activated 
virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install flask==0.12.2 rollbar==0.13.12 blinker==1.4
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our required dependencies should be installed within our virtualenv 
after a short installation period. Look for output like the following to 
confirm everything worked.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installing collected packages: blinker, itsdangerous, click, MarkupSafe, Jinja2, Werkzeug, Flask, idna, urllib3, chardet, certifi, requests, six, rollbar
  Running setup.py install for blinker ... done
  Running setup.py install for itsdangerous ... done
  Running setup.py install for MarkupSafe ... done
  Running setup.py install for rollbar ... done
Successfully installed Flask-0.12.2 Jinja2-2.9.6 MarkupSafe-1.0 Werkzeug-0.12.2 blinker-1.4 certifi-2017.4.17 chardet-3.0.4 click-6.7 idna-2.5 itsdangerous-0.24 requests-2.18.1 rollbar-0.13.12 six-1.10.0 urllib3-1.21.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that we have our Python dependencies installed into our virtualenv
we can create the initial version of our application.&lt;/p&gt;
&lt;h2&gt;Building Our Flask App&lt;/h2&gt;
&lt;p&gt;Create a folder for your project named &lt;code&gt;monitor-flask-apps&lt;/code&gt;. Change into
the folder and then create a file named &lt;code&gt;app.py&lt;/code&gt; with the following
code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;werkzeug.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NotFound&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MIN_PAGE_NAME_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;lt;string:page&amp;gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;valid_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;MIN_PAGE_NAME_LENGTH&lt;/span&gt;
        &lt;span class="n"&gt;valid_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^[a-z]+$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;valid_length&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;valid_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{}.html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sorry, couldn&amp;#39;t find page with name {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;404 Not Found&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above application code has some standard Flask imports so we can
create a Flask web app and render template files. We have a single
function named &lt;code&gt;show_page&lt;/code&gt; to serve a single Flask route. &lt;code&gt;show_page&lt;/code&gt;
checks if the URL path contains only lowercase alpha characters for a
potential page name. If the page name can be found in the &lt;code&gt;templates&lt;/code&gt;
folder then the page is rendered, otherwise an exception is thrown
that the page could not be found. We need to create at least one template
file if our function is ever going to return a non-error reponse.&lt;/p&gt;
&lt;p&gt;Save &lt;code&gt;app.py&lt;/code&gt; and make a new subdirectory named &lt;code&gt;templates&lt;/code&gt; under your
project directory. Create a new file named &lt;code&gt;battlegrounds.html&lt;/code&gt; and put
the following &lt;a href="/jinja2.html"&gt;Jinja2&lt;/a&gt; template markup into it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;You found the Battlegrounds GIF!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;PUBG so good.&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;img&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://media.giphy.com/media/3ohzdLMlhId2rJuLUQ/giphy.gif&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above &lt;a href="/jinja2.html"&gt;Jinja2&lt;/a&gt; template is basic HTML without any
&lt;a href="http://jinja.pocoo.org/docs/latest/templates/"&gt;embedded template tags&lt;/a&gt;. 
The template creates a very plain page with a header description of
"PUBG so good" and a GIF from this
&lt;a href="http://store.steampowered.com/app/578080/PLAYERUNKNOWNS_BATTLEGROUNDS/"&gt;excellent computer game&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Time to run and test our code. Change into the base directory of your
project where &lt;code&gt;app.py&lt;/code&gt; file is located. Execute &lt;code&gt;app.py&lt;/code&gt; using the &lt;code&gt;python&lt;/code&gt;
command as follows (make sure your virtualenv is still activated in the
terminal where you are running this command):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python app.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Flask development server should start up and display a few lines
of output.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170723-monitor-flask-apps/python-app-py.png" width="100%" class="shot rnd outl" alt="Run the Flask development server locally."&gt;&lt;/p&gt;
&lt;p&gt;What happens when we access the application running on 
&lt;a href="http://localhost:5000"&gt;localhost port 5000&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170723-monitor-flask-apps/localhost-base-url.png" width="100%" class="shot rnd outl" alt="Testing our Flask application at the base URL receives an HTTP 404 error."&gt;&lt;/p&gt;
&lt;p&gt;HTTP status 404 page not found, which is what we expected because we only
defined a single route and it did not live at the base path.&lt;/p&gt;
&lt;p&gt;We created a template named &lt;code&gt;battlegrounds.html&lt;/code&gt; that should be accessible
when we go to 
&lt;a href="http://localhost:5000/battlegrounds/"&gt;localhost:5000/battlegrounds/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170723-monitor-flask-apps/localhost-pubg-gif.jpg" width="100%" class="shot rnd outl" alt="Testing our Flask application at /battlegrounds/ gets the proper template with a GIF."&gt;&lt;/p&gt;
&lt;p&gt;The application successfully found the &lt;code&gt;battlegrounds.html&lt;/code&gt; template but
that is the only one available. What if we try 
&lt;a href="http://localhost:5000/fullstackpython/"&gt;localhost:5000/fullstackpython/&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170723-monitor-flask-apps/localhost-no-template.jpg" width="100%" class="shot rnd outl" alt="If no template is found we receive a 500 error."&gt;&lt;/p&gt;
&lt;p&gt;HTTP 500 error. That's no good.&lt;/p&gt;
&lt;p&gt;The 404 and 500 errors are obvious to us right now because we are 
testing the application locally. However, what happens when the app is 
deployed and a user gets the error in their own web browser? They will 
typically quit out of frustration and you will never know what happened 
unless you add some error tracking and application monitoring.&lt;/p&gt;
&lt;p&gt;We will now modify our code to add Rollbar to catch and report those
errors that occur for our users.&lt;/p&gt;
&lt;h2&gt;Handling Errors&lt;/h2&gt;
&lt;p&gt;Head to &lt;a href="https://rollbar.com/"&gt;Rollbar's homepage&lt;/a&gt; so we can add their
hosted monitoring tools to our oft-erroring Flask app.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170723-monitor-flask-apps/rollbar-homepage.jpg" width="100%" class="shot rnd outl" alt="Rollbar homepage in the web browser."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Sign Up" button in the upper right-hand corner. Enter your 
email address, a username and the password you want on the sign up page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170723-monitor-flask-apps/sign-up.jpg" width="100%" class="shot rnd outl" alt="Enter your basic account information on the sign up page."&gt;&lt;/p&gt;
&lt;p&gt;After the sign up page you will see the onboarding flow where you can
enter a project name and select a programming language. For project
name enter "Battlegrounds" and select that you are monitoring a Python app.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170723-monitor-flask-apps/create-new-project.jpg" width="100%" class="shot rnd outl" alt="Create a new project named 'Battlegrounds' and select Python as the programming language."&gt;&lt;/p&gt;
&lt;p&gt;Press the "Continue" button at the bottom to move along. The next
screen shows us a few quick instructions to add monitoring to our Flask
application.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170723-monitor-flask-apps/project-setup.jpg" width="100%" class="shot rnd outl" alt="Set up your project using your server-side access token."&gt;&lt;/p&gt;
&lt;p&gt;Let's modify our Flask application to test whether we can properly connect
to Rollbar's service. Change &lt;code&gt;app.py&lt;/code&gt; to include the following highlighted
lines. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;rollbar&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;werkzeug.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NotFound&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MIN_PAGE_NAME_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;


&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="nd"&gt;@app.before_first_request&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_monitoring&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;rollbar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ROLLBAR_SECRET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;rollbar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Rollbar is configured correctly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;lt;string:page&amp;gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;valid_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;MIN_PAGE_NAME_LENGTH&lt;/span&gt;
        &lt;span class="n"&gt;valid_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^[a-z]+$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;valid_length&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;valid_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{}.html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sorry, couldn&amp;#39;t find page with name {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;404 Not Found&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We added a couple of new imports, &lt;code&gt;os&lt;/code&gt; and &lt;code&gt;rollbar&lt;/code&gt;. &lt;code&gt;os&lt;/code&gt; allows us to
grab environment variable values, such as our Rollbar secret key. &lt;code&gt;rollbar&lt;/code&gt;
is the library we installed earlier. The two lines below the Flask app
instantiation are to initialize Rollbar using the Rollbar secret token and
send a message to the service that it started correctly.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ROLLBAR_SECRET&lt;/code&gt; token needs to be set in an environment variable.
Save an quit the &lt;code&gt;app.py&lt;/code&gt;. Run &lt;code&gt;export ROLLBAR_SECRET='token here'&lt;/code&gt; on the
command line where your virtualenv is activated. This token can be found
on the Rollbar onboarding screen. &lt;/p&gt;
&lt;p&gt;I typically store all my environment variables in a file like 
&lt;a href="https://github.com/fullstackpython/blog-code-examples/blob/master/monitor-flask-apps/template.env"&gt;template.env&lt;/a&gt; and invoke it from the terminal using
the &lt;code&gt;. ./template.env&lt;/code&gt; command. Make sure to avoid committing your secret
tokens to a source control repository, especially if the repository is 
public!&lt;/p&gt;
&lt;p&gt;After exporting your &lt;code&gt;ROLLBAR_SECRET&lt;/code&gt; key as an environment variable
we can test that Rollbar is working as we run our application. Run it
now using &lt;code&gt;python&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python app.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Back in your web browser press the "Done! Go to Dashboard" button. Don't 
worry about the "Report an Error" section code, we can get back to that in a 
moment.&lt;/p&gt;
&lt;p&gt;If the event hasn't been reported yet we'll see a waiting screen like this
one:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170723-monitor-flask-apps/waiting.jpg" width="100%" class="shot rnd outl" alt="Waiting for data on the dashboard."&gt;&lt;/p&gt;
&lt;p&gt;Once Flask starts up though, the first event will be populated on the 
dashboard.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170723-monitor-flask-apps/first-event.jpg" width="100%" class="shot rnd outl" alt="First event populated on our dashboard for this project."&gt;&lt;/p&gt;
&lt;p&gt;Okay, our first test event has been populated, but we really want to see
all the errors from our application, not a test event.&lt;/p&gt;
&lt;h2&gt;Testing Error Handling&lt;/h2&gt;
&lt;p&gt;How do we make sure real errors are reported rather than just a simple
test event? We just need to add a few more lines of code to our app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;rollbar&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;rollbar.contrib.flask&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;got_request_exception&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;werkzeug.exceptions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;NotFound&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;MIN_PAGE_NAME_LENGTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;


&lt;span class="nd"&gt;@app.before_first_request&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_monitoring&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;rollbar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ROLLBAR_SECRET&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="c1"&gt;## delete the next line if you dont want this event anymore&lt;/span&gt;
    &lt;span class="n"&gt;rollbar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Rollbar is configured correctly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;    &lt;span class="n"&gt;got_request_exception&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rollbar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contrib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flask&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_exception&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;lt;string:page&amp;gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;show_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;valid_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;MIN_PAGE_NAME_LENGTH&lt;/span&gt;
        &lt;span class="n"&gt;valid_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^[a-z]+$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;valid_length&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;valid_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{}.html&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sorry, couldn&amp;#39;t find page with name {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;NotFound&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;~~&lt;/span&gt;        &lt;span class="n"&gt;rollbar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;report_exc_info&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;404 Not Found&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above highlighted code modifies the application so it reports all Flask
errors as well as our HTTP 404 not found issues that happen within the
&lt;code&gt;show_page&lt;/code&gt; function. &lt;/p&gt;
&lt;p&gt;Make sure your Flask development server is running and try to go to 
&lt;a href="http://localhost:5000/b/"&gt;localhost:5000/b/&lt;/a&gt;. You will receive an HTTP
404 exception and it will be reported to Rollbar. Next go to 
&lt;a href="http://localhost:5000/fullstackpython/"&gt;localhost:5000/fullstackpython/&lt;/a&gt; and 
an HTTP 500 error will occur.&lt;/p&gt;
&lt;p&gt;You should see an aggregation of errors as you test out these errors:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170723-monitor-flask-apps/error-aggregation.jpg" width="100%" class="shot rnd outl" alt="Rollbar dashboard showing aggregations of errors."&gt;&lt;/p&gt;
&lt;p&gt;Woohoo, we finally have our Flask app reporting all errors that occur
for any user back to the hosted Rollbar monitoring service!&lt;/p&gt;
&lt;h2&gt;What's Next?&lt;/h2&gt;
&lt;p&gt;We just learned how to catch and handle errors with Rollbar as a hosted
monitoring platform in a simple Flask application. Next you will want to 
add monitoring to your more complicated web apps. You can also check out 
some of Rollbar's more advanced features such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://rollbar.com/docs/deploy-tracking/"&gt;tracking and debugging deployment issues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rollbar.com/docs/person-tracking/"&gt;sorting and viewing errors by user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://rollbar.com/docs/custom-grouping/"&gt;setting up custom rules to group errors&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a lot more to learn about &lt;a href="/web-development.html"&gt;web development&lt;/a&gt;
and &lt;a href="/deployments.html"&gt;deployments&lt;/a&gt; so keep learning by reading up on 
&lt;a href="/flask.html"&gt;Flask&lt;/a&gt; and other &lt;a href="/web-frameworks.html"&gt;web frameworks&lt;/a&gt; 
such as &lt;a href="/django.html"&gt;Django&lt;/a&gt;, &lt;a href="/pyramid.html"&gt;Pyramid&lt;/a&gt; and 
&lt;a href="/sanic.html"&gt;Sanic&lt;/a&gt;. You can also learn more about integrating Rollbar
with Python applications via 
&lt;a href="https://rollbar.com/docs/notifier/pyrollbar/"&gt;their Python documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Questions? Let me know via 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;a GitHub issue ticket on the Full Stack Python repository&lt;/a&gt;, 
on Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this blog post? Fork
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170723-monitor-flask-apps.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request with a fix.&lt;/p&gt;</summary></entry><entry><title>如何使用 Pelican 和 Jinja2 创建你的第一个静态站点</title><link href="https://www.fullstackpython.com/blog/generating-static-websites-pelican-jinja2-markdown.html" rel="alternate"></link><published>2017-06-09T00:00:00-04:00</published><updated>2017-06-09T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-06-09:blog/generating-static-websites-pelican-jinja2-markdown.html</id><summary type="html">&lt;p&gt;&lt;a href="/pelican.html"&gt;Pelican&lt;/a&gt; is an incredibly well-built Python tool for 
&lt;a href="/static-site-generator.html"&gt;creating static sites&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt; is generated with 
Pelican, &lt;a href="/jinja2.html"&gt;Jinja2 templates&lt;/a&gt; and &lt;a href="/markdown.html"&gt;Markdown&lt;/a&gt;.
This site is deployed to Amazon S3 and currently handles over one hundred 
thousand readers per month. There are never scaling concerns because a static
site is pre-generated before deployment and a web server simply responds
with existing files rather than executing any code on the server during
the HTTP request-response cycle.&lt;/p&gt;
&lt;p&gt;In this tutorial you will learn how to create your own
&lt;a href="/static-site-generator.html"&gt;static website&lt;/a&gt; from scratch using 
&lt;a href="/pelican.html"&gt;Pelican&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170609-static-sites-pelican/gunship-bootstrap-css.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Articles page after Bootstrap CSS has been added."&gt;&lt;/p&gt;
&lt;p&gt;Our simple static site will have pages that look like the above screenshot
but the entire site can be easily customized and expanded with your own design 
and content.&lt;/p&gt;
&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;This tutorial should work with either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt;, 
but Python 3 is strongly recommended for all new applications. I used
&lt;a href="https://www.python.org/downloads/release/python-361/"&gt;Python 3.6.1&lt;/a&gt; to 
write this post. In addition to Python, throughout this tutorial we 
will also use the following 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/pelican.html"&gt;Pelican&lt;/a&gt; 
  &lt;a href="/static-site-generator.html"&gt;static site generator&lt;/a&gt;, 
  &lt;a href="https://github.com/getpelican/pelican/releases/tag/3.7.1"&gt;version 3.7.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/markdown.html"&gt;Markdown&lt;/a&gt; parsing library to handle Markdown as a content 
  input format, version 
  &lt;a href="https://github.com/waylan/Python-Markdown/releases/tag/2.6.8-final"&gt;2.6.8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/jinja2.html"&gt;Jinja2&lt;/a&gt;, a Python &lt;a href="/template-engines.html"&gt;template engine&lt;/a&gt;, 
  version &lt;a href="https://github.com/pallets/jinja/releases/tag/2.9.6"&gt;2.9.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt;, which come
  packaged with Python 3, to install and isolate the Pelican, Markdown,
  and Jinja2 libraries from any of your other Python projects&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need help getting your 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; configured, take a 
look at
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;this guide for setting up Python 3 and Flask on Ubuntu 16.04 LTS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All code in this blog post is available open source under the MIT license 
on GitHub under the 
&lt;a href="https://github.com/fullstackpython/blog-code-examples/tree/master/generating-static-websites-pelican-jinja2-markdown"&gt;generating-static-websites-pelican-jinja2-markdown directory of the blog-code-examples repository&lt;/a&gt;.
Use and abuse the source code as you like for your own applications.&lt;/p&gt;
&lt;h2&gt;Install the Pelican and Markdown libraries&lt;/h2&gt;
&lt;p&gt;Start by creating a new virtual environment for your project. My virtualenv
is named &lt;code&gt;staticsite&lt;/code&gt; but you can name yours whatever matches the project 
you are creating.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv staticsite
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source staticsite/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The virtualenv will prepend its name to your command prompt when it is
activated.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170609-static-sites-pelican/activate-virtualenv.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Create and activate the Python virtual environment."&gt;&lt;/p&gt;
&lt;p&gt;Install the appropriate dependencies after your virtualenv is activated. 
Use the &lt;code&gt;pip&lt;/code&gt; command to install Pelican and Markdown, which will also 
install Jinja2 because Pelican specifies it as a dependency.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install &lt;span class="nv"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;.7.1 &lt;span class="nv"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;.6.8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run the &lt;code&gt;pip&lt;/code&gt; command and after everything is installed you should see output
similar to the following "Successfully installed" message.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installing collected packages: pygments, pytz, six, feedgenerator, blinker, unidecode, MarkupSafe, jinja2, python-dateutil, docutils, pelican, markdown
  Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; feedgenerator ... &lt;span class="k"&gt;done&lt;/span&gt;
  Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; blinker ... &lt;span class="k"&gt;done&lt;/span&gt;
  Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; MarkupSafe ... &lt;span class="k"&gt;done&lt;/span&gt;
  Running setup.py install &lt;span class="k"&gt;for&lt;/span&gt; markdown ... &lt;span class="k"&gt;done&lt;/span&gt;
Successfully installed MarkupSafe-1.0 blinker-1.4 docutils-0.13.1 feedgenerator-1.9 jinja2-2.9.6 markdown-2.6.8 pelican-3.7.1 pygments-2.2.0 python-dateutil-2.6.0 pytz-2017.2 six-1.10.0 unidecode-0.4.20
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that our dependencies are installed into the virtualenv we can start 
building our static site.&lt;/p&gt;
&lt;h2&gt;Generate a Basic Site&lt;/h2&gt;
&lt;p&gt;Create a new directory to store your project. My site will contain some of 
my favorite &lt;a href="https://www.youtube.com/watch?v=uYRZV8dV10w"&gt;retro synthwave&lt;/a&gt; 
artists as examples, but of course your site can contain whatever subjects 
that you want.&lt;/p&gt;
&lt;p&gt;Change into the project directory after creating it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir retrosynth
cd retrosynth
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Run the &lt;code&gt;pelican-quickstart&lt;/code&gt; command within the new project directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The quickstart script will rattle off a bunch of questions. Follow
along with the answers below or modify them for your own site name and
desired configuration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Welcome to pelican-quickstart v3.7.1.

This script will &lt;span class="nb"&gt;help&lt;/span&gt; you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.


&amp;gt; Where &lt;span class="k"&gt;do&lt;/span&gt; you want to create your new web site? &lt;span class="o"&gt;[&lt;/span&gt;.&lt;span class="o"&gt;]&lt;/span&gt;  
&amp;gt; What will be the title of this web site? RetroSynthwave
&amp;gt; Who will be the author of this web site? Matt Makai
&amp;gt; What will be the default language of this web site? &lt;span class="o"&gt;[&lt;/span&gt;en&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to &lt;span class="nb"&gt;enable&lt;/span&gt; article pagination? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; What is your &lt;span class="nb"&gt;time&lt;/span&gt; zone? &lt;span class="o"&gt;[&lt;/span&gt;Europe/Paris&lt;span class="o"&gt;]&lt;/span&gt; America/New_York
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt;y
&amp;gt; Do you want an auto-reload &lt;span class="p"&gt;&amp;amp;&lt;/span&gt; simpleHTTP script to assist with theme and site development? &lt;span class="o"&gt;(&lt;/span&gt;Y/n&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; Do you want to upload your website using FTP? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using SSH? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using Dropbox? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using S3? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; y
&amp;gt; What is the name of your S3 bucket? &lt;span class="o"&gt;[&lt;/span&gt;my_s3_bucket&lt;span class="o"&gt;]&lt;/span&gt; 
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
&amp;gt; Do you want to upload your website using GitHub Pages? &lt;span class="o"&gt;(&lt;/span&gt;y/N&lt;span class="o"&gt;)&lt;/span&gt; n
Done. Your new project is available at /Users/matt/devel/py/retrosynth
&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What did we just create using Pelican's quickstart script? Check out
the new files in the directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;staticsite&lt;span class="o"&gt;)&lt;/span&gt; $ ls
Makefile        develop_server.sh   pelicanconf.py
content         fabfile.py          publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The quickstart created five files and one new directory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Makefile&lt;/code&gt;: &lt;code&gt;make&lt;/code&gt; command convenience tasks for common operations such as 
  running a development server, building a site and cleaning extraneous 
  build files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fabfile.py&lt;/code&gt;: A &lt;a href="http://www.fabfile.org/"&gt;Fabric&lt;/a&gt; file that has some of 
  the same types of commands as the &lt;code&gt;Makefile&lt;/code&gt;. Fabric is a wonderful code 
  library but for now I recommend skipping the Fabric file because 
  unfortunately Fabric does not yet support Python 3.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;develop_server.sh&lt;/code&gt;: shell script for running the development server&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pelicanconf.py&lt;/code&gt;: settings file for your Pelican project. If you are used
  to earlier versions of Pelican this file was instead named &lt;code&gt;settings.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;publishconf.py&lt;/code&gt;: another (optional) settings file that can be considered 
  as a "production" settings file when you move past the development phase
  and want to deploy your site&lt;/li&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt;: location for your markup files, which should be stored under
  &lt;code&gt;pages&lt;/code&gt; and &lt;code&gt;posts&lt;/code&gt; directories&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can use these files as the base for our new static site. Let's see what
it looks like by default by running it via the &lt;code&gt;devserver&lt;/code&gt; task in the 
Makefile.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make devserver
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Pelican development server will start serving up your site with a 
daemon process. Go to &lt;a href="http://localhost:8000"&gt;localhost:8000&lt;/a&gt; in your web 
browser and you will see the first version of your static site.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170609-static-sites-pelican/default-style.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Default styling on the Pelican static site."&gt;&lt;/p&gt;
&lt;p&gt;What if you don't have &lt;code&gt;make&lt;/code&gt; installed on your system? Change into the
&lt;code&gt;output&lt;/code&gt; directory and use the &lt;code&gt;python -m http.server&lt;/code&gt; command to use the
built-in Python 3 HTTP server for your generated files.&lt;/p&gt;
&lt;p&gt;When you want to kill the development server look for a file named 
&lt;code&gt;pelican.pid&lt;/code&gt;under your project directory. The &lt;code&gt;pelican.pid&lt;/code&gt; file is created
by Pelican and contains the process ID for your development server.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite) $ cat pelican.pid 
1365
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use the &lt;code&gt;ps&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; commands to view the process then stop the process
with the &lt;code&gt;kill&lt;/code&gt; command as follows. Remember that your process ID will almost
definitely be different from the &lt;code&gt;1365&lt;/code&gt; ID for my process.&lt;/p&gt;
&lt;p&gt;Kill the development server now so that we can use different commands to 
serve our site after we create our initial content.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite) $ ps -A | grep 1365
 1365 ttys003    0:01.43 /Library/Frameworks/Python.framework/Versions/3.6/Resources/Python.app/Contents/MacOS/Python /Users/matt/Envs/staticsite/bin/pelican --debug --autoreload -r /Users/matt/devel/py/retrosynth/content -o /Users/matt/devel/py/retrosynth/output -s /Users/matt/devel/py/retrosynth/pelicanconf.py
 1411 ttys003    0:00.00 grep 1365
(staticsite) $ kill 1365
(staticsite) $ ps -A | grep 1365
 1413 ttys003    0:00.00 grep 1365
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is up to you whether you want to use the development server or not
while creating your site. Every time I want to view my changes for 
Full Stack Python I regenerate the site using my own Makefile that 
wraps the &lt;code&gt;pelican&lt;/code&gt; command. The &lt;code&gt;python -m http.server&lt;/code&gt; command constantly 
serves up each build's changes.&lt;/p&gt;
&lt;p&gt;Alright, now that we have our starter files we can get to work creating
some initial content.&lt;/p&gt;
&lt;h2&gt;Write Some Content&lt;/h2&gt;
&lt;p&gt;Pelican can accept both &lt;a href="/markdown.html"&gt;Markdown&lt;/a&gt; and reStructureText
markup files as input.&lt;/p&gt;
&lt;p&gt;Make a new subdirectory under the &lt;code&gt;content&lt;/code&gt; named &lt;code&gt;posts&lt;/code&gt;. Change into
the &lt;code&gt;posts&lt;/code&gt; directory. Create a new file named &lt;code&gt;gunship.markdown&lt;/code&gt; with
the following content.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Gunship&lt;/span&gt;
&lt;span class="nl"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gunship&lt;/span&gt;
&lt;span class="nl"&gt;category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bands&lt;/span&gt;
&lt;span class="nl"&gt;date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;
&lt;span class="nl"&gt;modified&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;09&lt;/span&gt;


&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Gunship&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.gunshipmusic.com/) is a *retro synthwave* artist out of the UK.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Revel&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;Time&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.youtube.com/watch?v=uYRZV8dV10w), &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tech&lt;/span&gt; &lt;span class="n"&gt;Noir&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.youtube.com/watch?v=-nC5TBv3sfU), &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Fly&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;Your&lt;/span&gt; &lt;span class="n"&gt;Life&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.youtube.com/watch?v=Jv1ZN8c4_Gs) &lt;/span&gt;
&lt;span class="n"&gt;and&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Mountain&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.youtube.com/watch?v=-HYRTJr8EyA) &lt;/span&gt;
&lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;all&lt;/span&gt; &lt;span class="n"&gt;quality&lt;/span&gt; &lt;span class="n"&gt;songs&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;Gunship&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Check&lt;/span&gt; &lt;span class="k"&gt;out&lt;/span&gt; &lt;span class="n"&gt;those&lt;/span&gt; &lt;span class="n"&gt;amazing&lt;/span&gt; &lt;span class="n"&gt;music&lt;/span&gt; &lt;span class="n"&gt;videos&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;

&lt;span class="n"&gt;Also&lt;/span&gt; &lt;span class="n"&gt;take&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;look&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;retro&lt;/span&gt; &lt;span class="n"&gt;synthwave&lt;/span&gt; &lt;span class="n"&gt;artists&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Trevor&lt;/span&gt; &lt;span class="n"&gt;Something&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//trevorsomething.bandcamp.com/), &lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Droid&lt;/span&gt; &lt;span class="n"&gt;Bishop&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//droidbishop.bandcamp.com/),&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;FM&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;84&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//fm84.bandcamp.com/)&lt;/span&gt;
&lt;span class="n"&gt;and&lt;/span&gt; 
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Daniel&lt;/span&gt; &lt;span class="n"&gt;Deluxe&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//danieldeluxe.bandcamp.com/).&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our &lt;code&gt;make&lt;/code&gt; file can also help us regenerate the site when changes occur
if we choose to not use the development server.&lt;/p&gt;
&lt;p&gt;We used the &lt;code&gt;devserver&lt;/code&gt; task earlier, but what other task are available 
to us via the &lt;code&gt;Makefile&lt;/code&gt;?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;make&lt;/code&gt; should show us all of the following tasks we can run.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Makefile for a pelican Web site                                           

Usage:                                                                    
   make html                           (re)generate the web site          
   make clean                          remove the generated files         
   make regenerate                     regenerate files upon modification 
   make publish                        generate using production settings 
   make serve [PORT=8000]              serve site at http://localhost:8000
   make serve-global [SERVER=0.0.0.0]  serve (as root) to :80    
   make devserver [PORT=8000]          start/restart develop_server.sh    
   make stopserver                     stop local server                  
   make ssh_upload                     upload the web site via SSH        
   make rsync_upload                   upload the web site via rsync+ssh  
   make dropbox_upload                 upload the web site via Dropbox    
   make ftp_upload                     upload the web site via FTP        
   make s3_upload                      upload the web site via S3         
   make cf_upload                      upload the web site via Cloud Files
   make github                         upload the web site via gh-pages   

Set the DEBUG variable to 1 to enable debugging, e.g. make DEBUG=1 html   
Set the RELATIVE variable to 1 to enable relative urls
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;html&lt;/code&gt; task is what we are looking for to invoke the &lt;code&gt;pelican&lt;/code&gt; command 
using our &lt;code&gt;pelicanconf.py&lt;/code&gt; settings file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(staticsite) $ make html
pelican /Users/matt/devel/py/retrosynth/content -o /Users/matt/devel/py/retrosynth/output -s /Users/matt/devel/py/retrosynth/pelicanconf.py 
Done: Processed 1 article, 0 drafts, 0 pages and 0 hidden pages in 0.14 seconds.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our site has been regenerated and placed in the &lt;code&gt;output&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;If you used the &lt;code&gt;make devserver&lt;/code&gt; command earlier then change into the &lt;code&gt;output&lt;/code&gt;
directory and give Python's built-in HTTP server a shot with the following 
command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd output
python -m http.server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our first post in all its glory...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170609-static-sites-pelican/gunship-first-post.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Gunship as our first band post on retro synthwave static site."&gt;&lt;/p&gt;
&lt;p&gt;You can change the HTTP server port binding by adding a number after the 
command, if you want to serve more than one static site at a time or you 
already have an application bound to port 8000.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m http.server 8005
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that if you are using Python 2 the equivalent HTTP server command is
&lt;code&gt;python -m SimpleHTTPServer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our site now has some very basic content. We could expand this start into 
many more posts and pages but let's learn how to modify the site 
configuration.&lt;/p&gt;
&lt;h2&gt;Edit Site Configuration&lt;/h2&gt;
&lt;p&gt;Pelican's quickstart assumed a bunch of defaults that may or may not be
applicable to your site. Open up the &lt;code&gt;pelicanconf.py&lt;/code&gt; file to change some
of the defaults.&lt;/p&gt;
&lt;p&gt;Look for the &lt;code&gt;TIMEZONE&lt;/code&gt; variable. If it's not right for your location
then modify it to your zone. Wikipedia has a handy
&lt;a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"&gt;table of valid time zones values&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Also modify the &lt;code&gt;LINKS&lt;/code&gt; tuple to include your site (or Full Stack Python!)
instead of including the "you can modify those links" link. Change the
last line of &lt;code&gt;LINKS&lt;/code&gt; so it looks like the following tuple of tuples.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Blogroll&lt;/span&gt;
&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Pelican&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://getpelican.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Python.org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://python.org/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Jinja2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://jinja.pocoo.org/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Full Stack Python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.fullstackpython.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Instead of using the &lt;code&gt;make html&lt;/code&gt; file, this time we will invoke the
&lt;code&gt;pelican&lt;/code&gt; command directly from the command line. There is nothing wrong
with the &lt;code&gt;Makefile&lt;/code&gt;, but it is a good idea to get comfortable with Pelican
directly instead of only through build files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican -s pelicanconf.py -o output content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now run the HTTP server if you do not already have it running in another
terminal window.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd output
python -m http.server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Head back to the browser and refresh to view the updated configuration.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170609-static-sites-pelican/updated-configuration.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="New links created by the pelicanconf.py configuration settings file."&gt;&lt;/p&gt;
&lt;p&gt;What happens when we click on the blog post title? It takes us to a 
very similar-looking page with the
&lt;a href="http://localhost:8000/gunship.html"&gt;localhost:8000/gunship.html&lt;/a&gt; URL.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170609-static-sites-pelican/gunship-post.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Gunship subpage for the site."&gt;&lt;/p&gt;
&lt;p&gt;Alright, we updated some basic site-wide data, but our site really could 
use a change of paint.&lt;/p&gt;
&lt;h2&gt;Modify Site Theme&lt;/h2&gt;
&lt;p&gt;Changing the site theme is really where you can turn a standard blog into
whatever type of site you want to build. While the default Pelican 
configuration creates a blog template, you do not need to have a 
chronological structure if it is not right for your website.&lt;/p&gt;
&lt;p&gt;Create a new directory under your project directory that is named
&lt;code&gt;theme&lt;/code&gt;. Within &lt;code&gt;theme&lt;/code&gt; create another directory named &lt;code&gt;templates&lt;/code&gt;.
&lt;code&gt;templates&lt;/code&gt; is where our &lt;a href="/jinja2.html"&gt;Jinja2&lt;/a&gt; templates will be stored and
can override the default theme.&lt;/p&gt;
&lt;p&gt;Start by creating a file named &lt;code&gt;base.html&lt;/code&gt; which will store the boilerplate
used by templates across the site. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;container&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
 &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Within &lt;code&gt;theme/templates&lt;/code&gt; create a file named &lt;code&gt;article.html&lt;/code&gt; that will have a
different theme for blog posts than the rest of the site. Fill &lt;code&gt;article.html&lt;/code&gt;
with the following Jinja2 markup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;base.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}{{&lt;/span&gt; &lt;span class="nv"&gt;article.title&lt;/span&gt; &lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;col-md-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Posted on &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.date&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.content&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we will use a Jinja2 template to override the default &lt;code&gt;index.html&lt;/code&gt; main
page. Again within the &lt;code&gt;theme/templates&lt;/code&gt; directory, create a file named
&lt;code&gt;index.html&lt;/code&gt; with the following markup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;base.html&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;%}{{&lt;/span&gt; &lt;span class="nv"&gt;SITENAME&lt;/span&gt; &lt;span class="cp"&gt;}}{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;

&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;content&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;col-md-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITENAME&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;article&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;articles&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;h2&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.slug&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;.html&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
   &lt;span class="nt"&gt;&amp;lt;label&amp;gt;&lt;/span&gt;Posted on &lt;span class="nt"&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.date&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/strong&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
   &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.content&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;truncate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;110&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
   No posts yet!
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
 &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Regenerate the site and make sure you are serving it with the development
server or the &lt;code&gt;python -m http.server&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Make sure to use the new &lt;code&gt;-t theme&lt;/code&gt; flag to specify that the Jinja2 
templates within the &lt;code&gt;theme&lt;/code&gt; directory should be applied to the site.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican -s pelicanconf.py -o output -t theme content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go to &lt;a href="http://localhost:8000"&gt;localhost:8000&lt;/a&gt; and refresh the page.
The styling on the main page is now different because it uses the &lt;code&gt;index.html&lt;/code&gt;
theme.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170609-static-sites-pelican/index-no-styling.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="The index.html page without any styling applied."&gt;&lt;/p&gt;
&lt;p&gt;Click on the title of the Gunship post. This page uses the &lt;code&gt;article.html&lt;/code&gt; 
template, although it's hard to tell because there is no 
&lt;a href="/cascading-style-sheets.html"&gt;CSS&lt;/a&gt; applied to the page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170609-static-sites-pelican/gunship-no-styling.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Articles have an entirely different theme based on article.html markup."&gt;&lt;/p&gt;
&lt;p&gt;Pretty sparse! We can at least add the Bootstrap CSS to the HTML to 
align our content.&lt;/p&gt;
&lt;p&gt;Within &lt;code&gt;base.html&lt;/code&gt;, add the following line for Bootstrap under 
&lt;code&gt;&amp;lt;title&amp;gt;{% block title %}{% endblock %}&amp;lt;/title&amp;gt;&lt;/code&gt; and above &lt;code&gt;&amp;lt;/head&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!-- Latest compiled and minified Bootstrap CSS --&amp;gt;
&amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&amp;quot; integrity=&amp;quot;sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u&amp;quot; crossorigin=&amp;quot;anonymous&amp;quot;&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Regenerate the site and refresh the Gunship page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170609-static-sites-pelican/gunship-bootstrap-css.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Articles page after Bootstrap CSS has been added."&gt;&lt;/p&gt;
&lt;p&gt;Well at least our design has moved from 1996 to 2001. I am sure you can 
do a whole lot more to improve your own site's design.&lt;/p&gt;
&lt;p&gt;The new &lt;code&gt;base.html&lt;/code&gt; does not provide much of a theme yet but it at least 
provides a fresh start for completely customized sites.&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;You generated your first &lt;a href="/pelican.html"&gt;Pelican&lt;/a&gt; static website using
&lt;a href="/markdown.html"&gt;Markdown&lt;/a&gt; and &lt;a href="/jinja2.html"&gt;Jinja2&lt;/a&gt;. Additional modifications
can be made to the Jinja2 templates and the content contained in the Markdown
files. &lt;/p&gt;
&lt;p&gt;Do you want to deploy your new static website to GitHub Pages or an S3 bucket?
Well, that's a story for another &lt;a href="/blog.html"&gt;Full Stack Python tutorial&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;Questions? Let me know via 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;a GitHub issue ticket on the Full Stack Python repository&lt;/a&gt;, 
on Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;.  &lt;/p&gt;
&lt;p&gt;See something wrong in this blog post? Fork
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170609-static-sites-pelican.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>使用 Bokeh，Flask 和 Python 3 创建条形图视觉效果</title><link href="https://www.fullstackpython.com/blog/responsive-bar-charts-bokeh-flask-python-3.html" rel="alternate"></link><published>2017-07-30T00:00:00-04:00</published><updated>2017-07-30T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-05-26:blog/responsive-bar-charts-bokeh-flask-python-3.html</id><summary type="html">&lt;p&gt;&lt;a href="/bokeh.html"&gt;Bokeh&lt;/a&gt; is a powerful open source Python library that allows 
developers to generate JavaScript data visualizations for their web 
applications &lt;em&gt;without writing any JavaScript&lt;/em&gt;. While learning a 
JavaScript-based data visualization library like &lt;a href="https://d3js.org/"&gt;d3.js&lt;/a&gt;
can be useful, it's often far easier to knock out a few lines of Python
code to get the job done.&lt;/p&gt;
&lt;p&gt;With Bokeh, we can create incredibly detailed interactive visualizations, 
or just traditional ones like the following bar chart.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170526-bar-charts-bokeh-flask/chart-example-64.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Responsive Bokeh bar chart with 64 bars."&gt;&lt;/p&gt;
&lt;p&gt;Let's use the 
&lt;a href="/flask.html"&gt;Flask&lt;/a&gt; &lt;a href="/web-frameworks.html"&gt;web framework&lt;/a&gt; with Bokeh to 
create custom bar charts in a Python web app.&lt;/p&gt;
&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;This tutorial works with either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt;, 
but Python 3 is strongly recommended for new applications. I used
&lt;a href="https://www.python.org/downloads/release/python-361/"&gt;Python 3.6.1&lt;/a&gt; while 
writing this post. In addition to Python throughout this tutorial we 
will also use the following 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/flask.html"&gt;Flask&lt;/a&gt; web framework, 
  &lt;a href="https://github.com/pallets/flask/releases/tag/0.12.2"&gt;version 0.12.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/bokeh.html"&gt;Bokeh&lt;/a&gt; data visualization library, 
  &lt;a href="https://github.com/bokeh/bokeh/releases/tag/0.12.5"&gt;version 0.12.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/pandas.html"&gt;pandas&lt;/a&gt; data structures and analysis library, 
  &lt;a href="https://github.com/pandas-dev/pandas/releases/tag/v0.20.1"&gt;version 0.20.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt;, which come
  packaged with Python 3, to install and isolate the Flask, Bokeh,
  and pandas libraries from any other Python projects you might be 
  working on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need help getting your 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; configured
before running this code, take a look at
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;this guide for setting up Python 3 and Flask on Ubuntu 16.04 LTS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;All code in this blog post is available open source under the MIT license 
on GitHub under the 
&lt;a href="https://github.com/fullstackpython/blog-code-examples"&gt;bar-charts-bokeh-flask-python-3 directory of the blog-code-examples repository&lt;/a&gt;. 
Use and abuse the source code as you like for your own applications.&lt;/p&gt;
&lt;h2&gt;Installing Bokeh and Flask&lt;/h2&gt;
&lt;p&gt;Create a fresh virtual environment for this project to isolate our 
dependencies using the following command in the terminal. I typically run 
this command within a separate &lt;code&gt;venvs&lt;/code&gt; directory where all my virtualenvs
are store.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv barchart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; barchart/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after activating the virtualenv:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170526-bar-charts-bokeh-flask/activate-virtualenv.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Activating our Python virtual environment on the command line."&gt;&lt;/p&gt;
&lt;p&gt;Keep in mind that you need to activate the virtualenv in every new terminal 
window where you want to use the virtualenv to run the project.&lt;/p&gt;
&lt;p&gt;Bokeh and Flask are installable into the now-activated virtualenv
using pip. Run this command to get the appropriate Bokeh and Flask
versions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install bokeh==0.12.5 flask==0.12.2 pandas==0.20.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After a brief download and installation period our required dependencies
should be installed within our virtualenv. Look for output to confirm 
everything worked.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Installing collected packages: six, requests, PyYAML, python-dateutil, MarkupSafe, Jinja2, numpy, tornado, bokeh, Werkzeug, itsdangerous, click, flask, pytz, pandas
  Running setup.py install for PyYAML ... done
  Running setup.py install for MarkupSafe ... done
  Running setup.py install for tornado ... done
  Running setup.py install for bokeh ... done
  Running setup.py install for itsdangerous ... done
Successfully installed Jinja2-2.9.6 MarkupSafe-1.0 PyYAML-3.12 Werkzeug-0.12.2 bokeh-0.12.5 click-6.7 flask-0.12.2 itsdangerous-0.24 numpy-1.12.1 pandas-0.20.1 python-dateutil-2.6.0 pytz-2017.2 requests-2.14.2 six-1.10.0 tornado-4.5.1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can start building our web application.&lt;/p&gt;
&lt;h2&gt;Starting Our Flask App&lt;/h2&gt;
&lt;p&gt;We are going to first code a basic Flask application then add our bar 
chart to the rendered page.&lt;/p&gt;
&lt;p&gt;Create a folder for your project then within it create a file named
&lt;code&gt;app.py&lt;/code&gt; with these initial contents:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;lt;int:bars_count&amp;gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bars_count&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bars_count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;bars_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chart.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bars_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bars_count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code is a short one-route &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; application
that defines the &lt;code&gt;chart&lt;/code&gt; function. &lt;code&gt;chart&lt;/code&gt; takes in an arbitrary integer
as input which will later be used to define how much data we want in our
bar chart. The &lt;code&gt;render_template&lt;/code&gt; function within &lt;code&gt;chart&lt;/code&gt; will use a template
from Flask's default &lt;a href="/template-engines.html"&gt;template engine&lt;/a&gt; named
&lt;a href="/jinja2.html"&gt;Jinja2&lt;/a&gt; to output HTML. &lt;/p&gt;
&lt;p&gt;The last two lines in the allow us to run the Flask application from the
command line on port 5000 in debug mode. Never use debug mode for production,
that's what &lt;a href="/wsgi-servers.html"&gt;WSGI servers&lt;/a&gt; like 
&lt;a href="/green-unicorn-gunicorn.html"&gt;Gunicorn&lt;/a&gt; are built for.&lt;/p&gt;
&lt;p&gt;Create a subdirectory within your project folder named &lt;code&gt;templates&lt;/code&gt;. Within
&lt;code&gt;templates&lt;/code&gt; create a file name &lt;code&gt;chart.html&lt;/code&gt;. &lt;code&gt;chart.html&lt;/code&gt; was referenced in 
the &lt;code&gt;chart&lt;/code&gt; function of our &lt;code&gt;app.py&lt;/code&gt; file so we need to create it before our
app will run properly. Populate &lt;code&gt;chart.html&lt;/code&gt; with the following 
&lt;a href="/jinja2.html"&gt;Jinja2&lt;/a&gt; markup.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Bar charts with Bokeh!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Bugs found over the past &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;bars_count&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; days&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;chart.html&lt;/code&gt;'s boilerplate displays the number of bars passed into the
&lt;code&gt;chart&lt;/code&gt; function via the URL. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag's message on the number of bugs found goes along with our
sample app's theme. We will pretend to be charting the number of bugs 
found by automated tests run each day.&lt;/p&gt;
&lt;p&gt;We can test our application out now.&lt;/p&gt;
&lt;p&gt;Make sure your virtualenv is still activated and that you are in the 
base directory of your project where &lt;code&gt;app.py&lt;/code&gt; is located. Run &lt;code&gt;app.py&lt;/code&gt;
using the &lt;code&gt;python&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$(barchart) python app.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go to &lt;a href="http://localhost:5000/16/"&gt;localhost:5000/16/&lt;/a&gt; in your web browser.
You should see a large message that changes when you modify the URL.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170526-bar-charts-bokeh-flask/basic-app-no-chart.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Simple Flask app without bar chart"&gt;&lt;/p&gt;
&lt;p&gt;Our simple Flask route is in place but that's not very exciting. Time
to add our bar chart.&lt;/p&gt;
&lt;h2&gt;Generating the Bar Chart&lt;/h2&gt;
&lt;p&gt;We can build on the basic Flask app foundation that we just wrote with
some new Python code that uses &lt;a href="/bokeh.html"&gt;Bokeh&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Open &lt;code&gt;app.py&lt;/code&gt; back up and change the top of the file to include the
following imports.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HoverTool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FactorRange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Plot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LinearAxis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;Range1d&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.models.glyphs&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;VBar&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.plotting&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.charts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Bar&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.embed&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bokeh.models.sources&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ColumnDataSource&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Throughout the rest of the file we will need these Bokeh imports along
with the &lt;code&gt;random&lt;/code&gt; module to generate data and our bar chart.&lt;/p&gt;
&lt;p&gt;Our bar chart will use "software bugs found" as a theme. The data will
be randomly generated each time the page is refreshed. In a real application
you'd have a more stable and useful data source!&lt;/p&gt;
&lt;p&gt;Continue modifying &lt;code&gt;app.py&lt;/code&gt; so the section after the imports looks like
the following code. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;lt;int:bars_count&amp;gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bars_count&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;bars_count&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;bars_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;

    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bugs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;costs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[]}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bars_count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;days&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bugs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;costs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.00&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1000.00&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="n"&gt;hover&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_hover_tool&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_bar_chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bugs found per day&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;days&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="s2"&gt;&amp;quot;bugs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hover&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;components&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;chart.html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bars_count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bars_count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;the_div&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the_script&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;chart&lt;/code&gt; function gains three new lists that are randomly generated
by 
&lt;a href="https://docs.python.org/3/library/random.html"&gt;Python 3's super-handy random module&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;chart&lt;/code&gt; calls two functions, &lt;code&gt;create_hover_tool&lt;/code&gt; and &lt;code&gt;create_bar_chart&lt;/code&gt;.
We haven't written those functions yet so continue adding code below &lt;code&gt;chart&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_hover_tool&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# we&amp;#39;ll code this function in a moment&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_bar_chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hover_tool&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Creates a bar chart plot with the exact styling for the centcom&lt;/span&gt;
&lt;span class="sd"&gt;       dashboard. Pass in data as a dictionary, desired plot title,&lt;/span&gt;
&lt;span class="sd"&gt;       name of x axis, y axis and the hover tool HTML.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ColumnDataSource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;xdr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FactorRange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x_name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;ydr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Range1d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;y_name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mf"&gt;1.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;hover_tool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;tools&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;hover_tool&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;

    &lt;span class="n"&gt;plot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x_range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;xdr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ydr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plot_width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;plot_height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h_symmetry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v_symmetry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;min_border&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;toolbar_location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;above&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tools&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                  &lt;span class="n"&gt;responsive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;outline_line_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#666666&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;glyph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VBar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=.&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;fill_color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#e12127&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_glyph&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;glyph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;xaxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinearAxis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;yaxis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinearAxis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dimension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ticker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_layout&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Grid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dimension&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ticker&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ticker&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toolbar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min_border_top&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xgrid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid_line_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ygrid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid_line_color&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;#999999&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Bugs found&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ygrid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grid_line_alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.1&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis_label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Days after app deployment&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;major_label_orientation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is a whole lot of new code above so let's break it down. The 
&lt;code&gt;create_hover_tool&lt;/code&gt; function does not do anything yet, it simply
returns &lt;code&gt;None&lt;/code&gt;, which we can use if we do not want a hover tool. The hover
tool is an overlay that appears when we move our mouse cursor over one of
the bars or touch a bar on a touchscreen so we can see more data about the
bar.&lt;/p&gt;
&lt;p&gt;Within the &lt;code&gt;create_bar_chart&lt;/code&gt; function we take in our generated data source 
and convert it into a &lt;code&gt;ColumnDataSource&lt;/code&gt; object that is one type of input
object we can pass to Bokeh functions. We specify two ranges for the chart's
x and y axes.&lt;/p&gt;
&lt;p&gt;Since we do not yet have a hover tool the &lt;code&gt;tools&lt;/code&gt; list will remain empty.
The line where we create &lt;code&gt;plot&lt;/code&gt; using the &lt;code&gt;figure&lt;/code&gt; function is where a lot of 
the magic happens. We specify all the parameters we want our graph to have
such as the size, toolbar, borders and whether or not the graph should be
responsive upon changing the web browser size.&lt;/p&gt;
&lt;p&gt;We create vertical bars with the &lt;code&gt;VBar&lt;/code&gt; object and add them to the plot using
the &lt;code&gt;add_glyph&lt;/code&gt; function that combines our source data with the &lt;code&gt;VBar&lt;/code&gt; 
specification.&lt;/p&gt;
&lt;p&gt;The last lines of the function modify the look and feel of the graph. For
example I took away the &lt;code&gt;Bokeh&lt;/code&gt; logo by specifying &lt;code&gt;plot.toolbar.logo = None&lt;/code&gt;
and added labels to both axes. I recommend keeping the 
&lt;a href="http://bokeh.pydata.org/en/latest/docs/reference/plotting.html#bokeh-plotting"&gt;bokeh.plottin&lt;/a&gt;
documentation open to know what your options are for customizing your
visualizations.&lt;/p&gt;
&lt;p&gt;We just need a few updates to our &lt;code&gt;templates/chart.html&lt;/code&gt; file to display
the visualization. Open the file and add these 6 lines to the file.
Two of these lines are for the required CSS, two are JavaScript Bokeh
files and the remaining two are the generated chart.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Bar charts with Bokeh!&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;title&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-0.12.5.min.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.0.min.css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Bugs found over the past &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;bars_count&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt; days&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;the_div&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;safe&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-0.12.5.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://cdn.pydata.org/bokeh/release/bokeh-widgets-0.12.5.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;the_script&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nf"&gt;safe&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alright, let's give our app a try with a simple chart of 4 bars. The
Flask app should automatically reload when you save &lt;code&gt;app.py&lt;/code&gt; with the new
code but if you shut down the development server fire it back up with the
&lt;code&gt;python app.py&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;Open your browser to &lt;a href="localhost:5000/4/"&gt;localhost:5000/4/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170526-bar-charts-bokeh-flask/chart-example-4.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Responsive Bokeh bar chart with 4 bars."&gt;&lt;/p&gt;
&lt;p&gt;That one looks a bit sparse, so we can crank it up by 4x to 16 bars
by going to &lt;a href="localhost:5000/16/"&gt;localhost:5000/16/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170526-bar-charts-bokeh-flask/chart-example-16.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Responsive Bokeh bar chart with 16 bars."&gt;&lt;/p&gt;
&lt;p&gt;Now another 4x to 128 bars with &lt;a href="localhost:5000/128/"&gt;localhost:5000/128/&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170526-bar-charts-bokeh-flask/chart-example-128.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Responsive Bokeh bar chart with 128 bars."&gt;&lt;/p&gt;
&lt;p&gt;Looking good so far. But what about that hover tool to drill down into each 
bar for more data? We can add the hover with just a few lines of code
in the &lt;code&gt;create_hover_tool&lt;/code&gt; function.&lt;/p&gt;
&lt;h2&gt;Adding a Hover Tool&lt;/h2&gt;
&lt;p&gt;Within &lt;code&gt;app.py&lt;/code&gt; modify the &lt;code&gt;create_hover_tool&lt;/code&gt; to match the following
code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;create_hover_tool&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Generates the HTML for the Bokeh&amp;#39;s hover data tool on our graph.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;hover_html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;      &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;lt;span class=&amp;quot;hover-tooltip&amp;quot;&amp;gt;$x&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;      &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;      &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;lt;span class=&amp;quot;hover-tooltip&amp;quot;&amp;gt;@bugs bugs&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;      &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;      &amp;lt;div&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;        &amp;lt;span class=&amp;quot;hover-tooltip&amp;quot;&amp;gt;$@costs{0.00}&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;      &amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HoverTool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tooltips&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;hover_html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It may look really odd to have HTML embedded within your Python application,
but that's how we specify what the hover tool should display. We use
&lt;code&gt;$x&lt;/code&gt; to show the bar's x axis, &lt;code&gt;@bugs&lt;/code&gt; to show the "bugs" field from our
data source, and &lt;code&gt;$@costs{0.00}&lt;/code&gt; to show the "costs" field formatted as
a dollar amount with exactly 2 decimal places.&lt;/p&gt;
&lt;p&gt;Make sure you changed &lt;code&gt;return None&lt;/code&gt; to &lt;code&gt;return HoverTool(tooltips=hover_html)&lt;/code&gt;
so we can see the results of our new function in the graph.&lt;/p&gt;
&lt;p&gt;Head back to the browser and reload the 
&lt;a href="http://localhost:5000/128"&gt;localhost:5000/128/&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170526-bar-charts-bokeh-flask/chart-example-128-hover-tool.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Responsive Bokeh bar chart with 128 bars and showing the hover tool."&gt;&lt;/p&gt;
&lt;p&gt;Nice work! Try playing around with the number of bars in the URL and the
window size to see what the graph looks like under different conditions.&lt;/p&gt;
&lt;p&gt;The chart gets crowded with more than 100 or so bars, but you can give
it a try with whatever number of bars you want. Here is what an 
impractical amount of 50,000 bars looks like just for the heck of it:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170526-bar-charts-bokeh-flask/chart-example-50000.png" width="100%" class="technical-diagram img-rounded" style="border:1px solid #ccc" alt="Responsive Bokeh bar chart with 50000 bars."&gt;&lt;/p&gt;
&lt;p&gt;Yea, we may need to do some additional work to display more than a few 
hundred bars at a time.&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;You just created a nifty configurable bar chart in Bokeh. Next you can 
modify the color scheme, change the input data source, try to create other 
types of charts or solve how to display very large numbers of bars.&lt;/p&gt;
&lt;p&gt;There is a lot more than Bokeh can do, so be sure to check out the 
&lt;a href="http://bokeh.pydata.org/en/latest/"&gt;official project documentation&lt;/a&gt; , 
&lt;a href="https://github.com/bokeh/bokeh"&gt;GitHub repository&lt;/a&gt;, 
the &lt;a href="/bokeh.html"&gt;Full Stack Python Bokeh page&lt;/a&gt; or take a look at 
&lt;a href="/table-of-contents.html"&gt;other topics on Full Stack Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Questions? Let me know via 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;a GitHub issue ticket on the Full Stack Python repository&lt;/a&gt;, 
on Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this blog post? Fork
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170526-bar-charts-bokeh.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>如何成为一名成功的自学软件开发者</title><link href="https://www.fullstackpython.com/blog/become-successful-self-taught-software-developer.html" rel="alternate"></link><published>2017-05-14T00:00:00-04:00</published><updated>2017-05-14T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-05-14:blog/become-successful-self-taught-software-developer.html</id><summary type="html">&lt;p&gt;I received the following question via email from someone spending
significant effort learning how to code in anticipation of obtaining 
full-time job with those skills. The question is also frequently 
asked by university students and coding bootcamp graduates. &lt;/p&gt;
&lt;p&gt;This post provides my current answer on how get your first full-time job
as a software developer. My answer assumes that the definition 
of "successful path" for a self-taught developer is getting a 
full-time position after investing so much time learning to code.&lt;/p&gt;
&lt;p&gt;Note though that as I describe in my answer below, I took 
&lt;a href="http://www.mattmakai.com/matt-makai-resume.pdf"&gt;a more "traditional" route&lt;/a&gt; 
to become a professional software developer. Therefore my response should 
be only one of many that you solicit while working towards making the 
leap from self-taught to professional software developer.&lt;/p&gt;
&lt;h2&gt;(Paraphrased) Original Question&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I'm not sure what I should learn first to become a developer. &lt;/p&gt;
&lt;p&gt;Right now the path I am on is/was: Learn basic python fundamentals -&amp;gt; 
git/github -&amp;gt; ubuntu/linux OS--&amp;gt; flask/jinja2 --&amp;gt; Bootstrap -&amp;gt; 
SQLalchemy -&amp;gt; Docker -&amp;gt; Celery -&amp;gt; Redis -&amp;gt; AWS -&amp;gt; Django?!&lt;/p&gt;
&lt;p&gt;I don't know where JS / Angular2 / ECMAscript6 / HTML / CSS all fit 
into this...&lt;/p&gt;
&lt;p&gt;What is the ideal path to becoming a successful self-taught developer
so I can eventually get a job as a software developer?"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;My tl;dr answer&lt;/h3&gt;
&lt;p&gt;Go very deep in one area you really enjoy working after you learn the 
fundamentals and get a broad overview of the language's ecosystem. Leverage
your depth in your targeted expertise area when you find teams that need
that skill to land your first full-time job.&lt;/p&gt;
&lt;h3&gt;Answer Context&lt;/h3&gt;
&lt;p&gt;Figuring out what order to go in when learning is definitely one of the 
trickiest problems for self-guided learners. I'm not sure my answer to your 
question is the best one that you can get because for better or worse I 
took four years of computer science (CS) in high school, followed by 
undergrad CS &amp;amp; grad school CS (while working as a full-time developer). 
That route seems like the "traditional developer" background. However, I 
will do my best to give an answer. You are definitely not the only person 
who faces this issue.&lt;/p&gt;
&lt;p&gt;I typically see self-taught and developer bootcamp grads feel like to 
get a job they have to learn everything from the 
&lt;a href="/databases.html"&gt;database backend&lt;/a&gt; up through the 
&lt;a href="/web-frameworks.html"&gt;web frameworks&lt;/a&gt; to every new 
&lt;a href="/javascript.html"&gt;JavaScript&lt;/a&gt; frontend framework that comes out,
but that's definitely not true. When you land that first full-time 
developer gig it will be because a development team sees you have a 
particular skill that their team lacks and they need help with on their
project(s).&lt;/p&gt;
&lt;h3&gt;Going deep&lt;/h3&gt;
&lt;p&gt;If you find yourself coding front-end stuff but wishing you could get 
back to optimizing the database, you should focus on going much, much 
deeper in database optimization. Learn as much as you can about SQL, 
DDLs, DMLs, &lt;a href="/object-relational-mappers-orms.html"&gt;ORMs&lt;/a&gt;, 
&lt;a href="/postgresql.html"&gt;PostgreSQL&lt;/a&gt;, database testing and performance tuning. 
Constantly go deeper. Spend most of your time coding but when possible also 
teach others what you're learning. Some folks prefer to teach by writing blog 
posts. Other people enjoy giving tutorials at a meetup. You also mentor
others in-person or remote on video chats who are also new to software 
development. &lt;/p&gt;
&lt;p&gt;By teaching others you are not being purely altruistic: explaining 
programming and answering others' questions will reinforce in your own mind 
what you have learned and where your gaps remain based on the questions. 
Experiment with code to learn more and continue to go deeper. Create a
feedback loop where you code, learn, write and find new unexplored veins 
to learn more in that area.&lt;/p&gt;
&lt;p&gt;You should be ready to start job hunting once you have a good feedback loop 
where you are digging into your favorite subject area and are teaching it to 
others in some way.&lt;/p&gt;
&lt;h3&gt;Job searching&lt;/h3&gt;
&lt;p&gt;When you've gone deep in your subject, search for jobs that have a bit 
of a full-stack flavor with an emphasis on your specialty. Reach out via 
email to developers on the team or the hiring managers. Ask them for advice
on what skills successful developers on their teams have an what unsuccessful
candidates were lacking for their positions. Use their answers as data points
for what you may still need to learn when their responses are relevant to
the area you're going deep in. &lt;/p&gt;
&lt;p&gt;When you feel you are ready, see if you can grab lunch or video chat with 
developers on those teams to learn more about their work. If that goes well, 
ask them if they'd refer you into the interview queue. Referrals will get you 
much further than applying through a human resources resume collection 
system. &lt;/p&gt;
&lt;p&gt;Look for both software development junior roles and technical support 
roles, if the technical support roles are at software-focused companies. 
For example, &lt;a href="https://www.twilio.com/company/jobs"&gt;Twilio's Support team&lt;/a&gt; 
often hires folks who have limited development experience but over time they 
can learn how to debug coding issues based on all the support tickets they 
have to answer (along with continued self-paced learning). &lt;/p&gt;
&lt;h3&gt;Interviewing and working tips&lt;/h3&gt;
&lt;p&gt;Enthusiasm is crucial for obtaining and doing well in your first few jobs.
In hindsight, a lot of the enterprise software I worked on right out of 
college was horrible, but it was all new to me so I soaked up as much
knowledge as possible while asking the tech leads and architects around
me a ton of questions. Enjoy climbing steep learning curves.&lt;/p&gt;
&lt;p&gt;Keep your cynicism and any "I'm better than this" attitude in check 
because companies have a ton of unexciting grunt work that needs to 
get done. The grunt work will teach you how to become a better software 
developer.&lt;/p&gt;
&lt;p&gt;While looking for your first position, always be working on dozens of 
potential opportunities and do not pin your hopes up on one specific 
job. The goal is to get your first development gig that will help you 
continue to learn, not to land your dream job. The dream job comes later 
when you actually have enough experience to know what your dream job looks 
like!&lt;/p&gt;
&lt;p&gt;You will eventually land your first development gig. Then you will have
to constantly keep learning and the great part is that you'll get paid for
it.&lt;/p&gt;
&lt;h3&gt;Feedback&lt;/h3&gt;
&lt;p&gt;What other questions can I answer and 
&lt;a href="/table-of-contents.html"&gt;what additional topics&lt;/a&gt; can I add to 
Full Stack Python that would be immensely helpful to new folks who are 
struggling to become self-taught developers?&lt;/p&gt;
&lt;p&gt;Let me know via 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/issues"&gt;a GitHub issue ticket on the Full Stack Python repository&lt;/a&gt;, 
on Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;How should I improve this blog post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170514-self-taught-developer-path.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>如何创建您的第一个 Python 3.6 AWS Lambda 函数</title><link href="https://www.fullstackpython.com/blog/aws-lambda-python-3-6.html" rel="alternate"></link><published>2018-04-25T00:00:00-04:00</published><updated>2018-04-25T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-04-29:blog/aws-lambda-python-3-6.html</id><summary type="html">&lt;p&gt;&lt;a href="/aws-lambda.html"&gt;Amazon Web Services (AWS) Lambda&lt;/a&gt;
provides a usage-based compute service for running Python code in response 
to developer-defined events. For example, if an inbound HTTP POST
comes in to API Gateway or a new file is uploaded to 
&lt;a href="https://aws.amazon.com/s3/"&gt;AWS S3&lt;/a&gt; then AWS Lambda can execute a function
to respond to that API call or manipulate the file on S3.&lt;/p&gt;
&lt;p&gt;AWS Lambdas are not related to the Python languages' &lt;code&gt;lambda&lt;/code&gt; expressions,
which are used to create anonymous functions. The AWS Lambda name just 
happens to collide with the the &lt;code&gt;lambda&lt;/code&gt; keyword's name.&lt;/p&gt;
&lt;p&gt;Let's learn how to quickly write and run a Lambda function to execute 
basic Python 3.6 code which uses environment variables as input.
This code, which is also &lt;a href="https://github.com/fullstackpython/blog-code-examples"&gt;available on GitHub under the blog-post-examples repository&lt;/a&gt; can be 
changed so that you can build much more complicated Python programs.&lt;/p&gt;
&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;No local &lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; tools 
are required for this tutorial, other than a web browser. All the work will
happen on AWS via their Console. &lt;/p&gt;
&lt;p&gt;These steps can also be completed from the command line via the 
&lt;a href="https://boto3.readthedocs.io/en/latest/"&gt;boto3&lt;/a&gt; library, but we won't 
cover that in this post.&lt;/p&gt;
&lt;p&gt;If using Python 2 is still your jam rather than Python 3, take a look at
&lt;a href="/blog/aws-lambda-python-2-7.html"&gt;this other post which shows how to execute Python 2.7 code on AWS Lambda&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;First Steps with AWS Lambda&lt;/h2&gt;
&lt;p&gt;Sign up for a new &lt;a href="https://aws.amazon.com/"&gt;Amazon Web Services account&lt;/a&gt;,
which provides a generous free tier, or use your existing AWS account.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170429-aws-lambda-python-3-6/aws-amazon-com.jpg" width="100%" class="shot outl rnd" alt="AWS Lambda landing and sign in screen."&gt;&lt;/p&gt;
&lt;p&gt;After signing up a few tutorials may pop up, but skip past them and
go to the main Console. AWS has tons of services, with more being added
every month, so using the search box is the best way to get around. 
Select the search text box, enter "lambda" and select "Lambda" to get to
the Lambda starting page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170429-aws-lambda-python-3-6/search-for-lambda.jpg" width="100%" class="shot rnd outl" alt="Search for lambda in the dashboard text box."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Create a Lambda function" button. The "Select Blueprint" page
will appear.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170429-aws-lambda-python-3-6/select-blueprint.jpg" width="100%" class="shot rnd outl" alt="The Select Blueprint Lambda screen."&gt;&lt;/p&gt;
&lt;p&gt;Select "Blank Function" and the "Configure triggers" page will come up. 
It was non-obvious to me at first, but you don't actually need to configure a 
trigger to move on. A trigger is how the Lambda function typically knows 
when to execute based on an event from another AWS service such as 
&lt;a href="https://aws.amazon.com/api-gateway/"&gt;API Gateway&lt;/a&gt; or 
&lt;a href="https://aws.amazon.com/cloudwatch/"&gt;Cloudwatch&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170429-aws-lambda-python-3-6/configure-triggers.jpg" width="100%" class="shot rnd outl" alt="Configure Lambda trigger screen."&gt;&lt;/p&gt;
&lt;p&gt;We won't configure a trigger for this function because we can manually 
kick off the Lambda to test it when we are finished configuring it. Leave 
the trigger icon blank and click the "Next" button to move along. &lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170429-aws-lambda-python-3-6/blank-lambda.jpg" width="100%" class="shot outl rnd" alt="The Lambda configuration screen."&gt;&lt;/p&gt;
&lt;p&gt;Next we get to the "Configure function" screen where we can finally write
some code!&lt;/p&gt;
&lt;h2&gt;Python Code for Our Lambda Function&lt;/h2&gt;
&lt;p&gt;Enter a name for the Lambda function, such as "python_3_6_lambda_test",
as well as a description. A description is optional but it is useful
when you have a dozens or hundreds of different Lambda functions and
need to keep them straight. In the Runtime drop-down, select Python 3.6 for 
the programming language.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170429-aws-lambda-python-3-6/python-3-6-lambda.jpg" width="100%" class="shot outl rnd" alt="Enter a name, description and use Python 3.6 for the Lambda."&gt;&lt;/p&gt;
&lt;p&gt;Beneath the Runtime drop-down there is a large text box for code, 
prepopulated with a &lt;code&gt;lambda_handler&lt;/code&gt; function definition. The 
"Code entry type" drop-down can also be changed to allow uploading a ZIP
file or inputing a file from an S3 bucket. For our simple first
Lambda function we will stick to the "Edit code inline" option. Copy or type 
in the following code, replacing what is already in the text box. This
code is also available on &lt;a href="https://github.com/fullstackpython/blog-code-examples/blob/master/aws-lambda-python-3-6/"&gt;this open source GitHub repository&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lambda_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;what_to_print&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;what_to_print&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;how_many_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;how_many_times&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# make sure what_to_print and how_many_times values exist&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;what_to_print&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;how_many_times&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;how_many_times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="c1"&gt;# formatted string literals are new in Python 3.6&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;what_to_print: {what_to_print}.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;what_to_print&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code above contains a required &lt;code&gt;lambda_handler&lt;/code&gt; function, which is 
AWS Lambda's defined hook so it knows where to begin execution. Think of 
&lt;code&gt;lambda_handler&lt;/code&gt; as a &lt;code&gt;main&lt;/code&gt; function, like the&lt;br /&gt;
&lt;code&gt;if __name__ == "__main__":&lt;/code&gt; conditional line commonly used in Python files 
to ensure a block of code is executed when a script is run from the 
command line.&lt;/p&gt;
&lt;p&gt;The Python code expects two environment variables that are read by the
&lt;code&gt;os&lt;/code&gt; module with the &lt;code&gt;environ.get&lt;/code&gt; function. With the &lt;code&gt;what_to_print&lt;/code&gt; and
&lt;code&gt;how_many_times&lt;/code&gt; variables set by the environment variables, our code then
prints a message zero or more times, based on the amount defined in 
the &lt;code&gt;how_many_times&lt;/code&gt; variable. If a message is printed at least once then 
the function returns the &lt;code&gt;what_to_print&lt;/code&gt; string, if nothing is printed 
then &lt;code&gt;None&lt;/code&gt; is returned.&lt;/p&gt;
&lt;p&gt;Below the code input text box on this function configuration screen there 
is a section to set environment variable key-value pairs.&lt;/p&gt;
&lt;p&gt;Enter the keys named &lt;code&gt;what_to_print&lt;/code&gt; and &lt;code&gt;how_many_times&lt;/code&gt; then enter their 
values. Use a string message for &lt;code&gt;what_to_print&lt;/code&gt;'s value and an integer 
whole number above 0 for &lt;code&gt;how_many_times&lt;/code&gt;. Our Python code's error handling
is not very robust so a value other than a number in the &lt;code&gt;how_many_times&lt;/code&gt;
variable will cause the script to throw an error when it is executed due
to the forced casting of &lt;code&gt;how_many_times&lt;/code&gt; via the &lt;code&gt;int()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170429-aws-lambda-python-3-6/environment-variables.jpg" width="100%" class="shot rnd outl" alt="Section to set environment variables for the Lambda function."&gt;&lt;/p&gt;
&lt;p&gt;The Python 3.6 code and the environment variables are now in place. We 
just need to handle a few more AWS-specific settings before we can test the 
Lambda function.&lt;/p&gt;
&lt;h2&gt;Executing our Lambda Function&lt;/h2&gt;
&lt;p&gt;Scroll past the environment variables to the 
"Lambda function handler and role" section, which contains a few more 
required function configuration items. &lt;/p&gt;
&lt;p&gt;Keep the default handler set to &lt;code&gt;lambda_function.lambda_handler&lt;/code&gt;. Select 
"Create a new Role from template(s)" from the drop-down then for the
"Role name" field enter "dynamodb_access". Under "Policy templates" 
select the "Simple Microservice permissions". &lt;/p&gt;
&lt;p&gt;The "Simple Microservice permissions" allows our Lambda to access
&lt;a href="https://aws.amazon.com/dynamodb/"&gt;AWS DynamoDB&lt;/a&gt;. We will not use DynamoDB in 
this tutorial but the service is commonly used either as permanent or 
temporary storage for Lambda functions.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170429-aws-lambda-python-3-6/lambda-handler-and-role.jpg" width="100%" class="shot rnd outl" alt="For the final configuration, keep the default handler, create a new role from a template for Simple Microservice permissions and save it with a unique name."&gt;&lt;/p&gt;
&lt;p&gt;Our code and configuration is in place so click the "Next" button
at the bottom right corner of the page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170429-aws-lambda-python-3-6/review-lambda.jpg" width="100%" class="shot rnd outl" alt="Review Lambda configuration."&gt;&lt;/p&gt;
&lt;p&gt;The review screen shows us our configuration settings to make sure we 
selected the appropriate values for our new Lambda function. Scroll down
press "Create function".&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170429-aws-lambda-python-3-6/create-function.jpg" width="100%" class="shot rnd outl" alt="Click the create function button to continue."&gt;&lt;/p&gt;
&lt;p&gt;Success message should appear on the next page below the "Test" button.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170429-aws-lambda-python-3-6/test.jpg" width="100%" class="shot outl rnd" alt="Test button on the execution screen."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Test" button to execute the Lambda. Lambda will prompt us for
some data to simulate an event that would kick off our function. Select
the "Hello World" sample event template, which contains some keys but our
Lambda will not use that in its execution. Click the "Save and test" button
at the bottom of the modal.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170429-aws-lambda-python-3-6/sample-event-template.jpg" width="100%" class="shot outl rnd" alt="Sample event template for Lambda execution."&gt;&lt;/p&gt;
&lt;p&gt;Scroll down to the "Execution result" section where we can see our output.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170429-aws-lambda-python-3-6/execution-results.jpg" width="100%" class="shot outl rnd" alt="Results from executing our new Lambda function."&gt;&lt;/p&gt;
&lt;p&gt;The log output shows us the return value of our function, which in this 
execution was the string message from &lt;code&gt;what_to_print&lt;/code&gt;. We can also see
our print function produced output five times as expected based on the
amount set in the &lt;code&gt;how_many_times&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;You just configured, coded and executed your first Python 3.6 AWS Lambda
function! The real power of Lambda comes in when you use triggers to
your Lambda function so it executes based on events that happen.
We will take a look at that in the next tutorial.&lt;/p&gt;
&lt;p&gt;View the &lt;a href="/aws-lambda.html"&gt;AWS Lambda Full Stack Python page&lt;/a&gt; for additional 
examples and tutorials that other folks have shared for Lambda with Python.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I am also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170429-python-3-6-aws-lambda.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>AWS Lambda 和 Python 2.7 入门</title><link href="https://www.fullstackpython.com/blog/aws-lambda-python-2-7.html" rel="alternate"></link><published>2017-04-29T00:00:00-04:00</published><updated>2017-04-29T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-04-28:blog/aws-lambda-python-2-7.html</id><summary type="html">&lt;p&gt;&lt;a href="/aws-lambda.html"&gt;Amazon Web Services (AWS) Lambda&lt;/a&gt;
is a "serverless" compute service that executes arbitrary Python code in 
response to developer-defined events, such as inbound API calls or file 
uploads to &lt;a href="https://aws.amazon.com/s3/"&gt;AWS S3&lt;/a&gt;. Note that AWS Lambda has 
nothing to do with the &lt;code&gt;lambda&lt;/code&gt; keyword in Python that is used to create 
anonymous functions, it's just the product name that happens to collide 
with an existing Python language feature name.&lt;/p&gt;
&lt;p&gt;In this tutorial we'll learn how to quickly write and run a Lambda 
function that executes some simple Python 2.7 code and handles environment
variables. The code can then be modified to build far more complicated 
Python applications.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;We do not need any local development environment tools to get through
this walkthrough other than a web browser because all the work will
happen on AWS.&lt;/p&gt;
&lt;p&gt;Grab a new free tier &lt;a href="https://aws.amazon.com/"&gt;Amazon Web Services account&lt;/a&gt; 
or use your existing AWS account.&lt;/p&gt;
&lt;h2&gt;First Steps with Lambda&lt;/h2&gt;
&lt;p&gt;Head to the 
&lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda landing page&lt;/a&gt; in your 
web browser. Sign into your account, or sign up for a new account which
comes with a free tier so you don't have to pay.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170428-aws-lambda-python-2-7/aws-amazon-com.jpg" width="100%" class="shot rnd outl" alt="AWS Lambda landing page."&gt;&lt;/p&gt;
&lt;p&gt;If you're not taken directly to the 
&lt;a href="https://console.aws.amazon.com/lambda/home"&gt;Lambda Console page&lt;/a&gt; after
logging in you'll see the main Console. AWS has a ridiculous number of
services (that seems to expand every week) so the best way to get around 
is to select the search text box and search for "lambda" as shown in the 
following screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170428-aws-lambda-python-2-7/search-for-lambda.jpg" width="100%" class="shot rnd outl" alt="Search for lambda in the dashboard text box."&gt;&lt;/p&gt;
&lt;p&gt;Press the "Create a Lambda function" button and you'll see the 
"Select Blueprint" page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170428-aws-lambda-python-2-7/select-blueprint.jpg" width="100%" class="shot rnd outl" alt="The select blueprint Lambda screen, where you should select Blank Function."&gt;&lt;/p&gt;
&lt;p&gt;Choose "Blank Function". The next screen gives the option to select a
"trigger", which is how the Lambda function gets executed. A trigger is
some event that is integrated with other AWS services and can be exposed
externally via an API or device such as Alexa.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170428-aws-lambda-python-2-7/configure-triggers.jpg" width="100%" class="shot rnd outl" alt="Configure trigger screen, which we will not use for now because we will manually kick off our Lambda."&gt;&lt;/p&gt;
&lt;p&gt;However, we aren't going to set up a trigger for this function because 
we can manually test the Lambda later before connecting it to a trigger.
Leave the trigger icon blank and click the "Next" button to move along 
to the next screen.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170428-aws-lambda-python-2-7/blank-lambda.jpg" width="100%" class="shot rnd outl" alt="Blank Lambda configuration screen."&gt;&lt;/p&gt;
&lt;p&gt;Now we're on the screen where we can enter our specific configuration
and code for our new Lambda.&lt;/p&gt;
&lt;h2&gt;Writing Our Python Code&lt;/h2&gt;
&lt;p&gt;Start by entering a name for your Lambda function, such as "my_first_python_lambda" and a description. The description field is optional but it's handy
when you start using Lambda regularly to keep all your functions straight. 
In the Runtime drop-down, select Python 2.7 as the execution language.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170428-aws-lambda-python-2-7/first-python-lambda.jpg" width="100%" class="shot rnd outl" alt="Enter a name, description and select Python 2.7 on the Lambda configuration screen."&gt;&lt;/p&gt;
&lt;p&gt;Below the Runtime drop-down you'll see a large text box for writing code.
We can also choose to upload a ZIP file with our Python application which
is handy for more than simple test Lambdas. However, for our simple starter
Lambda application you can copy or type in the following code 
(&lt;a href="https://github.com/fullstackpython/blog-code-examples/blob/master/aws-lambda-python-2-7/lambda.py"&gt;or copy it from this GitHub repo&lt;/a&gt;). 
Make sure to replace what's already in the text box.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;lambda_handler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;what_to_print&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;what_to_print&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;how_many_times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;how_many_times&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# make sure what_to_print and how_many_times values exist&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;what_to_print&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;how_many_times&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;how_many_times&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;what_to_print&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;what_to_print&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above code has the required &lt;code&gt;lambda_handler&lt;/code&gt; function definition
that provides a hook for the Lambda service to know where to begin executing
the Python code. Think of &lt;code&gt;lambda_handler&lt;/code&gt; as a &lt;code&gt;main&lt;/code&gt; function when you're
using this service.&lt;/p&gt;
&lt;p&gt;Our Python code expects and reads two environment variables and then the
code prints a message zero to many times, based on the amount defined in 
the &lt;code&gt;how_many_times&lt;/code&gt; variable. If a message is printed then the function 
returns the &lt;code&gt;what_to_print&lt;/code&gt; string, if nothing is printed then &lt;code&gt;None&lt;/code&gt; is 
returned.&lt;/p&gt;
&lt;p&gt;Just below the code input text box there are environment variable key-value
pairs that can be set. Our code will use two environment variables, named
&lt;code&gt;what_to_print&lt;/code&gt; and &lt;code&gt;how_many_times&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Enter the keys named &lt;code&gt;what_to_print&lt;/code&gt; and &lt;code&gt;how_many_times&lt;/code&gt; then enter their 
values. Use a string message for &lt;code&gt;what_to_print&lt;/code&gt;'s value and an integer 
whole number above 0 for &lt;code&gt;how_many_times&lt;/code&gt;. Our Python code's error handling
is not very robust so a value other than a number in the &lt;code&gt;how_many_times&lt;/code&gt;
variable will cause the script to throw an error when it is executed.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170428-aws-lambda-python-2-7/environment-variables.jpg" width="100%" class="shot rnd outl" alt="Enter the exact keys of what_to_print and how_many_times along with corresponding values as environment variables."&gt;&lt;/p&gt;
&lt;p&gt;Our code and environment variables are in place and we just need to set
a few more AWS-specific settings before we can test the Lambda function.&lt;/p&gt;
&lt;h2&gt;Executing the Lambda&lt;/h2&gt;
&lt;p&gt;Scroll down below the environment variables to the 
"Lambda function handler and role" section. This section contains the last 
few required configuration items. Keep the default handler, which should 
be &lt;code&gt;lambda_function.lambda_handler&lt;/code&gt;. Select 
"Create a new Role from template(s)" from the drop-down then for the
"Role name" field enter "dynamodb_permissions". Under "Policy templates" 
select the "Simple Microservice permissions". &lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170428-aws-lambda-python-2-7/lambda-handler-and-role.jpg" width="100%" class="shot rnd outl" alt="For the final configuration, keep the default handler, create a new role from a template for Simple Microservice permissions and save it with a unique name."&gt;&lt;/p&gt;
&lt;p&gt;The "Simple Microservice permissions" gives our Lambda access to 
&lt;a href="https://aws.amazon.com/dynamodb/"&gt;AWS DynamoDB&lt;/a&gt;. We won't use DynamoDB in 
this tutorial but it's super useful as either permanent or temporary 
storage when working with Lambda.&lt;/p&gt;
&lt;p&gt;Now that our code and configuration is in place, click the "Next" button
at the bottom right corner of the page.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170428-aws-lambda-python-2-7/review-lambda.jpg" width="100%" class="shot rnd outl" alt="We can review the values set during our configuration."&gt;&lt;/p&gt;
&lt;p&gt;The review screen will show us our configuration settings. Scroll down
to the bottom and click the "Create function" button to continue.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170428-aws-lambda-python-2-7/create-function.jpg" width="100%" class="shot rnd outl" alt="Click the create function button to continue."&gt;&lt;/p&gt;
&lt;p&gt;We should see a success message on the next page just below the 
"Save and test" button.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170428-aws-lambda-python-2-7/save-and-test.jpg" width="100%" class="shot rnd outl" alt="Save and test button."&gt;&lt;/p&gt;
&lt;p&gt;Press the "Test" button to execute the Lambda. Lambda prompts us for
some data to simulate an event that would trigger our function. Select
the "Hello World" sample event template, which contains some example keys. 
Our Lambda will not those keys in its execution so it does not matter what
they are. Click the "Save and test" button at the bottom of the modal.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170428-aws-lambda-python-2-7/sample-event-template.jpg" width="100%" class="shot rnd outl" alt="Sample event template for our Lambda execution."&gt;&lt;/p&gt;
&lt;p&gt;Scroll down to the "Execution result" section where we can see our output.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170428-aws-lambda-python-2-7/execution-results.jpg" width="100%" class="" alt="Execution results from running our Lambda function."&gt;&lt;/p&gt;
&lt;p&gt;We get the log output that shows us the return value of our function. In
this case it is the string message from &lt;code&gt;what_to_print&lt;/code&gt;. We can also see
down below that our print function produced output five times. &lt;/p&gt;
&lt;h2&gt;What's Next?&lt;/h2&gt;
&lt;p&gt;Awesome, you just configured, wrote and executed your first Python 2.7
code on AWS Lambda! The real power of Lambda comes in when you connect a
trigger to it so your code executes based on events. We'll take a look
at that in the next tutorial.&lt;/p&gt;
&lt;p&gt;What else can you do with Python and Lambda? Take a look at the 
&lt;a href="/aws-lambda.html"&gt;AWS Lambda&lt;/a&gt; page for more examples and tutorials. &lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I am also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170428-python-2-7-aws-lambda.markdown"&gt;this page's source on GitHub&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>如何为你和你的团队选择合适的 DevOps 工具</title><link href="https://www.fullstackpython.com/blog/choose-right-devops-tools.html" rel="alternate"></link><published>2017-03-01T00:00:00-05:00</published><updated>2017-03-01T00:00:00-05:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-02-27:blog/choose-right-devops-tools.html</id><summary type="html">&lt;p&gt;This blog post contains a loose transcript along with the slides and 
additional resources from my technical talk that will be given at 
&lt;a href="https://developer.oracle.com/code/sanfrancisco"&gt;Oracle Code SF 2017&lt;/a&gt;
and &lt;a href="https://www.meetup.com/DC-continuous-delivery/"&gt;DC Continuous Delivery&lt;/a&gt; 
within the next couple of months.&lt;/p&gt;
&lt;p&gt;Additional resources to learn more about &lt;a href="/deployments.html"&gt;deployments&lt;/a&gt;,
&lt;a href="/configuration-management.html"&gt;configuration management&lt;/a&gt; and 
&lt;a href="/devops.html"&gt;DevOps&lt;/a&gt; are listed at the end of the post.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/title-slide.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Title slide for technical talk."&gt;&lt;/p&gt;
&lt;p&gt;Hey folks, my name is Matt Makai. I'm a 
&lt;a href="https://www.twilio.com/blog/2014/02/introducing-developer-evangelist-matt-makai.html"&gt;Developer Evangelist with Twilio&lt;/a&gt;
and the creator of &lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/python-swift-love.jpg" width="100%" class="technical-diagram img-rounded" alt="Python and Swift logos with the heart eyes emoji."&gt;&lt;/p&gt;
&lt;p&gt;Over the past couple of years I've been coding mostly in Python and Swift. 
I bring that up because the way we build, deploy and operate applications in 
either ecosystem is different. It would not make sense to forcefully recommend 
a single way to work in your own ecosystem if it is different than the ones I 
work in.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/java-only.jpg" width="100%" class="technical-diagram img-rounded" alt="Java programming language logo."&gt;&lt;/p&gt;
&lt;p&gt;I used to do a ton of Java development. That's how I started my professional
career before I moved mostly into Python and Swift.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/dark-ages.jpg" width="100%" class="technical-diagram img-rounded" alt="2004, the dark ages of software development?"&gt;&lt;/p&gt;
&lt;p&gt;Back in my own software development dark ages of 2004, I learned about a
concept that got me interested in DevOps before it was called DevOps: 
&lt;a href="/source-control.html"&gt;source control&lt;/a&gt;, also known as version control. We don't 
talk much about source control being a DevOps tool, but it really
is the foundational layer for everything you want to automate with code.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/different-versions.jpg" width="100%" class="technical-diagram img-rounded" alt="Diff two commits on GitHub."&gt;&lt;/p&gt;
&lt;p&gt;Nowadays we have amazing open source distributed version control systems
and beautiful web application front ends to visualize our code changes over
time. Yet there is still a small percentage of developers who don't use source
control.&lt;/p&gt;
&lt;p&gt;It might seem crazy but I know developers at Fortune 500 companies that still
do not use source control! How do you automate building, deploying, testing
and operating your application if you don't even have your files versioned?&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/pat-on-back.jpg" width="100%" class="technical-diagram img-rounded" alt="Give yourself a pat on the back."&gt;&lt;/p&gt;
&lt;p&gt;Let's start off this discussion of DevOps tools with a pat on your own back
if you already use source control. Nice work! We've come a long way as an
industry in the last couple of decades when source control was an exotic 
concept for most developers.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/git-logo.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Git logo."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/question-1.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Do you know a developer who strongly recommends a tool after 4+ years?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/question-2.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="What is the difference between a concept and an implementation?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/devops-1-layer.png" width="100%" class="technical-diagram img-rounded" alt="Source control (version control) as bottom layer in DevOps."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/question-3.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Question 3: On a 0 (lowest) -&gt; 10 scale, how amenable is your organization to improving the technical environment?"&amp;gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/question-4.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Question 4: How many people on your team get stoked about making incremental fixes to your technical environment?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/devops-2-layers.png" width="100%" class="technical-diagram img-rounded" alt="CI, automated tests and app dependencies as layer 2 in DevOps."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/continuous-integration-implementations.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Open source and hosted versions of CI, such as Jenkins, GoCD, and StriderCI, along with CircleCI, Travis CI and CodeBuild."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/test-automation.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Test automation concepts and their implementations in Python ecosystem as examples."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/bash.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="$bash."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/python-fabric-logo.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Python Fabric library logo."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/ansible-logo.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Ansible logo."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/devops-3-layers.png" width="100%" class="technical-diagram img-rounded" alt="Configuration management and automated deployments in layer 3 of DevOps."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/configuration-management-tools.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Configuration management implementations such as Ansible, Chef, Puppet and SaltStack."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/ansible-commands.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Example for Ansible YAML command to install packages through apt."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/question-5.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="How many times per day does your team deploy to test? How about production?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/question-6.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="How many times per day do you want to deploy to test? To production?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/question-7.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="What are the top 5 specific impediments to completing automating your deployments?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/question-8.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Who on your team gets excited about continuous delivery?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/question-9.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Who on your team is responsible for improving automated deployments and continuous delivery?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/django-logo.jpg" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Django logo."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/devops-4-layers.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Monitoring, logging and measuring in layer 4 of DevOps."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/question-10.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="What metrics do you collect that feed into every sprint?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/question-11.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="How many days would it take to put a new code library into production?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/deploys-2016.jpg" width="100%" class="technical-diagram img-rounded" alt="6,643 deploys per year for Twilio in 2015."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/question-12.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="How much money, if any, can you spend to jump start monitoring your environment?"&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/devops-4-layers.png" width="100%" class="technical-diagram img-rounded" alt="Repeat monitoring, loggin and measuring in 4 layer DevOps slide."&gt;&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170227-choose-devops-tools/contact-info.png" width="100%" class="technical-diagram img-rounded" style="border: 1px solid #aaa" alt="Contact info end slide."&gt;&lt;/p&gt;
&lt;p&gt;My name is Matt Makai and I'm a Developer Evangelist with Twilio, a Python
and Swift developer, as well as the author of 
&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;. You can get in
touch with me via these channels. Thank you!&lt;/p&gt;</summary></entry><entry><title>在macOS Sierra上创建SSH密钥</title><link href="https://www.fullstackpython.com/blog/ssh-keys-macos-sierra.html" rel="alternate"></link><published>2017-04-28T00:00:00-04:00</published><updated>2017-04-28T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-02-20:blog/ssh-keys-macos-sierra.html</id><summary type="html">&lt;p&gt;&lt;a href="/deployment.html"&gt;Deploying&lt;/a&gt; Python applications typically requires
SSH keys. An SSH key has both a public and a private key file. You can 
use the private key to authenticate when syncing remote &lt;a href="/git.html"&gt;Git&lt;/a&gt; 
repositories, connect to remote &lt;a href="/servers.html"&gt;servers&lt;/a&gt; and automate 
your application's deployments via 
&lt;a href="/configuration-management.html"&gt;configuration management&lt;/a&gt; tools like 
Ansible. Let's learn how to generate SSH key pairs on 
&lt;a href="http://www.apple.com/macos/sierra/"&gt;macOS Sierra&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Generating New Keys&lt;/h2&gt;
&lt;p&gt;Bring up a new terminal window on macOS by going into Applications/Utilities
and opening "Terminal".&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170220-ssh-keys-macos/new-terminal.jpg" width="100%" class="technical-diagram img-rounded" alt="New macOS terminal window."&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ssh-keygen&lt;/code&gt; command provides an interactive command line interface for
generating both the public and private keys. Invoke &lt;code&gt;ssh-keygen&lt;/code&gt; with the
following &lt;code&gt;-t&lt;/code&gt; and &lt;code&gt;-b&lt;/code&gt; arguments to ensure we get a 4096 bit RSA key. Note 
that you &lt;em&gt;must&lt;/em&gt; use a key with 2048 or more bits in macOS Sierra or the
system will not allow you to connect to servers with it.&lt;/p&gt;
&lt;p&gt;Optionally, you can also specify your email address with &lt;code&gt;-C&lt;/code&gt; (otherwise 
one will be generated off your current macOS account):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen -t rsa -b &lt;span class="m"&gt;4096&lt;/span&gt; -C my.email.address@company.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The first prompt you will see asks where to save the key. However, there are
actually two files that will be generated: the public key and the private 
key. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Generating public/private rsa key pair.
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;/Users/matt/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This prompt refers to the private key and whatever you enter will also
generate a second file for the public key that has the same name and &lt;code&gt;.pub&lt;/code&gt; 
appended.&lt;/p&gt;
&lt;p&gt;If you already have a key then specify a new filename. I use many
SSH keys so I oftne name them "test-deploy", "prod-deploy", "ci-server"
along with a unique project name. Naming is one of those hard computer 
science problems, so take some time to come up with a system that works for
you!&lt;/p&gt;
&lt;p&gt;Next you will see a prompt for an optional passphrase:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whether or not you want a passphrase depends on how you will use the key.
The system will ask you for the passphrase whenever you use the SSH key,
although 
&lt;a href="http://apple.stackexchange.com/questions/254468/macos-sierra-doesn-t-seem-to-remember-ssh-keys-between-reboots"&gt;macOS can store the passphrase in your system Keychain&lt;/a&gt; 
after the first time you enter it. However, if you are automating deployments 
with a &lt;a href="/continuous-integration.html"&gt;continuous integration&lt;/a&gt; server like
&lt;a href="/jenkins.html"&gt;Jenkins&lt;/a&gt; then you will not want a passphrase.&lt;/p&gt;
&lt;p&gt;Note that it is impossible to recover a passphrase if it is lost. Keep 
that passphrase safe and secure because otherwise a completely new key would 
have to be generated.&lt;/p&gt;
&lt;p&gt;Enter the passphrase (or just press enter to not have a passphrase) twice.
You'll see some output like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;: 
Enter same passphrase again: 
Your identification has been saved in /Users/matt/.ssh/deploy_prod.
Your public key has been saved in /Users/matt/.ssh/deploy_prod.pub.
The key fingerprint is:
SHA256:UnRGH/nzYzxUFS9jjd0wOl1ScFGKgW3pU60sSxGnyHo matthew.makai@gmail.com
The key&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s randomart image is:
+---&lt;span class="o"&gt;[&lt;/span&gt;RSA &lt;span class="m"&gt;4096&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;----+
&lt;span class="p"&gt;|&lt;/span&gt;        ..+o++**@&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;       . +.o*O.@&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;        . oo*&lt;span class="o"&gt;=&lt;/span&gt;B.*&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;       . .  &lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;o&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;+ &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;      . S E. +oo &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;       . .  .  &lt;span class="o"&gt;=&lt;/span&gt;.&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;              . o&lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;                 &lt;span class="p"&gt;|&lt;/span&gt;
+----&lt;span class="o"&gt;[&lt;/span&gt;SHA256&lt;span class="o"&gt;]&lt;/span&gt;-----+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your SSH key is ready to use!&lt;/p&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;Now that you have your public and private keys, I recommend building and
deploying some &lt;a href="/web-development.html"&gt;Python web apps&lt;/a&gt; such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/blog/build-first-slack-bot-python.html"&gt;Building your first Slack bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/send-mms-picture-messages-python.html"&gt;Sending picture or video messages via a REST API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/dial-outbound-phone-calls-python-bottle.html"&gt;Dialing outbound phone calls&lt;/a&gt;
  with the &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; web framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional &lt;code&gt;ssh-keygen&lt;/code&gt; command resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://testequals.com/2016/09/09/macos-sierra-10-12-ssh-keys/"&gt;SSH keys on macOS Sierra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/"&gt;Generating a new SSH key and adding it to the ssh-agent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170220-create-ssh-keys-macos.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>在Ubuntu Linux 16.04 LTS上创建SSH密钥</title><link href="https://www.fullstackpython.com/blog/ssh-keys-ubuntu-linux.html" rel="alternate"></link><published>2017-04-28T00:00:00-04:00</published><updated>2017-04-28T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2017-02-14:blog/ssh-keys-ubuntu-linux.html</id><summary type="html">&lt;p&gt;SSH keys are a necessity for Python development when you are working with
&lt;a href="/git.html"&gt;Git&lt;/a&gt;, connecting to remote servers and automating your
&lt;a href="/deployment.html"&gt;deployments&lt;/a&gt;. Let's walk through how to generate SSH
key pairs, which contain both a public and a private key within a single 
pair, on Ubuntu Linux.&lt;/p&gt;
&lt;h2&gt;Generating the Public and Private Keys&lt;/h2&gt;
&lt;p&gt;Open up a new terminal window in Ubuntu like we see in the following 
screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/170214-ssh-keys-ubuntu/new-ubuntu-terminal.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;ssh-keygen&lt;/code&gt; command provides an interactive command line interface for
generating both the public and private keys. Invoke &lt;code&gt;ssh-keygen&lt;/code&gt; with the
following &lt;code&gt;-t&lt;/code&gt; and &lt;code&gt;-b&lt;/code&gt; arguments to ensure we get a 4096 bit RSA key.
Optionally, you can also specify your email address with &lt;code&gt;-C&lt;/code&gt; (otherwise 
one will be generated off your current Linux account):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ssh-keygen -o -t rsa -b &lt;span class="m"&gt;4096&lt;/span&gt; -C my.email.address@company.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Note: the &lt;code&gt;-o&lt;/code&gt; option was introduced in 2014; if this command fails for you, simply remove the &lt;code&gt;-o&lt;/code&gt; option)&lt;/p&gt;
&lt;p&gt;The first prompt you will see asks where to save the key. However, there are
actually two files that will be generated: the public key and the private 
key. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Generating public/private rsa key pair.
Enter file in which to save the key &lt;span class="o"&gt;(&lt;/span&gt;/home/matt/.ssh/id_rsa&lt;span class="o"&gt;)&lt;/span&gt;: 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This prompt refers to the private key and whatever you enter will also
generate a second file for the public key that has the same name and &lt;code&gt;.pub&lt;/code&gt; 
appended.&lt;/p&gt;
&lt;p&gt;If you already have a key, you should specify a new filename. I use many
SSH keys so I typically name them "test-deploy", "prod-deploy", "ci-server"
along with a unique project name. Naming is one of those hard computer 
science problems, so take some time to come up with a system that works for
you and the development team you work with!&lt;/p&gt;
&lt;p&gt;Next you will see a prompt for an optional passphrase:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Enter passphrase &lt;span class="o"&gt;(&lt;/span&gt;empty &lt;span class="k"&gt;for&lt;/span&gt; no passphrase&lt;span class="o"&gt;)&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whether or not you want a passphrase depends on how you will use the key.
The system will ask you for the passphrase whenever you use the SSH key
so it is more secure.
However, if you are automating deployments with a 
&lt;a href="/continuous-integration.html"&gt;continuous integration&lt;/a&gt; server like
&lt;a href="/jenkins.html"&gt;Jenkins&lt;/a&gt; then you will not want a passphrase.&lt;/p&gt;
&lt;p&gt;Be aware that it is impossible to recover a passphrase if it is lost. Keep 
that passphrase safe and secure because otherwise a completely new key would 
have to be generated.&lt;/p&gt;
&lt;p&gt;Enter the passphrase (or just press enter to not have a passphrase) twice.
You'll see some output like the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Your identification has been saved in /home/matt/.ssh/prod_deploy.
Your public key has been saved in /home/matt/.ssh/prod_deploy.pub.
The key fingerprint is:
SHA256:xoCWgk40XfM5mruZQNCVoBKXZ4d0gn09ivVENacb7xw matt@ubuntu
The key&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s randomart image is:
+---&lt;span class="o"&gt;[&lt;/span&gt;RSA &lt;span class="m"&gt;2048&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;----+
&lt;span class="p"&gt;|&lt;/span&gt;.oo*&lt;span class="o"&gt;==&lt;/span&gt;oo..o .    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;.+*.*** &lt;span class="o"&gt;=&lt;/span&gt;  +     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;o+.++&lt;span class="o"&gt;=&lt;/span&gt;.B .o      &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;+ .o. +oo  +     &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt; . . o  S . E    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;  .   ..   o .   &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;   . .      o    &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;    . +          &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;     +           &lt;span class="p"&gt;|&lt;/span&gt;
+----&lt;span class="o"&gt;[&lt;/span&gt;SHA256&lt;span class="o"&gt;]&lt;/span&gt;-----+
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your SSH key is now generated and ready to use!&lt;/p&gt;
&lt;h2&gt;What now?&lt;/h2&gt;
&lt;p&gt;Now that you have your public and private keys, I recommend setting
up a &lt;a href="/development-environments.html"&gt;Python development environment&lt;/a&gt; with 
one of the following tutorials so you can start coding:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;Setting up Python 3, Django and Gunicorn on Ubuntu 16.04 LTS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/install-redis-use-python-3-ubuntu-1604.html"&gt;How to Use Redis with Python 3 and redis-py on Ubuntu 16.04&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/blog/postgresql-python-3-psycopg2-ubuntu-1604.html"&gt;Setting up PostgreSQL with Python 3 and psycopg on Ubuntu 16.04&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional &lt;code&gt;ssh-keygen&lt;/code&gt; command resources:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://manpages.ubuntu.com/manpages/xenial/man1/ssh-keygen.1.html"&gt;ubuntu manuals ssh-keygen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/"&gt;Generating a new SSH key and adding it to the ssh-agent&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/170214-create-ssh-keys-ubuntu.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>如何用 Python 打电话</title><link href="https://www.fullstackpython.com/blog/make-phone-calls-python.html" rel="alternate"></link><published>2017-07-22T00:00:00-04:00</published><updated>2017-07-22T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-11-23:blog/make-phone-calls-python.html</id><summary type="html">&lt;p&gt;Good old-fashioned phone calls remain one of the best forms of communication
despite the slew of new smartphone apps that have popped up over the past
several years. With just a few lines of Python code plus a 
&lt;a href="/application-programming-interfaces.html"&gt;web application programming interface&lt;/a&gt; 
we can make and receive phone calls from any application. &lt;/p&gt;
&lt;p&gt;Our example calls will say a snippet of text and put all incoming callers 
into a recorded conference call. You can modify the instructions using 
&lt;a href="https://www.twilio.com/docs/api/twiml"&gt;Twilio's TwiML verbs&lt;/a&gt; when you 
perform different actions in your own application's phone calls.&lt;/p&gt;
&lt;h2&gt;Our Tools&lt;/h2&gt;
&lt;p&gt;You should have either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt; installed to
build this application. Throughout the post we will also use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle
  &lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A free &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio account&lt;/a&gt; to use their 
  &lt;a href="https://www.twilio.com/docs/api/rest/making-calls"&gt;phone calling web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Twilio's 
  &lt;a href="https://www.twilio.com/docs/libraries/python"&gt;Python helper library&lt;/a&gt;,
  version 5.7.0, which is 
  &lt;a href="https://pypi.org/project/twilio"&gt;available on PyPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can snag all the open source code for this tutorial in the 
&lt;a href="https://github.com/mattmakai/python-twilio-example-apps/tree/master/no-framework/phone-calls"&gt;python-twilio-example-apps&lt;/a&gt;
GitHub repository under the 
&lt;a href="https://github.com/mattmakai/python-twilio-example-apps/tree/master/no-framework/phone-calls"&gt;no-framework/phone-calls&lt;/a&gt; directory.
Use and copy the code for your own applications. Everything in that 
repository and in this blog post are open source under the MIT license.&lt;/p&gt;
&lt;h2&gt;Install App Dependencies&lt;/h2&gt;
&lt;p&gt;Our application will use the &lt;a href="/twilio.html"&gt;Twilio&lt;/a&gt; 
&lt;a href="https://www.twilio.com/docs/libraries/python"&gt;Python helper library&lt;/a&gt;
to create an HTTP POST request to Twilio's API. The Twilio helper library is 
installable from &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; into a virtual 
environment. Open your terminal and use the &lt;code&gt;virtualenv&lt;/code&gt; command to create 
a new virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv phoneapp
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Invoke the &lt;code&gt;activate&lt;/code&gt; script within the virtualenv &lt;code&gt;bin/&lt;/code&gt; directory to make 
this virtualenv the active Python executable. Note that you will need to 
perform this step in every terminal window that you want the virtualenv to 
be active.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source phoneapp/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after activating the virtualenv
to something like &lt;code&gt;(phoneapp) $&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Next use the &lt;code&gt;pip&lt;/code&gt; command to install the 
&lt;a href="https://www.twilio.com/docs/libraries/python"&gt;Twilio Python&lt;/a&gt; package
into the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install twilio==5.7.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will have the required dependency ready for project as soon as the 
installation script finishes. Now we can write and execute Python code to 
dial phone numbers.&lt;/p&gt;
&lt;h2&gt;Our Python Script&lt;/h2&gt;
&lt;p&gt;Create a new file named &lt;code&gt;phone_calls.py&lt;/code&gt; and copy or type in the following
lines of code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;


&lt;span class="c1"&gt;# Twilio phone number goes here. Grab one at https://twilio.com/try-twilio&lt;/span&gt;
&lt;span class="c1"&gt;# and use the E.164 format, for example: &amp;quot;+12025551234&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;TWILIO_PHONE_NUMBER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# list of one or more phone numbers to dial, in &amp;quot;+19732644210&amp;quot; format&lt;/span&gt;
&lt;span class="n"&gt;DIAL_NUMBERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;

&lt;span class="c1"&gt;# URL location of TwiML instructions for how to handle the phone call&lt;/span&gt;
&lt;span class="n"&gt;TWIML_INSTRUCTIONS_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; \
  &lt;span class="s2"&gt;&amp;quot;http://static.fullstackpython.com/phone-calls-python.xml&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# replace the placeholder values with your Account SID and Auth Token&lt;/span&gt;
&lt;span class="c1"&gt;# found on the Twilio Console: https://www.twilio.com/console&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ACxxxxxxxxxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;yyyyyyyyyy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dial_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numbers_list&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Dials one or more phone numbers from a Twilio phone number.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;numbers_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Dialing &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# set the method to &amp;quot;GET&amp;quot; from default POST because Amazon S3 only&lt;/span&gt;
        &lt;span class="c1"&gt;# serves GET requests on files. Typically POST would be used for apps&lt;/span&gt;
        &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TWILIO_PHONE_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;TWIML_INSTRUCTIONS_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;method&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;dial_numbers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DIAL_NUMBERS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are a few lines that you need to modify in this application before it
will run. First, insert one or more phone numbers you wish to dial into the 
DIAL_NUMBERS list. Each one should be a string, separated by a comma. For
example, &lt;code&gt;DIAL_NUMBERS = ["+12025551234", "+14155559876", "+19735551234"]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, &lt;code&gt;TWILIO_PHONE_NUMBER&lt;/code&gt; and the Account SID and Authentication Token,
found on the &lt;code&gt;client = TwilioRestClient("ACxxxxxxxxxx", "yyyyyyyyyy")&lt;/code&gt; 
line, need to be set. We can get these values from the 
&lt;a href="https://www.twilio.com/console"&gt;Twilio Console&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In your web browser go to the
&lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio website and sign up for a free account&lt;/a&gt; 
or sign into your existing Twilio account.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/161123-python-phone-calls/try-twilio.png" width="100%" class="technical-diagram img-rounded" alt="Twilio sign up screen."&gt;&lt;/p&gt;
&lt;p&gt;Copy the Account SID and Auth Token from the Twilio Console and paste them 
into your application's code: &lt;/p&gt;
&lt;p&gt;&lt;img src="/img/161123-python-phone-calls/twilio-console-tokens.png" width="100%" class="technical-diagram img-rounded" alt="Obtain the Account SID and Auth Token from the Twilio Console."&gt;&lt;/p&gt;
&lt;p&gt;The Twilio trial account allows you to dial and receive phone calls to 
your own validated phone number. To handle calls from any phone 
number then you need to upgrade your account (hit the upgrade button on the
top navigation bar). &lt;/p&gt;
&lt;p&gt;Once you are signed into your Twilio account, go to the 
&lt;a href="https://www.twilio.com/console/phone-numbers"&gt;manage phone numbers screen&lt;/a&gt;.
On this screen you can 
&lt;a href="https://www.twilio.com/console/phone-numbers/search"&gt;buy one or more phone numbers&lt;/a&gt;
or click on an existing phone number in your account to configure it.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/161123-python-phone-calls/manage-numbers.jpg" width="100%" class="technical-diagram img-rounded" alt="Manage phone numbers screen."&gt;&lt;/p&gt;
&lt;p&gt;After clicking on a number you will reach the phone number configuration
screen. Paste in the URL with TwiML instructions and change the dropdown from
"HTTP POST" to "HTTP GET". In this post we'll use 
&lt;code&gt;http://static.fullstackpython.com/phone-calls-python.xml&lt;/code&gt;, but that URL 
can be more than just a static XML file. &lt;/p&gt;
&lt;p&gt;&lt;img src="/img/161123-python-phone-calls/twiml-url-number-screen.jpg" width="100%" class="technical-diagram img-rounded" alt="Twilio phone number configuration screen."&gt;&lt;/p&gt;
&lt;p&gt;The power of Twilio really comes in when that URL is handled by your web 
application so it can dynamically respond with TwiML instructions based on 
the incoming caller number or other properties stored in your database.&lt;/p&gt;
&lt;p&gt;Under the Voice webhook, paste in 
&lt;code&gt;http://static.fullstackpython.com/phone-calls-python.xml&lt;/code&gt; and change the
drop-down to the right from "HTTP POST" to "HTTP GET". Click the "Save" 
button at the bottom of the screen.&lt;/p&gt;
&lt;p&gt;Now try calling your phone number. You should hear the snippet of text
read by the Alice voice and then you will be placed into a conference call.
If no one else calls the number then hold music should be playing.&lt;/p&gt;
&lt;h2&gt;Making Phone Calls&lt;/h2&gt;
&lt;p&gt;We just handled inbound phone calls to our phone number. Now it's time to 
dial outbound phone calls. Make sure your &lt;code&gt;phone_calls.py&lt;/code&gt; file is saved 
and that your virtualenv is still activated and then execute the script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python phone_calls.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In a moment all the phone numbers you write in the &lt;code&gt;DIAL_NUMBERS&lt;/code&gt; list
should light up with calls. Anyone that answers will hear our message read
by the "Alice" voice and then they'll be placed together into a recorded 
conference call, just like when someone dials into the number. &lt;/p&gt;
&lt;p&gt;Here is my inbound phone call:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/161123-python-phone-calls/inbound-call.png" width="100%" class="technical-diagram img-rounded" alt="Receiving an incoming phone call on the iPhone."&gt;&lt;/p&gt;
&lt;p&gt;Not bad for just a few lines of Python code!&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Now that we know how to make and receive phone calls from a Twilio number 
that follows programmatic instructions we can do a whole lot more in our
applications. Next you can use one of these tutorials to do more with 
your phone number:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/blog/2016/05/add-phone-calling-slack-python.html"&gt;Build a phone-calling Slack bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/docs/tutorials/walkthrough/masked-numbers/python/flask"&gt;Mask phone numbers for anonymous communication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.twilio.com/docs/tutorials/walkthrough/call-tracking/python/django"&gt;Add call tracking to see metrics for phone calls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub as
&lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/161123-make-phone-calls.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>使用 Bottle Web 应用程序拨打出站电话</title><link href="https://www.fullstackpython.com/blog/dial-outbound-phone-calls-python-bottle.html" rel="alternate"></link><published>2017-06-16T00:00:00-04:00</published><updated>2017-06-16T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-08-30:blog/dial-outbound-phone-calls-python-bottle.html</id><summary type="html">&lt;p&gt;Python web apps built with the &lt;a href="/bottle.html"&gt;Bottle web framework&lt;/a&gt; can 
&lt;a href="/blog/send-sms-text-messages-python.html"&gt;send&lt;/a&gt; and 
&lt;a href="/blog/reply-sms-text-messages-python-bottle.html"&gt;receive SMS text messages&lt;/a&gt;.
In this tutorial we will go beyond texting and learn how to dial outbound 
phone calls. The calls will read a snippet of text then play an MP3 file,
but they can then be easily modified to create conference lines and many
other voice features in your Python web apps.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;You should have either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt; installed to
create your Bottle app, although Python 3 is recommended for new 
applications. We also need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle
  &lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ngrok.com/"&gt;Ngrok&lt;/a&gt; for localhost tunneling to our Bottle
  application while it's running on our local development environment&lt;/li&gt;
&lt;li&gt;&lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; web framework&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio account&lt;/a&gt; to use their 
  &lt;a href="https://www.twilio.com/docs/api/rest/making-calls"&gt;phone calling web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Twilio's 
  &lt;a href="https://www.twilio.com/docs/libraries/python"&gt;Python helper library&lt;/a&gt;,
  which is &lt;a href="https://github.com/twilio/twilio-python"&gt;open source on GitHub&lt;/a&gt; 
  and &lt;a href="https://pypi.org/project/twilio"&gt;available for download from PyPI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Take a look at 
&lt;a href="/blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;this guide on setting up Python 3, Bottle and Gunicorn on Ubuntu 16.04 LTS&lt;/a&gt;
if you need help getting your 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; 
configured before continuing on through the remainder of this tutorial.&lt;/p&gt;
&lt;p&gt;You can snag all the open source code for this tutorial in the 
&lt;a href="https://github.com/mattmakai/python-bottle-phone"&gt;python-bottle-phone&lt;/a&gt;
GitHub repository under the 
&lt;a href="https://github.com/mattmakai/python-bottle-phone/tree/master/outbound-calls"&gt;outbound directory&lt;/a&gt;. 
Use and copy the code however you want - it's all open source under the 
MIT license.&lt;/p&gt;
&lt;h2&gt;Installing Our Application Dependencies&lt;/h2&gt;
&lt;p&gt;Our Bottle app needs a helper code library to make it easy to dial outbound
phone calls. Bottle and the Twilio helper library are installable from 
&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; into a virtualenv. Open your terminal 
and use the &lt;code&gt;virtualenv&lt;/code&gt; command to create a new virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv bottlephone
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use the &lt;code&gt;activate&lt;/code&gt; script within the virtualenv, which makes this virtualenv
the active Python installation. Note that you need to do this in every 
terminal window that you want this virtualenv to be used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source bottlephone/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after activating the virtualenv
to something like &lt;code&gt;(bottlephone) $&lt;/code&gt;. Here is a screenshot of what my
environment looked like when I used the &lt;code&gt;activate&lt;/code&gt; script.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160830-phone-calls-bottle/activate-virtualenv.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Next use the &lt;code&gt;pip&lt;/code&gt; command to install the &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; and 
&lt;a href="https://www.twilio.com/docs/libraries/python"&gt;Twilio Python&lt;/a&gt; packages
into your virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install bottle twilio==5.7.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After the installation script finishes, we will have the required 
dependencies to build our app. Time to write some Python code to dial 
outbound phone calls.&lt;/p&gt;
&lt;h2&gt;Bottle and Twilio&lt;/h2&gt;
&lt;p&gt;Our simple Bottle web app will have three routes: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;/&lt;/code&gt; - returns a text string to let us know our Bottle app is running&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/twiml&lt;/code&gt; - responds with &lt;a href="https://www.twilio.com/docs/api/twiml"&gt;TwiML&lt;/a&gt; 
  (a simple subset of XML) that instructs Twilio what to do when someone
  picks up the call to them from our Bottle web app&lt;/li&gt;
&lt;li&gt;&lt;code&gt;/dial-phone/&amp;lt;outbound_phone_number&amp;gt;&lt;/code&gt;, where "outbound_phone_number" is
  a phone number in the format "+12025551234" - this route uses the Twilio
  helper library to send a POST request to the Twilio Voice API to dial a
  phone  call&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can build the structure of our Bottle app and the first route right now.
Create a new file named &lt;code&gt;app.py&lt;/code&gt; with the following contents to start our
app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;twiml&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# plug in account SID and auth token here if they are not already exposed as&lt;/span&gt;
&lt;span class="c1"&gt;# environment variables&lt;/span&gt;
&lt;span class="n"&gt;twilio_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;TWILIO_NUMBER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TWILIO_NUMBER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;+12025551234&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;NGROK_BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NGROK_BASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://c6c6d4e8.ngrok.io&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Returns a standard text response to show the app is up and running.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bottle app running!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reloader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make sure you are in the directory where you created the above &lt;code&gt;app.py&lt;/code&gt;
file. Run the app via the Bottle development server with the following 
command. Make sure your virtualenv is still activated so our code can rely 
on the Bottle code library.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python app.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We should see a successful development server start up like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(bottlephone) matt@ubuntu:~/bottlephone$ python app.py 
Bottle v0.12.9 server starting up (using WSGIRefServer())...
Listening on http://127.0.0.1:8000/
Hit Ctrl-C to quit.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is what the development server message looks like in my environment 
on Ubuntu:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160830-phone-calls-bottle/bottle-app-running.png" width="100%" class="technical-diagram img-rounded" alt="Successfully starting the Bottle development server from the command line."&gt;&lt;/p&gt;
&lt;p&gt;Let's test out the app by going to "localhost:8000"
in the web browser. We should get a simple success message that the app
is running and responding to requests.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160830-phone-calls-bottle/bottle-app-web-browser.png" width="100%" class="technical-diagram img-rounded" alt="Simple success message in the web browser that the Bottle app is running."&gt;&lt;/p&gt;
&lt;p&gt;Next we need to obtain a phone number that our Bottle app can use to 
call other phone numbers.&lt;/p&gt;
&lt;h2&gt;Obtain a Phone Number&lt;/h2&gt;
&lt;p&gt;Our basic Bottle web app is running but what we really want to do is dial
outbound calls - which will be handled by &lt;a href="https://www.twilio.com/"&gt;Twilio&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In your web browser go to the
&lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio website and sign up for a free account&lt;/a&gt;. 
You can also sign into your existing Twilio account if you already have one.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160830-phone-calls-bottle/try-twilio.png" width="100%" class="technical-diagram img-rounded" alt="Twilio sign up screen."&gt;&lt;/p&gt;
&lt;p&gt;The Twilio trial account allows you to dial and receive phone calls to 
your own validated phone number. To dial and receive calls from any phone 
number then you need to upgrade your account (hit the upgrade button on the
top navigation bar to do that). Trial accounts are great for initial 
development before your application goes live but upgraded accounts are where
the real power comes in.&lt;/p&gt;
&lt;p&gt;Once you are signed into your Twilio account, go to the 
&lt;a href="https://www.twilio.com/console/phone-numbers"&gt;manage phone numbers screen&lt;/a&gt;.
On this screen you can 
&lt;a href="https://www.twilio.com/console/phone-numbers/search"&gt;buy one or more phone numbers&lt;/a&gt;
or click on an existing phone number in your account to configure it.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160830-phone-calls-bottle/manage-phone-numbers.png" width="100%" class="technical-diagram img-rounded" alt="Manage phone numbers screen."&gt;&lt;/p&gt;
&lt;p&gt;There is nothing for us to configure right now on the phone number 
configuration page because we are making outbound phone calls for this 
tutorial. Now that we have a phone number in hand, let's add the final bit
of code to our Bottle app to get this app working.&lt;/p&gt;
&lt;h2&gt;Making Phone Calls&lt;/h2&gt;
&lt;p&gt;We need to add two new routes to our Bottle app so it can dial outbound
phone calls. Modify your existing app.py file with the two new functions
below, &lt;code&gt;twiml_response&lt;/code&gt; and &lt;code&gt;outbound_call&lt;/code&gt;. None of the other code in
this file needs to change other than adding those two new functions to
what we wrote in the previous section.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;twiml&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# plug in account SID and auth token here if they are not already exposed as&lt;/span&gt;
&lt;span class="c1"&gt;# environment variables&lt;/span&gt;
&lt;span class="n"&gt;twilio_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TwilioRestClient&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# add your Twilio phone number here&lt;/span&gt;
&lt;span class="n"&gt;TWILIO_NUMBER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TWILIO_NUMBER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;+16093002984&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# plug in your Ngrok Forwarding URL - we&amp;#39;ll set it up in a minute&lt;/span&gt;
&lt;span class="n"&gt;NGROK_BASE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NGROK_BASE_URL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://c6c6d4e8.ngrok.io&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Returns a standard text response to show the app is up and running.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Bottle app running!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/twiml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;twiml_response&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Provides TwiML instructions in response to a Twilio POST webhook&lt;/span&gt;
&lt;span class="sd"&gt;    event so that Twilio knows how to handle the outbound phone call&lt;/span&gt;
&lt;span class="sd"&gt;    when someone picks up the phone.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twiml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;say&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Sweet, this phone call is answered by your Bottle app!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;play&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://api.twilio.com/cowbell.mp3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loop&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/dial-phone/&amp;lt;outbound_phone_number&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;outbound_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;outbound_phone_number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    Uses the Twilio Python helper library to send a POST request to&lt;/span&gt;
&lt;span class="sd"&gt;    Twilio telling it to dial an outbound phone call from our specific&lt;/span&gt;
&lt;span class="sd"&gt;    Twilio phone number (that phone number must be owned by our Twilio &lt;/span&gt;
&lt;span class="sd"&gt;    account).&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# the url must match the Ngrok Forwarding URL plus the route defined in&lt;/span&gt;
    &lt;span class="c1"&gt;# the previous function that responds with TwiML instructions&lt;/span&gt;
    &lt;span class="n"&gt;twilio_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;calls&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;outbound_phone_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                               &lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;BLOG_POST_NUMBER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                               &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;NGROK_BASE_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/twiml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;phone call placed to &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;outbound_phone_number&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reloader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is just one problem with our current setup if you're developing on
a local environment: Twilio won't be able to reach that &lt;code&gt;/twiml&lt;/code&gt; route. 
We need to deploy our app to a reachable server, or just use a localhost 
tunneling tool like &lt;a href="https://ngrok.com"&gt;Ngrok&lt;/a&gt;. Ngrok provides an external
URL that connects to a port running on your machine. 
&lt;a href="https://ngrok.com/download"&gt;Download and install the Ngrok application&lt;/a&gt; 
that is appropriate for your operating system.&lt;/p&gt;
&lt;p&gt;We run Ngrok locally and expose our Bottle app that is running on 
port 8000. Run this command within the directory where the Ngrok executable is
located.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./ngrok http 8000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ngrok will start up and provide us with a Forwarding URL, with both HTTP
and HTTPS versions.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160830-phone-calls-bottle/start-ngrok.png" width="100%" class="technical-diagram img-rounded" alt="Ngrok started and running to serve as a localhost tunnel."&gt;&lt;/p&gt;
&lt;p&gt;We can use the Forwarding URL to instruct Twilio how to handle the outbound
phone call when someone picks up. Insert the Ngrok forwarding URL into the
&lt;code&gt;app.py&lt;/code&gt; file where &lt;code&gt;NGROK_BASE_URL&lt;/code&gt; is specified.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160830-phone-calls-bottle/access-ngrok.png" width="100%" class="technical-diagram img-rounded" alt="Paste the ngrok Forwarding URL into the Twilio webhook configuration text box."&gt;&lt;/p&gt;
&lt;p&gt;If Ngrok is useful to you, make sure to read this 
&lt;a href="https://www.twilio.com/blog/2015/09/6-awesome-reasons-to-use-ngrok-when-testing-webhooks.html"&gt;6 awesome reasons to use Ngrok when testing webhooks post&lt;/a&gt; 
to learn even more about the tool.&lt;/p&gt;
&lt;p&gt;Time to test out our app, let's give it a quick spin.&lt;/p&gt;
&lt;h2&gt;Making Phone Calls&lt;/h2&gt;
&lt;p&gt;Make sure your Bottle development server is still running or re-run it with
the &lt;code&gt;python app.py&lt;/code&gt; command in a shell where your virtualenv is still
activated.&lt;/p&gt;
&lt;p&gt;Bring up the application in a browser, this time test out the phone calling
capabilities. Go to "localhost:8000/dial-phone/my-phone-number", where 
"my-phone-number" is a number in the "+12025551234" format. For example,
here is what happens when I dialed +12023351278:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160830-phone-calls-bottle/phone-call-placed.png" width="100%" class="technical-diagram img-rounded" alt="Dialing an outbound phone call with Bottle."&gt;&lt;/p&gt;
&lt;p&gt;And here is the inbound phone call!&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160830-phone-calls-bottle/inbound-call.png" width="100%" class="technical-diagram img-rounded" alt="Receiving an incoming phone call on the iPhone."&gt;&lt;/p&gt;
&lt;p&gt;When we pick up the phone call we also see the &lt;code&gt;/twiml&lt;/code&gt; route get called via
Ngrok.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160830-phone-calls-bottle/ngrok-twiml.png" width="100%" class="technical-diagram img-rounded" alt="/twiml route being called via Ngrok."&gt;&lt;/p&gt;
&lt;p&gt;With just two routes in our Bottle app and Twilio we were able to make
outbound phone calls. Not bad!&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Sweet, we can now dial outbound phone calls to &lt;em&gt;any&lt;/em&gt; phone number from
our Bottle web application. Next you may want to try one of these tutorials 
to add even more features to your app:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upgrade your &lt;a href="/blog/reply-sms-text-messages-python-bottle.html"&gt;Bottle app to also send and respond to text messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a &lt;a href="https://www.twilio.com/blog/2016/05/add-phone-calling-slack-python.html"&gt;phone-calling Slack bot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implement &lt;a href="https://www.twilio.com/docs/tutorials/walkthrough/call-tracking/python/django"&gt;call tracking&lt;/a&gt;
  for both inbound and outbound phone calls made through your app&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub as
&lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160830-phone-calls-bottle.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>企业 Python</title><link href="https://www.fullstackpython.com/blog/python-entrepreneurs.html" rel="alternate"></link><published>2017-04-25T00:00:00-04:00</published><updated>2017-04-25T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-07-30:blog/python-entrepreneurs.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.kickstarter.com/projects/mikeckennedy/python-for-entrepreneurs-video-course"&gt;Python for Entrepreneurs&lt;/a&gt;
is a new video course by the creators of 
&lt;a href="https://talkpython.fm/"&gt;Talk Python to Me&lt;/a&gt; and 
&lt;a href="https://fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Update&lt;/em&gt;: The Kickstarter has been funded! Michael and I are hard 
at work on the course content. Thank you to everyone who supported 
us as a backer. The course is available in early access mode on
&lt;a href="https://training.talkpython.fm"&gt;training.talkpython.fm&lt;/a&gt; until it
is fully released.&lt;/p&gt;
&lt;p&gt;We are creating this course and running a Kickstarter for it based on 
feedback that it's still too damn difficult to turn basic Python programming 
knowledge into a business to generate income as a side or full time project. 
Both Michael and I have been able to make that happen for ourselves and we 
want to share every difficult lesson we've learned through this course.&lt;/p&gt;
&lt;p&gt;The Python for Entrepreneurs videos and content will dive into building 
and deploying a real-world web application, marketing it to prospective 
customers, handling search engine optimization, making money through credit 
card payments, getting help from part-time contractors for niche tasks and 
scaling up to meet traffic demands.&lt;/p&gt;
&lt;p&gt;If this course hits the mark for what you want to do with Python,
&lt;a href="https://www.kickstarter.com/projects/mikeckennedy/python-for-entrepreneurs-video-course"&gt;check out the Kickstarter&lt;/a&gt; - we've 
set up steep discounts for early backers.&lt;/p&gt;
&lt;p&gt;If you have any questions, please reach out to 
&lt;a href="https://twitter.com/mkennedy"&gt;Michael Kennedy&lt;/a&gt; 
or me, &lt;a href="https://twitter.com/mattmakai"&gt;Matt Makai&lt;/a&gt;.&lt;/p&gt;</summary></entry><entry><title>在 Linux Mint 17.3 上设置 Python 3，Django 和 Gunicorn</title><link href="https://www.fullstackpython.com/blog/python-3-django-gunicorn-linux-mint-17.html" rel="alternate"></link><published>2016-07-22T00:00:00-04:00</published><updated>2016-07-22T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-06-26:blog/python-3-django-gunicorn-linux-mint-17.html</id><summary type="html">&lt;p&gt;Linux Mint 17.3 "Rosa" is December 2015 release of the polished and 
widely-used Linux distribution. This Mint release includes both Python 2.7 
and 3.4 by default, but in this tutorial we will download and install the 
latest Python 3.5.1 version to run our Django application. &lt;/p&gt;
&lt;p&gt;If you want to use a different Linux distribution such as 
&lt;a href="/ubuntu.html"&gt;Ubuntu&lt;/a&gt; instead of Mint, check out
&lt;a href="/blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;the tutorial for Ubuntu 16.04 "Xenial Xerus"&lt;/a&gt;. If Mint is your desired 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; though, let's
get started!&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;Our setup will use several system packages and code libraries to get
up and running. Do not worry about installing these dependencies just yet, 
we will get to them as we progress through the tutorial. The tools and 
their current versions as of June 2016 are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://blog.linuxmint.com/?p=2947"&gt;Linux Mint 17.3 "Rosa"&lt;/a&gt; with the 
  default Cinnamon desktop&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; version 
  &lt;a href="https://www.python.org/downloads/release/python-351/"&gt;3.5.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/django.html"&gt;Django&lt;/a&gt; web framework version 
  &lt;a href="https://docs.djangoproject.com/en/1.9/releases/1.9/"&gt;1.9.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; version 
  &lt;a href="http://docs.gunicorn.org/en/stable/news.html"&gt;19.6&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are on Mac OS X or Windows, my recommendation is to use 
virtualization software such as 
&lt;a href="https://www.parallels.com/products/desktop/"&gt;Parallels&lt;/a&gt; or
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt; with the 
&lt;a href="https://www.linuxmint.com/download.php"&gt;Linux Mint Cinnamon desktop .iso&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We should see a desktop screen like this one when we boot up the operating 
system for the first time.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160626-mint-django-gunicorn/mint-desktop.jpg" width="100%" class="technical-diagram img-rounded" alt="Linux Mint default desktop"&gt;&lt;/p&gt;
&lt;p&gt;Open up terminal to proceed with the configuration.&lt;/p&gt;
&lt;h2&gt;System Packages&lt;/h2&gt;
&lt;p&gt;We can see the Python version Linux Mint comes with, as well as where its
executable is stored.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 --version
which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;output&lt;/em&gt; of those two commands should be (these are not commands to run):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Python 3.4.3
/usr/bin/python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160626-mint-django-gunicorn/which-python.png" width="100%" class="technical-diagram img-rounded" alt="Output of 'python --version' and 'which python3' commands."&gt;&lt;/p&gt;
&lt;p&gt;We really want to use the latest Python release instead of the default 3.4
when starting a new Python project, so let's download and install 3.5.1 now.&lt;/p&gt;
&lt;p&gt;Run these commands in the terminal to download Python 3.5.1 source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/Downloads
wget https://www.python.org/ftp/python/3.5.1/Python-3.5.1.tgz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160626-mint-django-gunicorn/download-python.png" width="100%" class="technical-diagram img-rounded" alt="wget Python source code output."&gt;&lt;/p&gt;
&lt;p&gt;Extract the Python source code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tar -xvf Python-3.5.1.tgz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Linux Mint is not configured by default to build the Python source code. We
need to update our system package lists and install several packages to 
make building the Python source code possible. If you have a password on 
your user account, enter it when prompted to allow the installation to 
proceed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt update
sudo apt install build-essential checkinstall
sudo apt install libreadline-gplv2-dev libncursesw5-dev libssl-dev 
sudo apt install libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev
sudo apt install python3-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the packages are installed, we can configure and install Python from
source.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd Python-3.5.1
./configure
sudo make install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test that the installation worked properly by starting up the Python REPL:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3.5
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the REPL starts up properly with Python 3.5.1 in the output then we're
good to go.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160626-mint-django-gunicorn/python351-output.png" width="100%" class="technical-diagram img-rounded" alt="wget Python source code output."&gt;&lt;/p&gt;
&lt;p&gt;The basic system packages we need are now installed so we can proceed to
our Python-specific dependencies.&lt;/p&gt;
&lt;h2&gt;Virtual environment and pip&lt;/h2&gt;
&lt;p&gt;Python 3.5 comes with the virtual environment and pip applications so we 
can use them to handle our
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create a directory to store virtual environments then create a virtualenv
for our Django project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# the tilde &amp;quot;~&amp;quot; specifies the user&amp;#39;s home directory, like /home/matt
cd ~
mkdir venvs
# specify the system python3 installation
python3.5 -m venv djangoproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source ~/venvs/djangoproj/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our virtual environment is properly activated when we see &lt;code&gt;(djangoproj)&lt;/code&gt;
prepended to our prompt. &lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160626-mint-django-gunicorn/venv-activated.png" width="100%" class="technical-diagram img-rounded" alt="Output from the virtualenv environment activation."&gt;&lt;/p&gt;
&lt;p&gt;Our virtualenv with Python 3.5.1 is activated so we can install whatever
dependencies we want, such as Django and Gunicorn. Our default &lt;code&gt;python&lt;/code&gt;
command is also set to use the Python 3.5.1 installation instead of the
Python 2.7 version that comes with Linux Mint.&lt;/p&gt;
&lt;h2&gt;Django and Gunicorn&lt;/h2&gt;
&lt;p&gt;Now we can install Django and Green Unicorn into our virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install django==1.9.7 gunicorn==19.6
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If there are no errors in the pip output then that is a good sign we can 
proceed.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160626-mint-django-gunicorn/good-sign.png" width="100%" class="technical-diagram img-rounded" alt="Django and Gunicorn properly install via the pip command."&gt;&lt;/p&gt;
&lt;p&gt;Create a new Django project named &lt;code&gt;djangoproj&lt;/code&gt;, or whatever you want to name
your project. Change into the directory for the new project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~
django-admin startproject djangoproj
cd djangoproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can run Django using the development server with the 
&lt;code&gt;python manage.py runserver&lt;/code&gt; command. However, start Django up with
Gunicorn instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn djangoproj.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160626-mint-django-gunicorn/gunicorn-run.png" width="100%" class="technical-diagram img-rounded" alt="Result of running gunicorn djangoproj.wsgi on the command line."&gt;&lt;/p&gt;
&lt;p&gt;Awesome, we can bring up our shell project in the web browser at
the &lt;a href="http://localhost:8000"&gt;http://localhost:8000&lt;/a&gt; or 
&lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt; address.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160626-mint-django-gunicorn/it-works.png" width="100%" class="technical-diagram img-rounded" alt="Django project running in the Firefox web browser."&gt;&lt;/p&gt;
&lt;p&gt;Now you're ready for Django development!&lt;/p&gt;
&lt;h2&gt;Ready for Development&lt;/h2&gt;
&lt;p&gt;Those are the first few steps for beginning development with 
&lt;a href="/django.html"&gt;Django&lt;/a&gt; and &lt;a href="/green-unicorn-gunicorn.html"&gt;Gunicorn&lt;/a&gt; on 
Linux Mint 17.3 "Rosa". If you need an even more in-depth walkthrough for 
deploying your Python web application to a production environment, check 
out the 
&lt;a href="http://www.deploypython.com/"&gt;Full Stack Python Guide to Deployments book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To figure out what to do next for your Python project, read the topics 
found on the &lt;a href="/table-of-contents.html"&gt;table of contents&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160626-django-gunicorn-mint-linux-17.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>在 Ubuntu 16.04 上配置 Python 3，Pyramid 和 Gunicorn</title><link href="https://www.fullstackpython.com/blog/python-3-pyramid-gunicorn-ubuntu-1604-xenial-xerus.html" rel="alternate"></link><published>2016-08-10T00:00:00-04:00</published><updated>2016-08-10T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-06-19:blog/python-3-pyramid-gunicorn-ubuntu-1604-xenial-xerus.html</id><summary type="html">&lt;p&gt;&lt;a href="/ubuntu.html"&gt;Canonical's Ubuntu 16.04 Long Term Support (LTS)&lt;/a&gt; Linux
&lt;a href="/operating-systems.html"&gt;operating system&lt;/a&gt;, also known as "Xenial Xerus",
was released in April 2016. It is the first Ubuntu release to include 
&lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt; instead of Python 2 as its default Python 
installation.&lt;/p&gt;
&lt;p&gt;The &lt;a href="/pyramid.html"&gt;Pyramid&lt;/a&gt; web framework has long supported Python 3.
With just a few short steps we can start a new &lt;a href="/pyramid.html"&gt;Pyramid&lt;/a&gt; 
project and run it with 
&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; on Ubuntu 16.04.&lt;/p&gt;
&lt;h2&gt;Required Tools&lt;/h2&gt;
&lt;p&gt;Our project requires Ubuntu 16.04 plus several code libraries. You do not
need to install these tools yet - we will get to them in turn as the
walkthrough progresses. Our requirements and their current versions are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04 LTS (Xenial Xerus)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-use-python.html"&gt;Python version 3.5&lt;/a&gt; (default in Ubuntu 16.04)&lt;/li&gt;
&lt;li&gt;&lt;a href="/pyramid.html"&gt;Pyramid web framework&lt;/a&gt; version 
  &lt;a href="http://docs.pylonsproject.org/projects/pyramid/en/1.7-branch/"&gt;1.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/green-unicorn-gunicorn.html"&gt;Gunicorn&lt;/a&gt; version 
  &lt;a href="http://docs.gunicorn.org/en/stable/news.html"&gt;19.6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.pylonsproject.org/projects/waitress/en/latest/"&gt;Waitress&lt;/a&gt;
  version 0.9.0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are developing on Mac OS X or Windows, you can use
virtualization software such
as &lt;a href="https://www.parallels.com/products/desktop/"&gt;Parallels&lt;/a&gt; or
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt; with the 
&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu .iso file&lt;/a&gt;. Either the amd64 or
i386 version of 16.04 is fine. While creating this I used the amd64 version. &lt;/p&gt;
&lt;p&gt;A desktop screen like this one appears when you boot up Ubuntu.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160619-ubuntu-pyramid-gunicorn/ubuntu-desktop.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Open a new terminal window so we can be ready to install required system 
packages.&lt;/p&gt;
&lt;h2&gt;Install System Packages&lt;/h2&gt;
&lt;p&gt;The precise Python version can be shown using the &lt;code&gt;python&lt;/code&gt; command with the
&lt;code&gt;--version&lt;/code&gt; argument.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 --version
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can also view where the &lt;code&gt;python3&lt;/code&gt; program is installed on Ubuntu using the
&lt;code&gt;which&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160619-ubuntu-pyramid-gunicorn/which-python.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu requires a few system packages before we can properly install Pyramid
and Gunicorn. When we run the &lt;code&gt;apt&lt;/code&gt; command to install system packages we 
will be prompted for the superuser password. Restricted system access is 
necessary to modify files within the system folders.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python3-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160619-ubuntu-pyramid-gunicorn/install-packages.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;code&gt;y&lt;/code&gt; then return to let the system package installation run.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160619-ubuntu-pyramid-gunicorn/packages-installed.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The required system packages are installed. We can now install the
Python-specific dependencies.&lt;/p&gt;
&lt;h2&gt;Set up a virtual environment&lt;/h2&gt;
&lt;p&gt;Create a directory for the virtual environments. Then create a new virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# the tilde &amp;quot;~&amp;quot; specifies the user&amp;#39;s home directory, like /home/matt
cd ~
mkdir venvs
# specify the system python3 installation
/usr/bin/python3 -m venv venvs/pyramidproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source ~/venvs/pyramidproj/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our prompt will change after we properly activate the virtual environment to
something like &lt;code&gt;(pyramidproj) matt@ubuntu:~$&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160619-ubuntu-pyramid-gunicorn/venv-activated.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our virtual environment is activated with Python 3.&lt;/p&gt;
&lt;p&gt;We should update pip and venv to the latest versions in our virtual environment.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install --upgrade pip setuptools
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can install whatever dependencies we want, in our case Pyramid and Gunicorn. &lt;/p&gt;
&lt;h2&gt;Install Python Packages&lt;/h2&gt;
&lt;p&gt;We can install Pyramid, Gunicorn and Waitress into our virtual environment using 
the &lt;code&gt;pip&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pip install &amp;quot;pyramid==1.7&amp;quot; gunicorn waitress
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No errors like we see in the following screenshot is a good sign.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160619-ubuntu-pyramid-gunicorn/good-sign.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Pyramid comes with a project starter template creation tool named &lt;code&gt;pcreate&lt;/code&gt;.
Run &lt;code&gt;pcreate&lt;/code&gt; to generate the boilerplate for a new Pyramid project named
"pyramidproj".&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pcreate -s starter pyramidproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use the &lt;code&gt;cd&lt;/code&gt; (change directory) command to move into the new folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd ~/pyramidproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A slew of new files have been created within the "pyramidproj" directory.
These are the basic files you can customize for the web application you want
to build. A good resource for understanding and modifying these files is
to follow the 
&lt;a href="http://docs.pylonsproject.org/projects/pyramid/en/1.7-branch/quick_tutorial/index.html"&gt;quick tutorial for Pyramid&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For now, we just want to use Gunicorn to run our starter pyramidproj app.
Install pyramidproj into your virtual environment using the &lt;code&gt;python&lt;/code&gt; command on
&lt;code&gt;setup.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py develop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can run our app with Gunicorn. Pyramid is a 
&lt;a href="http://docs.pylonsproject.org/projects/pyramid/en/latest/api/paster.html"&gt;paste&lt;/a&gt;-compatible
framework, so we use the &lt;code&gt;--paste&lt;/code&gt; argument to run the WSGI server with
the "development.ini" configuration file. In addition, the &lt;code&gt;-b&lt;/code&gt; argument 
tells Gunicorn which port number to bind on when the server starts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn --paste development.ini -b :8080
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160619-ubuntu-pyramid-gunicorn/gunicorn-run.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Cool, we can bring up our starter Pyramid project up in the web browser at
the &lt;code&gt;localhost:8000&lt;/code&gt; or &lt;code&gt;127.0.0.1:8000&lt;/code&gt; address.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160619-ubuntu-pyramid-gunicorn/it-works.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Time to develop a full-fledged web application with &lt;a href="/pyramid.html"&gt;Pyramid&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Ready to Develop with Pyramid&lt;/h2&gt;
&lt;p&gt;Now you have a simple setup to develop Pyramid web apps using Gunicorn as
the &lt;a href="/wsgi-servers.html"&gt;WSGI server&lt;/a&gt; on Ubuntu 16.04. If you need a
full step-by-step tutorial to deploy your Python web application to a
production environment, check out the 
&lt;a href="http://www.deploypython.com/"&gt;Full Stack Python Guide to Deployments book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To decide what to do next with your Python project, check out the
&lt;a href="/table-of-contents.html"&gt;Full Stack Python table of contents&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160619-pyramid-gunicorn-ubuntu-1604.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>使用 Python 和 Bottle 回复 SMS 文本消息</title><link href="https://www.fullstackpython.com/blog/reply-sms-text-messages-python-bottle.html" rel="alternate"></link><published>2016-08-10T00:00:00-04:00</published><updated>2016-08-10T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-06-05:blog/reply-sms-text-messages-python-bottle.html</id><summary type="html">&lt;p&gt;Python applications can 
&lt;a href="/blog/send-sms-text-messages-python.html"&gt;easily send SMS&lt;/a&gt; 
by using a &lt;a href="/application-programming-interfaces.html"&gt;web API&lt;/a&gt;. 
Web apps built with the &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; framework can also reply
to incoming text messages by handling inbound HTTP POST webhooks. In
this post we'll quickly walk through how to set up a Bottle web app to
handle SMS data in the form of HTTP POST requests.&lt;/p&gt;
&lt;h2&gt;Tools We'll Need&lt;/h2&gt;
&lt;p&gt;This tutorial works with either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt;, 
although Python 3 is recommended by the community for new applications. 
Install one of those two Python versions on your system to use for this
walkthrough. We also need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle
  &lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; web framework&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ngrok.com/"&gt;Ngrok&lt;/a&gt; for localhost tunneling to our Bottle
  application while it's running on our local development environment&lt;/li&gt;
&lt;li&gt;Free &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio account&lt;/a&gt; to use their 
  &lt;a href="https://www.twilio.com/docs/api/rest/sending-messages"&gt;SMS web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open source 
  &lt;a href="https://pypi.org/project/twilio"&gt;Twilio Python helper library&lt;/a&gt;,
  version 5.7.0 or earlier&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out the guide on 
&lt;a href="/blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Bottle and Gunicorn on Ubuntu 16.04 LTS&lt;/a&gt;
if you need help getting your 
&lt;a href="/development-environments.html"&gt;development environment&lt;/a&gt; 
configured.&lt;/p&gt;
&lt;h2&gt;Application Dependency Installation&lt;/h2&gt;
&lt;p&gt;Our application will use a helper code library to reply to inbound SMS.
Bottle and the helper library are installable from 
&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; into a virtualenv. Open your terminal 
and use the &lt;code&gt;virtualenv&lt;/code&gt; command to create a new virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv replysms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Invoke the virtualenv's &lt;code&gt;activate&lt;/code&gt; script, which makes it the "active" 
Python installation. Note that you need to do this in every terminal window
that you want this virtualenv to be used.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source replysms/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after activating the virtualenv:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160605-reply-sms-python-bottle/activate-virtualenv.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;pip&lt;/code&gt; command to install the &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; and 
&lt;a href="https://www.twilio.com/docs/libraries/python"&gt;Twilio Python&lt;/a&gt; packages
into your virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install bottle twilio==5.7.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We have installed the required dependencies so now Python code that is run 
with the virtualenv activated will be able to use those packages. It's time 
to build our Bottle web app and reply to incoming text messages.&lt;/p&gt;
&lt;h2&gt;Coding Our Bottle App&lt;/h2&gt;
&lt;p&gt;The Bottle web app will have two routes. One route will allow us to test
that the app is running. The other route will handle and respond to incoming
HTTP POST requests from Twilio. Create a new file named &lt;code&gt;app.py&lt;/code&gt; in your 
in the directory where you want to store this Python project.&lt;/p&gt;
&lt;p&gt;Write the following code in the new &lt;code&gt;app.py&lt;/code&gt; file. There is also
&lt;a href="https://gist.github.com/mattmakai/6ec3b46e40a1020a3ea9c772c601199a"&gt;a GitHub Gist&lt;/a&gt; 
with the code that you can copy and paste.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;twiml&lt;/span&gt;


&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_app&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# returns a simple string stating the app is working&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;It works!&amp;quot;&lt;/span&gt;


&lt;span class="nd"&gt;@post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/twilio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inbound_sms&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;twiml_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twiml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# grab message from the request. could also get the &amp;quot;To&amp;quot; and &lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;quot;From&amp;quot; phone numbers as well from parameters with those names&lt;/span&gt;
    &lt;span class="n"&gt;inbound_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# we can now use the incoming message text in our Python application&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inbound_message&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;twiml_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello from Bottle right back at you!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;twiml_response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi! Not quite sure what you meant, but okay.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# we return back the mimetype because Twilio needs an XML response&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/xml&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;twiml_response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;127.0.0.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reloader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The lines starting with &lt;code&gt;#&lt;/code&gt; are comments that give explanations for what
the code lines below them are doing. Bottle web apps define URL routes with 
the &lt;code&gt;@route&lt;/code&gt; and &lt;code&gt;@post&lt;/code&gt; decorators, depending on the type of HTTP request
the route should handle. &lt;/p&gt;
&lt;p&gt;Make sure your virtualenv is still active so that the application can use 
the Bottle and Twilio code libraries we installed earlier. Give the 
application a try by running it with &lt;code&gt;python app.py&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Open a web browser and go to localhost:5000 (or 127.0.0.1:5000). We should
see "It works!" on the screen.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160605-reply-sms-python-bottle/bottle-app-local.jpg" width="100%" class="technical-diagram img-rounded" alt="Bottle application running locally on Ubuntu."&gt;&lt;/p&gt;
&lt;p&gt;However, there is an issue with our web app running on our local development
environment. Twilio cannot send a the HTTP POST request to the web app
server unless a localhost tunnel is created.&lt;/p&gt;
&lt;h2&gt;Ngrok Localhost Tunneling&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://ngrok.com"&gt;Ngrok&lt;/a&gt; is a localhost tunneling tool that bridges
your local development environment to an external URL. 
&lt;a href="https://ngrok.com/download"&gt;Download and install&lt;/a&gt; the Ngrok version that's
appropriate for your operating system.&lt;/p&gt;
&lt;p&gt;We can run Ngrok locally and expose our Bottle app that is running on 
port 5000. Run this command within the directory where the Ngrok executable is
located.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./ngrok http 5000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160605-reply-sms-python-bottle/start-ngrok.jpg" width="100%" class="technical-diagram img-rounded" alt="Ngrok started and running to serve as a localhost tunnel."&gt;&lt;/p&gt;
&lt;p&gt;Cool, now we can use the Forwarding URL so Twilio can send POST requests
to our application when there is an inbound SMS. Replace the URL in the
text box with your own Forwarding URL, like I did in this screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160605-reply-sms-python-bottle/access-ngrok.jpg" width="100%" class="technical-diagram img-rounded" alt="Paste the ngrok Forwarding URL into the Twilio webhook configuration text box."&gt;&lt;/p&gt;
&lt;p&gt;Now we just need a Twilio phone number that will send POST request to our
application when there is an inbound SMS.&lt;/p&gt;
&lt;h2&gt;Obtain a Phone Number&lt;/h2&gt;
&lt;p&gt;Our Bottle web app's route can respond to incoming POST requests but we
need to use Twilio to have a phone number that will convert the inbound SMS
data into the POST request. In your web browser go to the
&lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio website and sign up for a free account&lt;/a&gt;. 
You can also sign into your existing Twilio account if you already have one.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160605-reply-sms-python-bottle/try-twilio.png" width="100%" class="technical-diagram img-rounded" alt="Twilio sign up screen."&gt;&lt;/p&gt;
&lt;p&gt;The Twilio trial account allows you to send and receive text messages to 
your own validated phone number. To send and reply to SMS to and from any 
phone number then you need to upgrade your account. Trial accounts are 
great for initial development before your application goes live.&lt;/p&gt;
&lt;p&gt;When you sign up, you receive a free Twilio phone number. We can
configure that phone number to forward the SMS information to our web 
application by setting up the response webhook.&lt;/p&gt;
&lt;p&gt;Go to the 
&lt;a href="https://www.twilio.com/console/phone-numbers"&gt;manage phone numbers screen&lt;/a&gt; 
and click on the phone number you want to configure for replying to 
text messages.&lt;/p&gt;
&lt;p&gt;Scroll down and look for the "Messaging" header. Change the 
"A Message Comes in" text box to input the ngrok Forwarding URL plus 
the "/twilio" route, as shown in the screenshot below.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160605-reply-sms-python-bottle/webhook-ngrok.jpg" width="100%" class="technical-diagram img-rounded" alt="Paste the ngrok Forwarding URL into the Twilio webhook configuration text box."&gt;&lt;/p&gt;
&lt;p&gt;Click the "Save" button so that our changes take effect.&lt;/p&gt;
&lt;p&gt;Our application is ready to go - time to give our phone number a try! 
Send "Hello" or whatever text you want to your phone number. Here is what 
the result looks like on my iPhone.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160605-reply-sms-python-bottle/bottle-success.png" width="100%" class="technical-diagram img-rounded" alt="Example screenshot of what SMS replies look like on the iPhone."&gt;&lt;/p&gt;
&lt;p&gt;The concise Bottle web app is a good start to build more complicated
programs such as 
&lt;a href="https://www.twilio.com/blog/2014/11/choose-your-own-adventure-presentations-with-reveal-js-python-and-websockets.html"&gt;Choose Your Own Adventure Presentations&lt;/a&gt;
or
&lt;a href="https://www.twilio.com/blog/2016/05/build-sms-slack-bot-python.html"&gt;SMS Slack bots&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Awesome, our Bottle application now replies to inbound SMS text
messages! &lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160605-reply-sms-python-bottle.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>如何使用 Python 构建你的第一个 Slack 机器人</title><link href="https://www.fullstackpython.com/blog/build-first-slack-bot-python.html" rel="alternate"></link><published>2017-12-13T00:00:00-05:00</published><updated>2017-12-13T00:00:00-05:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-06-04:blog/build-first-slack-bot-python.html</id><summary type="html">&lt;p&gt;&lt;a href="/bots.html"&gt;Bots&lt;/a&gt; are a useful way to interact with chat services such as
&lt;a href="https://slack.com/"&gt;Slack&lt;/a&gt;. If you have never built a bot before, this
post provides an easy starter tutorial for combining the
&lt;a href="https://api.slack.com/"&gt;Slack API&lt;/a&gt; with Python to create your first bot.&lt;/p&gt;
&lt;p&gt;We will walk through setting up your development environment, obtaining a
Slack API bot token and coding our simple bot in Python.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;Our bot, which we will name "StarterBot", requires Python and the Slack API.
To run our Python code we need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and
  &lt;a href="https://virtualenv.pypa.io/en/stable/"&gt;virtualenv&lt;/a&gt; to handle Python
  &lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://slack.com/"&gt;Free Slack account&lt;/a&gt; - you need to be signed into at
  least one workspace where you have access to building apps.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is also useful to have the &lt;a href="https://api.slack.com/"&gt;Slack API docs&lt;/a&gt; handy
while you're building this tutorial.&lt;/p&gt;
&lt;p&gt;All the code for this tutorial is available open source under the MIT license
in the &lt;a href="https://github.com/mattmakai/slack-starterbot"&gt;slack-starterbot&lt;/a&gt; public
repository.&lt;/p&gt;
&lt;h2&gt;Establishing Our Environment&lt;/h2&gt;
&lt;p&gt;We now know what tools we need for our project so let's get our development
environment set up. Go to the terminal (or Command Prompt on Windows) and
change into the directory where you want to store this project. Within
that directory, create a new virtualenv to isolate our application
dependencies from other Python projects.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv starterbot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source starterbot/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Your prompt should now look like the one in this screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160604-simple-python-slack-bot/virtualenv-activate.png" width="100%" class="technical-diagram img-rounded" alt="Command prompt with starterbot's virtualenv activated."&gt;&lt;/p&gt;
&lt;p&gt;The official &lt;code&gt;slackclient&lt;/code&gt; API helper library built by Slack can send and
receive messages from a Slack channel. Install the slackclient library with
the &lt;code&gt;pip&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install slackclient
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When &lt;code&gt;pip&lt;/code&gt; is finished you should see output like this and you'll be
back at the prompt.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160604-simple-python-slack-bot/pip-install-slackclient.png" width="100%" class="technical-diagram img-rounded" alt="Output from using the pip install slackclient command with a virtualenv activated."&gt;&lt;/p&gt;
&lt;p&gt;We also need to &lt;a href="https://api.slack.com/apps/new"&gt;create a Slack App&lt;/a&gt; to recieve
an API token for your bot. Use "Starter Bot" as your App name. If you are signed
into more than one workspace, pick a Development Workspace from the dropdown.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160604-simple-python-slack-bot/create-slack-app.png" width="100%" class="technical-diagram img-rounded" alt="Create a Slack App form filled"&gt;&lt;/p&gt;
&lt;p&gt;After submitting the form, keep the app configuration page open.&lt;/p&gt;
&lt;h2&gt;Slack APIs and App Configuration&lt;/h2&gt;
&lt;p&gt;We want our Starter Bot to appear like any other user in your team - it will
participate in conversations inside channels, groups, and DMs. In a Slack
App, this is called a &lt;a href="https://api.slack.com/bot-users"&gt;bot user&lt;/a&gt;, which
we set up by choosing "Bot Users" under the "Features" section. After
clicking "Add a Bot User", you should choose a display name, choose a
default username, and save your choices by clicking "Add Bot User". You'll
end up with a page that looks like the following:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160604-simple-python-slack-bot/add-bot-user.png" width="100%" class="technical-diagram img-rounded" alt="Added a bot user to the Slack App"&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;slackclient&lt;/code&gt; library makes it simple to use Slack's
&lt;a href="https://api.slack.com/rtm"&gt;RTM API&lt;/a&gt; and &lt;a href="https://api.slack.com/web"&gt;Web API&lt;/a&gt;.
We'll use both to implement Starter Bot, and they each require authentication.
Conveniently, the bot user we created earlier can be used to authenticate for
both APIs.&lt;/p&gt;
&lt;p&gt;Click on the "Install App" under the "Settings" section. The button on this page
will install the App into our Development Workspace. Once the App is installed,
it displays a &lt;em&gt;bot user oauth access token&lt;/em&gt; for authentication as the bot user.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160604-simple-python-slack-bot/copy-bot-access-token.png" width="100%" class="technical-diagram img-rounded" alt="After installing on the development workspace, you can copy the bot user oauth access token"&gt;&lt;/p&gt;
&lt;p&gt;A common practice for Python developers is to export secret tokens as
environment variables. Back in your terminal, export the Slack token with the
name &lt;code&gt;SLACK_BOT_TOKEN&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export SLACK_BOT_TOKEN=&amp;#39;your bot user access token here&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Nice, now we are authorized to use the Slack RTM and Web APIs as a bot user.&lt;/p&gt;
&lt;h2&gt;Coding Our Starter Bot&lt;/h2&gt;
&lt;p&gt;We've got everything we need to write the Starter Bot code. Create a new file
named &lt;code&gt;starterbot.py&lt;/code&gt; and include the following code in it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;slackclient&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SlackClient&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With our dependencies imported we can use them to obtain the environment
variable values and then instantiate the Slack client.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# instantiate Slack client
slack_client = SlackClient(os.environ.get(&amp;#39;SLACK_BOT_TOKEN&amp;#39;))
# starterbot&amp;#39;s user ID in Slack: value is assigned after the bot starts up
starterbot_id = None

# constants
RTM_READ_DELAY = 1 # 1 second delay between reading from RTM
EXAMPLE_COMMAND = &amp;quot;do&amp;quot;
MENTION_REGEX = &amp;quot;^&amp;lt;@(|[WU].+?)&amp;gt;(.*)&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code instantiates the &lt;code&gt;SlackClient&lt;/code&gt; client with our &lt;code&gt;SLACK_BOT_TOKEN&lt;/code&gt;
exported as an environment variable. It also declares a variable we can use to
store the Slack user ID of our Starter Bot. A few constants are also declared,
and each of them will be explained as they are used in the code that follows.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;if __name__ == &amp;quot;__main__&amp;quot;:
    if slack_client.rtm_connect(with_team_state=False):
        print(&amp;quot;Starter Bot connected and running!&amp;quot;)
        # Read bot&amp;#39;s user ID by calling Web API method `auth.test`
        starterbot_id = slack_client.api_call(&amp;quot;auth.test&amp;quot;)[&amp;quot;user_id&amp;quot;]
        while True:
            command, channel = parse_bot_commands(slack_client.rtm_read())
            if command:
                handle_command(command, channel)
            time.sleep(RTM_READ_DELAY)
    else:
        print(&amp;quot;Connection failed. Exception traceback printed above.&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Slack client connects to the Slack RTM API. Once it's connected, it calls a
Web API method (&lt;a href="https://api.slack.com/methods/auth.test"&gt;&lt;code&gt;auth.test&lt;/code&gt;&lt;/a&gt;) to find
Starter Bot's user ID.&lt;/p&gt;
&lt;p&gt;Each bot user has a user ID for each workspace the Slack App is installed
within. Storing this user ID will help the program understand if someone has
mentioned the bot in a message.&lt;/p&gt;
&lt;p&gt;Next, the program enters an infinite loop, where each time the loop runs the
client recieves any events that arrived from Slack's RTM API. Notice that
before the loop ends, the program pauses for one second so that it doesn't loop
too fast and waste your CPU time.&lt;/p&gt;
&lt;p&gt;For each event that is read, the &lt;code&gt;parse_bot_commands()&lt;/code&gt; function determines if
the event contains a command for Starter Bot. If it does, then &lt;code&gt;command&lt;/code&gt; will
contain a value and the &lt;code&gt;handle_command()&lt;/code&gt; function determines what
to do with the command.&lt;/p&gt;
&lt;p&gt;We've laid the groundwork for processing Slack events and calling Slack methods
in the program. Next, add three new functions above the previous snippet to
complete handling commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def parse_bot_commands(slack_events):
    &amp;quot;&amp;quot;&amp;quot;
        Parses a list of events coming from the Slack RTM API to find bot commands.
        If a bot command is found, this function returns a tuple of command and channel.
        If its not found, then this function returns None, None.
    &amp;quot;&amp;quot;&amp;quot;
    for event in slack_events:
        if event[&amp;quot;type&amp;quot;] == &amp;quot;message&amp;quot; and not &amp;quot;subtype&amp;quot; in event:
            user_id, message = parse_direct_mention(event[&amp;quot;text&amp;quot;])
            if user_id == starterbot_id:
                return message, event[&amp;quot;channel&amp;quot;]
    return None, None

def parse_direct_mention(message_text):
    &amp;quot;&amp;quot;&amp;quot;
        Finds a direct mention (a mention that is at the beginning) in message text
        and returns the user ID which was mentioned. If there is no direct mention, returns None
    &amp;quot;&amp;quot;&amp;quot;
    matches = re.search(MENTION_REGEX, message_text)
    # the first group contains the username, the second group contains the remaining message
    return (matches.group(1), matches.group(2).strip()) if matches else (None, None)

def handle_command(command, channel):
    &amp;quot;&amp;quot;&amp;quot;
        Executes bot command if the command is known
    &amp;quot;&amp;quot;&amp;quot;
    # Default response is help text for the user
    default_response = &amp;quot;Not sure what you mean. Try *{}*.&amp;quot;.format(EXAMPLE_COMMAND)

    # Finds and executes the given command, filling in response
    response = None
    # This is where you start to implement more commands!
    if command.startswith(EXAMPLE_COMMAND):
        response = &amp;quot;Sure...write some more code then I can do that!&amp;quot;

    # Sends the response back to the channel
    slack_client.api_call(
        &amp;quot;chat.postMessage&amp;quot;,
        channel=channel,
        text=response or default_response
    )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;parse_bot_commands()&lt;/code&gt; function takes events from Slack and determines
if they are commands directed at Starter Bot. There are many
&lt;a href="https://api.slack.com/events"&gt;event types&lt;/a&gt; that our bot will encounter, but to
find commands we only want to consider
&lt;a href="https://api.slack.com/events/message"&gt;message events&lt;/a&gt;. Message events also have
subtypes, but the commands we want to find won't have any subtype defined. The
function filters out uninteresting events by checking these properties. Now we
know the event represents a message with some text, but we want to find out
if Starter Bot is being mentioned in the text. The &lt;code&gt;parse_direct_mention()&lt;/code&gt;
function will figure out of the message text starts with a mention, and then
we compare that to the user ID we stored earlier for Starter Bot. If they are
the same, then we know this is a bot command, and return the command text with
the channel ID.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;parse_direct_mentions()&lt;/code&gt; function uses a regular expression to determine
if a user is being mentioned &lt;em&gt;at the beginning&lt;/em&gt; of the message. It returns
the user ID and the remaining message (and &lt;code&gt;None, None&lt;/code&gt; if no mention was
found).&lt;/p&gt;
&lt;p&gt;The last function, &lt;code&gt;handle_command()&lt;/code&gt; is where in the future you'll add all the
interesting commands, humor, and personality for Starter Bot. For now, it has
just one example command: &lt;em&gt;do&lt;/em&gt;. If the command starts with a known command, it
will have an appropriate response. If not, a default response is used. The
response is sent back to Slack by calling the
&lt;a href="https://api.slack.com/methods/chat.postMessage"&gt;&lt;code&gt;chat.postMessage&lt;/code&gt;&lt;/a&gt; Web API
method with the channel.&lt;/p&gt;
&lt;p&gt;Here is how the entire program should look when it's all put together
(you can also
&lt;a href="https://github.com/mattmakai/slack-starterbot/blob/master/starterbot.py"&gt;view the file in GitHub&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;slackclient&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SlackClient&lt;/span&gt;


&lt;span class="c1"&gt;# instantiate Slack client&lt;/span&gt;
&lt;span class="n"&gt;slack_client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SlackClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;SLACK_BOT_TOKEN&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# starterbot&amp;#39;s user ID in Slack: value is assigned after the bot starts up&lt;/span&gt;
&lt;span class="n"&gt;starterbot_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="c1"&gt;# constants&lt;/span&gt;
&lt;span class="n"&gt;RTM_READ_DELAY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# 1 second delay between reading from RTM&lt;/span&gt;
&lt;span class="n"&gt;EXAMPLE_COMMAND&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;do&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;MENTION_REGEX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;^&amp;lt;@(|[WU].+?)&amp;gt;(.*)&amp;quot;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_bot_commands&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slack_events&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Parses a list of events coming from the Slack RTM API to find bot commands.&lt;/span&gt;
&lt;span class="sd"&gt;        If a bot command is found, this function returns a tuple of command and channel.&lt;/span&gt;
&lt;span class="sd"&gt;        If its not found, then this function returns None, None.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;slack_events&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;message&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;subtype&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;user_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_direct_mention&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;user_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;starterbot_id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;event&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;channel&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse_direct_mention&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message_text&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Finds a direct mention (a mention that is at the beginning) in message text&lt;/span&gt;
&lt;span class="sd"&gt;        and returns the user ID which was mentioned. If there is no direct mention, returns None&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MENTION_REGEX&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# the first group contains the username, the second group contains the remaining message&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;handle_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;        Executes bot command if the command is known&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Default response is help text for the user&lt;/span&gt;
    &lt;span class="n"&gt;default_response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Not sure what you mean. Try *{}*.&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXAMPLE_COMMAND&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Finds and executes the given command, filling in response&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
    &lt;span class="c1"&gt;# This is where you start to implement more commands!&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;EXAMPLE_COMMAND&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Sure...write some more code then I can do that!&amp;quot;&lt;/span&gt;

    &lt;span class="c1"&gt;# Sends the response back to the channel&lt;/span&gt;
    &lt;span class="n"&gt;slack_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;chat.postMessage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;default_response&lt;/span&gt;
    &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;slack_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rtm_connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;with_team_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Starter Bot connected and running!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Read bot&amp;#39;s user ID by calling Web API method `auth.test`&lt;/span&gt;
        &lt;span class="n"&gt;starterbot_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slack_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;auth.test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse_bot_commands&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;slack_client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rtm_read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;handle_command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;RTM_READ_DELAY&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Connection failed. Exception traceback printed above.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that all of our code is in place we can run our Starter Bot on the
command line with the &lt;code&gt;python starterbot.py&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160604-simple-python-slack-bot/starterbot-running.png" width="100%" class="technical-diagram img-rounded" alt="Console output when the StarterBot is running and connected to the API."&gt;&lt;/p&gt;
&lt;p&gt;In Slack, create a new channel and invite Starter Bot or invite it to an
existing channel.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160604-simple-python-slack-bot/create-channel.png" width="100%" class="technical-diagram img-rounded" alt="In the Slack user interface create a new channel and invite StarterBot."&gt;&lt;/p&gt;
&lt;p&gt;Now start giving Starter Bot commands in your channel.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160604-simple-python-slack-bot/working-starterbot.png" width="100%" class="technical-diagram img-rounded" alt="Give StarterBot commands in your Slack channel."&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Additional Note:&lt;/strong&gt;&lt;/em&gt; Currently there's an &lt;a href="https://github.com/slackapi/python-slackclient/issues/334"&gt;issue&lt;/a&gt; with the &lt;code&gt;websocket&lt;/code&gt; package and the CA certificate it uses, so if you encounter an error like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;...
ssl.SSLCertVerificationError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1045)
...
slackclient.server.SlackConnectionError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1045)
Connection failed. Exception traceback printed above.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There are a couple of things that can be done:
1. Downgrading the websocket-client library to &lt;code&gt;0.47.0&lt;/code&gt;
2. Or, download the certificate (&lt;code&gt;wget https://www.tbs-certificats.com/issuerdata/DigiCertGlobalRootCA.crt&lt;/code&gt;), then set the environment variable &lt;code&gt;export WEBSOCKET_CLIENT_CA_BUNDLE=DigiCertGlobalRootCA.crt&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Wrapping Up&lt;/h2&gt;
&lt;p&gt;Alright, now you've got a simple Starter Bot with a bunch of places in the
code you can add whatever features you want to build.&lt;/p&gt;
&lt;p&gt;There is a whole lot more that could be done using the Slack RTM API and Python.
Check out these posts to learn what you could do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Attach a persistent &lt;a href="/databases.html"&gt;relational database&lt;/a&gt; or
  &lt;a href="/no-sql-datastore.html"&gt;NoSQL back-end&lt;/a&gt; such as
  &lt;a href="/postgresql.html"&gt;PostgreSQL&lt;/a&gt;, &lt;a href="/mysql.html"&gt;MySQL&lt;/a&gt; or &lt;a href="/sqlite.html"&gt;SQLite&lt;/a&gt;
  to save and retrieve user data&lt;/li&gt;
&lt;li&gt;Add another channel to interact with the bot
  &lt;a href="https://www.twilio.com/blog/2016/05/build-sms-slack-bot-python.html"&gt;via SMS&lt;/a&gt;
  or
  &lt;a href="https://www.twilio.com/blog/2016/05/add-phone-calling-slack-python.html"&gt;phone calls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/api-integration.html"&gt;Integrate other web APIs&lt;/a&gt; such as
  &lt;a href="https://developer.github.com/v3/"&gt;GitHub&lt;/a&gt; or &lt;a href="/twilio.html"&gt;Twilio&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Explore other &lt;a href="https://api.slack.com"&gt;Slack Platform APIs&lt;/a&gt; and the &lt;a href="https://medium.com/slack-developer-blog/getting-started-with-slacks-apis-f930c73fc889"&gt;reasons you might use one over another&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Build an &lt;a href="https://github.com/slackapi/Slack-Python-Onboarding-Tutorial"&gt;onboarding bot using the Slack Events API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Questions? Contact me via Twitter
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160604-build-first-slack-bot-python.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>使用 Python 和 Flask 响应 SMS 文本消息</title><link href="https://www.fullstackpython.com/blog/respond-sms-text-messages-python-flask.html" rel="alternate"></link><published>2017-05-11T00:00:00-04:00</published><updated>2017-05-11T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-05-30:blog/respond-sms-text-messages-python-flask.html</id><summary type="html">&lt;p&gt;Short Message Service (SMS) text messages are 
&lt;a href="/blog/send-sms-text-messages-python.html"&gt;easy to send from Python applications&lt;/a&gt; 
with a
&lt;a href="/application-programming-interfaces.html"&gt;web application programming interface (API)&lt;/a&gt;. 
Flask applications can also receive incoming text messages and respond
back to the sender with just a few lines of Python code.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;This tutorial is fine for both Python 2 and 3. Make sure you have one of 
those two versions installed on your system.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle
  &lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; micro web framework&lt;/li&gt;
&lt;li&gt;A free &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio account&lt;/a&gt; to use their 
  &lt;a href="https://www.twilio.com/docs/api/rest/sending-messages"&gt;SMS web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open source 
  &lt;a href="https://pypi.org/project/twilio"&gt;Twilio Python helper library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ngrok.com/"&gt;Ngrok&lt;/a&gt; for localhost tunneling to our Flask 
  application while it's running on our local development environment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need assistance getting pip and virtualenv installed, take a look at 
the first few steps in the 
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide, which shows how to install system packages for those tools.&lt;/p&gt;
&lt;h2&gt;Installing Our Dependencies&lt;/h2&gt;
&lt;p&gt;Our code will use a helper library to make it easier to respond to text 
messages from Python. The helper library dependency along with the Flask
code library can be installed from &lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; into 
a virtualenv. In your terminal use the following command to generate a new 
virtualenv. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv respondsms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source respondsms/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after we properly activate the virtualenv
to something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160530-respond-sms-python-flask/activate-virtualenv.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Install Flask and the Twilio Python helper library into the virtualenv with
the &lt;code&gt;pip&lt;/code&gt; command. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install flask twilio==5.7.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The dependencies are installed so that we can use it with our Python code.
Now we can write our Python application.&lt;/p&gt;
&lt;h2&gt;Building Our Flask Web App&lt;/h2&gt;
&lt;p&gt;Our Flask application will have two routes: one to make sure the web app
is running and another that handles incoming HTTP POST requests. Create
a new file named &lt;code&gt;app.py&lt;/code&gt; in your home directory or where you choose to
store your Python project files.&lt;/p&gt;
&lt;p&gt;Within &lt;code&gt;app.py&lt;/code&gt; write the following code. You can also see 
&lt;a href="https://gist.github.com/mattmakai/8ab434ccb604d3ba5bde817a183e0bde"&gt;this code in a GitHub Gist&lt;/a&gt; 
if that's easier to copy and paste.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;twiml&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_app&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# returns a simple string stating the app is working&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;It works!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/twilio&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;methods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;inbound_sms&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;twiml&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# we get the SMS message from the request. we could also get the &lt;/span&gt;
    &lt;span class="c1"&gt;# &amp;quot;To&amp;quot; and the &amp;quot;From&amp;quot; phone number as well&lt;/span&gt;
    &lt;span class="n"&gt;inbound_message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Body&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# we can now use the incoming message text in our Python application&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;inbound_message&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello back to you!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi! Not quite sure what you meant, but okay.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# we return back the mimetype because Twilio needs an XML response&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;application/xml&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The inline comments on the lines starting with &lt;code&gt;#&lt;/code&gt; explain what the lines
below them do. Flask applications define URL routes with the &lt;code&gt;@app.route&lt;/code&gt;
decorator. Our application needs two routes therefore we have two of those
decorators defined.&lt;/p&gt;
&lt;p&gt;Give the application a try by running it with &lt;code&gt;python app.py&lt;/code&gt;. If you have
trouble running the program, make sure your virtualenv is still active so
that the application can use the Flask and Twilio code libraries we installed
earlier.&lt;/p&gt;
&lt;p&gt;Open a web browser and go to localhost:5000 (or 127.0.0.1:5000). We should
see "It works!" on the screen.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160530-respond-sms-python-flask/app-local.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;There is one problem with our application running on our local development
environment: there's no way for our server to receive HTTP POST requests 
unless we use a localhost tunnel.&lt;/p&gt;
&lt;h2&gt;Localhost Tunneling with Ngrok&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://ngrok.com"&gt;Ngrok&lt;/a&gt; provides a localhost tunnel so that outside
services can connect to a server running in your local development 
environment. Download and install Ngrok.&lt;/p&gt;
&lt;p&gt;We can now run Ngrok locally and connect our Flask app running on port 5000. 
Within the directory where you extracted Ngrok, run this command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./ngrok http 5000
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160530-respond-sms-python-flask/start-ngrok.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Awesome, now we can use that Ngrok Forwarding URL to access our application
from any machine that has an internet connection. Replace the URL in the
web browser with your own Forwarding URL, like I did in this screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160530-respond-sms-python-flask/access-ngrok.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;We just need a phone number that'll hit our application with a POST request
to respond to text messages.&lt;/p&gt;
&lt;h2&gt;Obtaining Our Phone Number&lt;/h2&gt;
&lt;p&gt;We can use our Flask application's route to respond to incoming web API 
requests based on incoming SMS messages to a Twilio phone number. Go to the
&lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio website and sign up for a free trial account&lt;/a&gt;
to use their API. If you already have a Twilio account then sign into your 
existing account.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160530-respond-sms-python-flask/try-twilio.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The Twilio trial account allows you to send and receive text messages to 
your own validated phone number. To send and respond to SMS to and from any 
phone number then you need to upgrade your account. Trial accounts are 
great for initial development before your application goes live.&lt;/p&gt;
&lt;p&gt;When you sign up, you receive a free Twilio phone number. We can
configure that phone number to forward the SMS information to our web 
application by setting up the response webhook.&lt;/p&gt;
&lt;p&gt;Go to the 
&lt;a href="https://www.twilio.com/console/phone-numbers"&gt;manage phone numbers screen&lt;/a&gt; 
and click on the phone number you want to configure for responding to 
inbound text messages.&lt;/p&gt;
&lt;p&gt;Scroll down to near the bottom of the page and look for the "Messaging"
header. Modify the "A Message Comes in" text box so that it has your
ngrok Forwarding URL plus the "/twilio" route, as shown in this screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160530-respond-sms-python-flask/number-configuration.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Now press the red "Save" button at the bottom to make our changes take
effect.&lt;/p&gt;
&lt;p&gt;Our application is ready to go - time to give our phone number a try! 
Send "Hello" or whatever text you want to your phone number. Here is what 
the result looks like on my iPhone.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160530-respond-sms-python-flask/success.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;This simple Flask application is a good start to build more complicated
responses such as
&lt;a href="https://www.twilio.com/blog/2014/06/using-natural-language-processing-for-better-sms-interfaces-using-twilio-and-pythons-textblob.html"&gt;adding natural language processing&lt;/a&gt;,
&lt;a href="https://www.twilio.com/blog/2016/05/build-sms-slack-bot-python.html"&gt;building SMS Slack bots&lt;/a&gt;
or 
&lt;a href="https://www.twilio.com/blog/2015/08/romram-hacking-building-an-sms-powered-game-genie-with-lua-and-python.html"&gt;coding SMS-powered NES Game Genies&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;Sweet, now our Flask web app automatically responds to incoming SMS text
messages! It's pretty crazy to think that entire businesses such as 
&lt;a href="http://techcrunch.com/2016/03/07/superphone/"&gt;SuperPhone&lt;/a&gt; and 
&lt;a href="https://www.remind.com/"&gt;Remind&lt;/a&gt; are built off code that started out very
similar to the code we just wrote.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160530-respond-sms-text-messages-python-flask.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>如何在 Ubuntu 16.04 上安装和使用 MySQL</title><link href="https://www.fullstackpython.com/blog/install-mysql-ubuntu-1604.html" rel="alternate"></link><published>2017-12-22T00:00:00-05:00</published><updated>2017-12-22T00:00:00-05:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-05-28:blog/install-mysql-ubuntu-1604.html</id><summary type="html">&lt;p&gt;&lt;a href="/mysql.html"&gt;MySQL&lt;/a&gt; is a common open source 
&lt;a href="/databases.html"&gt;relational database&lt;/a&gt; for creating, reading, updating 
and deleting data in &lt;a href="/web-frameworks.html"&gt;Python web applications&lt;/a&gt;.
Let's learn how to install MySQL on &lt;a href="/ubuntu.html"&gt;Ubuntu 16.04&lt;/a&gt; and then 
run a few SQL queries within the command line client.&lt;/p&gt;
&lt;p&gt;We will not go over connecting via Python applications using
&lt;a href="/object-relational-mappers-orms.html"&gt;object-relational mappers (ORMs)&lt;/a&gt; 
but these steps can be used as a prerequisite to working with an ORM such 
as SQLAlchemy or Peewee.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;In this tutorial we'll use the following components:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04.2&lt;/a&gt; (this tutorial 
  should also work on other Ubuntu versions)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://dev.mysql.com/doc/"&gt;MySQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Install MySQL&lt;/h2&gt;
&lt;p&gt;We can install MySQL by using the &lt;code&gt;apt&lt;/code&gt; package manager. First make sure
your packages list are up to date. Open the terminal and run this &lt;code&gt;apt&lt;/code&gt;
command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We need to install the &lt;code&gt;mysql-server&lt;/code&gt; package, which downloads the required
files, configures the initial database set up and handles running MySQL
as a system service. Run this &lt;code&gt;apt&lt;/code&gt; command to get the process started.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install mysql-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enter 'y' when prompted with whether or not you want to install the
new package.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160528-mysql-ubuntu-1604/apt-install-prompt.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;An administrative screen asking for a new root password will appear in the 
middle of the package installation process. Enter your chosen new password 
twice and the installation will continue.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160528-mysql-ubuntu-1604/new-root-password.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;In a moment the installation will finish and you'll be back at the command
prompt.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160528-mysql-ubuntu-1604/apt-finished.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;MySQL is now installed with a root user. However, we do not want to have our
applications connect to the database with that user, so next we will 
create a new non-root user.&lt;/p&gt;
&lt;h2&gt;Securing MySQL&lt;/h2&gt;
&lt;p&gt;MySQL is installed with a basic configuration meant for development and testing
purposes. However, the configuration is not secure for production enviroments,
therefore it comes with a utility to handle basic security. Run the
following command and answer the questions based on your environment 
requirements.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo mysql_secure_installation
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you finish running the script you should see the following output and
be back at the command prompt.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160528-mysql-ubuntu-1604/mysql-secure-installation.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our MySQL instance has basic security in place but we need to create a 
non-root user for applications to interact with the database.&lt;/p&gt;
&lt;h2&gt;Creating MySQL Users&lt;/h2&gt;
&lt;p&gt;To create a non-root user, connect to the MySQL instance with the 
&lt;code&gt;mysql&lt;/code&gt; command line client.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -u root -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now use the &lt;code&gt;CREATE USER&lt;/code&gt; command to generate a new user. Make sure to
change "mynewuser" and "goodPassword" with your own values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE USER &amp;#39;mynewuser&amp;#39;@&amp;#39;localhost&amp;#39; IDENTIFIED BY &amp;#39;goodPassword&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No output after the command is good - that means the command succeeded.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160528-mysql-ubuntu-1604/create-user.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;We need to apply privileges to the new user so it can handle basic database
operations. Again, make sure to replace the default username in this command
with your new username.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;GRANT ALL PRIVILEGES ON * . * TO &amp;#39;mynewuser&amp;#39;@&amp;#39;localhost&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160528-mysql-ubuntu-1604/grant-all.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;It's a good idea to reload the privileges to make sure our new user's
permissions are in place.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;FLUSH PRIVILEGES;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that our permissions are reloaded we can connect with the new user.&lt;/p&gt;
&lt;h2&gt;New User Connection&lt;/h2&gt;
&lt;p&gt;We're set to connect to the database with our new user. Exit the MySQL
client with "Ctrl-d". Reconnect using a slightly different command than
we used earlier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysql -u mynewuser -p
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160528-mysql-ubuntu-1604/mysql-new-user.png" width="100%" class="technical-diagram img-rounded" alt="Connect to MySQL as the new user we just created."&gt;&lt;/p&gt;
&lt;p&gt;Create a new database with the &lt;code&gt;CREATE DATABASE&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE DATABASE fullstackpython;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160528-mysql-ubuntu-1604/create-database.png" width="100%" class="technical-diagram img-rounded" alt="Create a new MySQL database with our new user."&gt;&lt;/p&gt;
&lt;p&gt;Connect to the new database with the &lt;code&gt;USE&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;use fullstackpython;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160528-mysql-ubuntu-1604/use-command.png" width="100%" class="technical-diagram img-rounded" alt="Connect to the newly-created database with the USE command."&gt;&lt;/p&gt;
&lt;p&gt;Create a simple new table with the &lt;code&gt;CREATE TABLE&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE pages (name VARCHAR(50), url VARCHAR(1024));
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our table is ready to go - we can interact with it using the 
&lt;code&gt;SELECT&lt;/code&gt;, &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; SQL commands.&lt;/p&gt;
&lt;h2&gt;What's next?&lt;/h2&gt;
&lt;p&gt;We now have our MySQL instance installed and ready for interaction.
Take a look at the &lt;a href="/mysql.html"&gt;MySQL&lt;/a&gt;, 
&lt;a href="/databases.html"&gt;relational databases&lt;/a&gt; and 
&lt;a href="/object-relational-mappers-orms.html"&gt;object-relational mappers (ORMs)&lt;/a&gt;
pages for more tutorials.&lt;/p&gt;
&lt;p&gt;Questions? Tweet &lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or post a message on the 
&lt;a href="https://www.facebook.com/fullstackpython"&gt;Full Stack Python Facebook page&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160528-install-mysql-ubuntu-1604.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>在 Ubuntu 16.04 上使用 Python 3 和 psycopg 设置 PostgreSQL</title><link href="https://www.fullstackpython.com/blog/postgresql-python-3-psycopg2-ubuntu-1604.html" rel="alternate"></link><published>2017-12-25T00:00:00-05:00</published><updated>2017-12-25T00:00:00-05:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-05-18:blog/postgresql-python-3-psycopg2-ubuntu-1604.html</id><summary type="html">&lt;p&gt;&lt;a href="/postgresql.html"&gt;PostgreSQL&lt;/a&gt; is a powerful open source 
&lt;a href="/databases.html"&gt;relational database&lt;/a&gt; frequently used to create, read,
update and delete &lt;a href="/web-frameworks.html"&gt;Python web application&lt;/a&gt; data.
&lt;a href="http://initd.org/psycopg/"&gt;Psycopg2&lt;/a&gt; is a PostgreSQL database 
driver that serves as a Python client for access to the PostgreSQL server. 
This post explains how to install PostgreSQL on &lt;a href="/ubuntu.html"&gt;Ubuntu 16.04&lt;/a&gt; 
and run a few basic SQL queries within a Python program.&lt;/p&gt;
&lt;p&gt;We won't cover 
&lt;a href="/object-relational-mappers-orms.html"&gt;object-relational mappers (ORMs)&lt;/a&gt; 
in this tutorial but these steps can be used as a prerequisite to working 
with an ORM such as SQLAlchemy or Peewee.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;Our walkthrough should work with either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt; 
although all the steps were tested specifically with Python 3.5. Besides 
the Python interpreter, here are the other components we'll use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04.2&lt;/a&gt; (these 
  steps should also work fine with other Ubuntu versions)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle the
  &lt;a href="https://pypi.org/project/psycopg2/2.6.1"&gt;psycopg2&lt;/a&gt; 
  &lt;a href="/application-dependencies.html"&gt;application dependency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.postgresql.org/"&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you aren't sure how to install pip and virtualenv, review the 
first few steps of the 
&lt;a href="/blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Bottle and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide.&lt;/p&gt;
&lt;h2&gt;Install PostgreSQL&lt;/h2&gt;
&lt;p&gt;We'll install PostgreSQL via the &lt;code&gt;apt&lt;/code&gt; package manager. There are a few
packages we need since we want to both run PostgreSQL and use the psycopg2
driver with our Python programs. PostgreSQL will also be installed as a
system service so we can start, stop and reload its configuration when
necessary with the &lt;code&gt;service&lt;/code&gt; command. Open the terminal and run: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install postgresql libpq-dev postgresql-client postgresql-client-common
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enter your &lt;code&gt;sudo&lt;/code&gt; password when prompted and enter 'yes' when &lt;code&gt;apt&lt;/code&gt; asks
if you want to install the new packages.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160518-postgresql-ubuntu-1604/apt-get-postgresql.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;After a few moments &lt;code&gt;apt&lt;/code&gt; will finish downloading, installing and 
processing.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160518-postgresql-ubuntu-1604/apt-get-postgresql-done.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;We now have PostgreSQL installed and the PostgreSQL service is running
in the background. However, we need to create a user and a database instance
to really start using it. Use the &lt;code&gt;sudo&lt;/code&gt; command to switch to the new
"postgres" account.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo -i -u postgres
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Within the "postgres" account, create a user from the command line with the
&lt;code&gt;createuser&lt;/code&gt; command. PostgreSQL will prompt you with several questions.
Answer "n" to superuser and "y" to the other questions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;createuser matt -P --interactive
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160518-postgresql-ubuntu-1604/createuser.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Awesome, now we have a PostgreSQL user that matches our Ubuntu login
account. Exit out of the postgres account by pressing the "Ctrl" key along
with "d" into the shell. We're back in our own user account.&lt;/p&gt;
&lt;p&gt;Create a new database we can use for testing. You can name it "testpython"
or whatever you want for your application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;createdb testpython
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we can interact with "testpython" via the PostgreSQL command line tool.&lt;/p&gt;
&lt;h2&gt;Interacting with PostgreSQL&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;psql&lt;/code&gt; command line client is useful for connecting directly to our
PostgreSQL server without any Python code. Try out &lt;code&gt;psql&lt;/code&gt; by using this
command at the prompt: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;psql testpython
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The PostgreSQL client will connect to the localhost server. The client is
now ready for input:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160518-postgresql-ubuntu-1604/postgresql-cli.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Try out PostgreSQL's command prompt a try with commands such as &lt;code&gt;\dt&lt;/code&gt; and
&lt;code&gt;\dd&lt;/code&gt;. We can also run SQL queries such as "SELECT * from testpython", 
although that won't give us back any data yet because we have not inserted
any into the database. A full list of PostgreSQL commands can be 
found in the
&lt;a href="http://www.postgresql.org/docs/9.6/static/app-psql.html"&gt;psql documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Installing psycopg2&lt;/h2&gt;
&lt;p&gt;Now that PostgreSQL is installed and we have a non-superuser account, we
can install the &lt;a href="http://initd.org/psycopg/"&gt;psycopg2&lt;/a&gt; package. Let's
figure out where our &lt;code&gt;python3&lt;/code&gt; executable is located, create a virtualenv
with &lt;code&gt;python3&lt;/code&gt;, activate the virtualenv and then install the psycopg2 package
with &lt;code&gt;pip&lt;/code&gt;. Find your &lt;code&gt;python3&lt;/code&gt; executable using the &lt;code&gt;which&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We will see output like what is in this screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160518-postgresql-ubuntu-1604/which-python-3.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Create a new virtualenv in either your home directory or wherever you
store your Python virtualenvs. Specify the full path to your &lt;code&gt;python3&lt;/code&gt;
installation. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# specify the system python3 installation
virtualenv --python=/usr/bin/python3 venvs/postgrestest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source ~/venvs/postgrestest/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we can install the psycopg2 Python package from 
&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; using the &lt;code&gt;pip&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install psycopg2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160518-postgresql-ubuntu-1604/pip-install-psycopg2.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Sweet, we've got our PostgreSQL driver installed in our virtualenv! We can 
now test out the installation by writing a few lines of Python code.&lt;/p&gt;
&lt;h2&gt;Using PostgreSQL from Python&lt;/h2&gt;
&lt;p&gt;Launch the Python REPL with the &lt;code&gt;python&lt;/code&gt; or &lt;code&gt;python3&lt;/code&gt; command. You can also 
write the following code in a Python file such as "testpostgres.py" then
execute it with &lt;code&gt;python testpostgres.py&lt;/code&gt;. Make sure to replace the "user"
and "password" values with your own.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;psycopg2&lt;/span&gt;

&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;connect_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dbname=&amp;#39;testpython&amp;#39; user=&amp;#39;matt&amp;#39; host=&amp;#39;localhost&amp;#39; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; \
                  &lt;span class="s2"&gt;&amp;quot;password=&amp;#39;myOwnPassword&amp;#39;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# use our connection values to establish a connection&lt;/span&gt;
    &lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;psycopg2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;connect_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# create a psycopg2 cursor that can execute queries&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="c1"&gt;# create a new table with a single column called &amp;quot;name&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;CREATE TABLE tutorials (name char(40));&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# run a SELECT statement - no data in there, but we can try it&lt;/span&gt;
    &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;SELECT * from tutorials&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;rows&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchall&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Uh oh, can&amp;#39;t connect. Invalid dbname, user or password?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When we run the above code we won't get anything fancy, just an empty
list printed out. However, in those few lines of code we've ensured our 
connection to our new database works and we can create new tables in it as 
well as query them.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160518-postgresql-ubuntu-1604/output.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;That's just enough of a hook to get started writing more complicated SQL 
queries using psycopg2 and PostgreSQL. Make sure to check out the 
&lt;a href="/postgresql.html"&gt;PostgreSQL&lt;/a&gt;,
&lt;a href="/databases.html"&gt;relational databases&lt;/a&gt; and 
&lt;a href="/object-relational-mappers-orms.html"&gt;object-relational mappers (ORMs)&lt;/a&gt;
pages for more tutorials.&lt;/p&gt;
&lt;p&gt;Questions? Tweet &lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or post a message on the 
&lt;a href="https://www.facebook.com/fullstackpython"&gt;Full Stack Python Facebook page&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160518-install-postgresql-python-3-ubuntu-1604.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>如何在 Ubuntu 16.04 上使用 Redis 和 Python 3 以及 redis-py</title><link href="https://www.fullstackpython.com/blog/install-redis-use-python-3-ubuntu-1604.html" rel="alternate"></link><published>2017-04-28T00:00:00-04:00</published><updated>2017-04-28T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-05-16:blog/install-redis-use-python-3-ubuntu-1604.html</id><summary type="html">&lt;p&gt;&lt;a href="/redis.html"&gt;Redis&lt;/a&gt; is an in-memory key-value pair 
&lt;a href="/no-sql-datastore.html"&gt;NoSQL data store&lt;/a&gt; often used 
for &lt;a href="/web-frameworks.html"&gt;web application&lt;/a&gt; sessions,
transient &lt;a href="/data.html"&gt;data&lt;/a&gt; and as a broker for 
&lt;a href="/task-queues.html"&gt;task queues&lt;/a&gt;. redis-py is a common Python code 
library for interacting with Redis. Let's learn how to get Redis up
and running on &lt;a href="/ubuntu.html"&gt;Ubuntu&lt;/a&gt; and then start using it in a simple 
Python application.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;This tutorial is tested with Python 3.5 but either 
&lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt; should work for everything written 
here. Just make sure one version is installed on your system by going to 
the terminal and typing &lt;code&gt;python --version&lt;/code&gt;. Other than Python itself,
here is the software we are going to use throughout the rest of this post:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04&lt;/a&gt; (these 
  instructions should work fine with earlier Ubuntu versions as well)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle the
  redis-py &lt;a href="/application-dependencies.html"&gt;application dependency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://redis.io"&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://redis-py.readthedocs.io/en/latest/"&gt;redis-py&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you aren't sure how how to install pip and virtualenv, review the 
first few steps of the 
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide.&lt;/p&gt;
&lt;h2&gt;Install Redis&lt;/h2&gt;
&lt;p&gt;There are a few ways to install Redis, such as 
&lt;a href="http://redis.io/topics/quickstart"&gt;downloading and compiling from source&lt;/a&gt;.
However, on Ubuntu we can install a system package through &lt;code&gt;apt&lt;/code&gt;. The
advantage of this method is that the &lt;code&gt;apt&lt;/code&gt; process will take care of 
installing &lt;code&gt;redis-server&lt;/code&gt; as a system service. Open the terminal and run 
the following command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install redis-server
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enter your &lt;code&gt;sudo&lt;/code&gt; password and when you are prompted whether you want 
to install the new package enter 'yes'.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160516-redis-ubuntu-1604/apt-get-redis.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;After a few moments the downloading and processing should be complete
and you will be back at the prompt.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160516-redis-ubuntu-1604/apt-get-redis-done.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Redis is now installed and the Redis server is running in the background 
as a system service. Even though we installed the &lt;code&gt;redis-server&lt;/code&gt; package,
the installation also comes with the Redis command line client. The client
is useful for connecting directly to the Redis server without any Python
code. Give &lt;code&gt;redis-cli&lt;/code&gt; a try by typing this into the command prompt:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;redis-cli
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Redis client connects to the localhost server and gives a new prompt
to show it's ready for commands:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160516-redis-ubuntu-1604/redis-cli.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Give the prompt a try by using Redis commands such as &lt;code&gt;keys *&lt;/code&gt; or &lt;code&gt;set a 1&lt;/code&gt;.
The full list of Redis commands is provided in the 
&lt;a href="http://redis.io/commands"&gt;project documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Virtualenv and Install redis-py&lt;/h2&gt;
&lt;p&gt;We need to figure out our &lt;code&gt;python3&lt;/code&gt; location, then create a virtualenv,
activate the virtualenv and then install redis-py with &lt;code&gt;pip&lt;/code&gt;.
Determine your &lt;code&gt;python3&lt;/code&gt; executable location with the &lt;code&gt;which&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll see some output like the following screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160516-redis-ubuntu-1604/which-python-3.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Create a new virtualenv either in your home directory or wherever you
store your project virtualenvs. Specify the full path to your &lt;code&gt;python3&lt;/code&gt;
installation. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# specify the system python3 installation
virtualenv --python=/usr/bin/python3 venvs/redistest
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source ~/venvs/redistest/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we can install the redis-py Python package from 
&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; using the &lt;code&gt;pip&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install redis
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160516-redis-ubuntu-1604/pip-install-redis.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Alright, now it is installed in our virtualenv. Let's write some simple 
Python code to try out give redis-py!&lt;/p&gt;
&lt;h2&gt;Working with Redis from Python&lt;/h2&gt;
&lt;p&gt;Fire up the Python REPL with the &lt;code&gt;python&lt;/code&gt; or &lt;code&gt;python3&lt;/code&gt; command. You can also 
write the following code in a Python file such as "testredis.py" then
execute it with &lt;code&gt;python testredis.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;redis&lt;/span&gt;
&lt;span class="c1"&gt;# create a connection to the localhost Redis server instance, by&lt;/span&gt;
&lt;span class="c1"&gt;# default it runs on port 6379&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;redis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;StrictRedis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;localhost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;6379&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;db&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# see what keys are in Redis&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# output for keys() should be an empty list &amp;quot;[]&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;full stack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;python&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# output should be &amp;quot;True&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# now we have one key so the output will be &amp;quot;[b&amp;#39;full stack&amp;#39;]&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;full stack&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# output is &amp;quot;b&amp;#39;python&amp;#39;&amp;quot;, the key and value still exist in Redis&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;incr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;twilio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# output is &amp;quot;1&amp;quot;, we just incremented even though the key did not&lt;/span&gt;
&lt;span class="c1"&gt;# previously exist&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;twilio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# output is &amp;quot;b&amp;#39;1&amp;#39;&amp;quot; again, since we just obtained the value from&lt;/span&gt;
&lt;span class="c1"&gt;# the existing key&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;twilio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# output is &amp;quot;1&amp;quot; because the command was successful&lt;/span&gt;
&lt;span class="n"&gt;redis_db&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;twilio&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# nothing is returned because the key and value no longer exist&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That is a quick introduction to some commonly-used Redis commands
invoked by their Python bindings through the redis-py library. Take a look 
at the 
&lt;a href="https://redis-py.readthedocs.io/en/latest/"&gt;redis-py official documentation&lt;/a&gt;
to learn more about the extensive command list you can use to create,
read, modify and delete keys and values in Redis.&lt;/p&gt;
&lt;p&gt;Questions? Tweet &lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or post a message on the 
&lt;a href="https://www.facebook.com/fullstackpython"&gt;Full Stack Python Facebook page&lt;/a&gt;. 
See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160516-install-redis-use-python-3-ubuntu-1604.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>如何使用 Python 发送彩信图片信息</title><link href="https://www.fullstackpython.com/blog/send-mms-picture-messages-python.html" rel="alternate"></link><published>2018-03-28T00:00:00-04:00</published><updated>2018-03-28T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-05-15:blog/send-mms-picture-messages-python.html</id><summary type="html">&lt;p&gt;Multimedia Message Service (MMS) picture and video messages are a common 
extension to the Short Message Service (SMS) system for sending text 
messages. Using a 
&lt;a href="/application-programming-interfaces.html"&gt;web application programming interface (API)&lt;/a&gt;
with Python makes it easy to send MMS messages from a web application or
script. In this short tutorial we'll learn how to add MMS sending capability
to a new or existing Python application.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;Either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt; works for the code in this 
tutorial. Just make sure you have one of those two versions installed on 
your system by going to the terminal and typing &lt;code&gt;python --version&lt;/code&gt;.
The other dependencies for this tutorial include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; version &lt;a href="/python-2-or-3.html"&gt;2 or 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle one
  &lt;a href="/application-dependencies.html"&gt;application dependency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A free &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio account&lt;/a&gt; to use their 
  &lt;a href="https://www.twilio.com/docs/api/rest/sending-messages"&gt;MMS web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/twilio"&gt;Twilio Python helper library&lt;/a&gt;,
  &lt;a href="https://github.com/twilio/twilio-python/tree/6.0.0"&gt;version 6.0.0&lt;/a&gt; 
  or later&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are unsure of how to get pip and virtualenv installed, take a look
at the first few steps of the 
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide.&lt;/p&gt;
&lt;h2&gt;Twilio Web API&lt;/h2&gt;
&lt;p&gt;Our simple Python example application will use the Twilio web API to send
picture messages.
Go to the Twilio website
&lt;a href="https://www.twilio.com/try-twilio"&gt;sign up for a free trial account&lt;/a&gt;. If 
you already have a Twilio account (and you should because it makes it easy 
to add almost any type of communications to applications!) then sign into 
your existing account.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160515-mms-python/try-twilio.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;In trial mode Twilio can send MMS to a validated phone number associated 
with the account. When you're ready to send MMS messages to any phone in 
any country then you will have to upgrade your account.&lt;/p&gt;
&lt;p&gt;After signing up for a Twilio account, you will receive your own phone 
number that'll be used to send messages. That phone number can send outbound
MMS messages without any configuration. It can also receive messages but 
that requires 
&lt;a href="https://www.twilio.com/docs/quickstart/python/sms/hello-monkey"&gt;modifying the Request URL webhook&lt;/a&gt; 
in the phone number details screen.&lt;/p&gt;
&lt;h2&gt;Installing Our Dependency&lt;/h2&gt;
&lt;p&gt;We'll use the &lt;a href="https://pypi.org/project/twilio"&gt;twilio helper library&lt;/a&gt; 
as a dependency for our Python code. The helper library can be installed
via the &lt;code&gt;pip&lt;/code&gt; command, which pulls the code from 
&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; into our local virtualenv. In this
tutorial we'll call our virtualenv &lt;code&gt;pymms&lt;/code&gt; but you can name it whatever
you want for your application.&lt;/p&gt;
&lt;p&gt;We have to create the virtualenv before using it. In your terminal enter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv pymms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you need to install virtualenv take a look at the
&lt;a href="/blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Django and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide.&lt;/p&gt;
&lt;p&gt;Activate the virtualenv with the &lt;code&gt;source&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source pymms/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change to look like this after it is activated:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160515-mms-python/activate-virtualenv.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Now install the 
&lt;a href="https://www.twilio.com/docs/libraries/python"&gt;Twilio Python helper library&lt;/a&gt;. 
Make sure you install the
version 6.0.0 or later current version because the syntax for this
code changed a bit from earlier helper library versions before 6.0.0.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install twilio&amp;gt;=6.0.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once the helper library installs we can use it in our Python code.&lt;/p&gt;
&lt;h2&gt;Sending MMS From Python&lt;/h2&gt;
&lt;p&gt;Launch the the Python interpreter by executing the &lt;code&gt;python&lt;/code&gt; command in
your terminal. You can also create a new file named &lt;code&gt;send_mms.py&lt;/code&gt; if you
want to re-use the code after we give it a try. &lt;/p&gt;
&lt;p&gt;We need to grab our account credentials from the Twilio Console to connect 
our Python code to our Twilio account. Go to the 
&lt;a href="https://www.twilio.com/console"&gt;Twilio Console&lt;/a&gt; and copy the Account SID
and Authentication Token into your Python code.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160515-mms-python/console-tokens.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Enter the following code into the new Python file, or copy it from
&lt;a href="https://github.com/fullstackpython/blog-code-examples"&gt;this GitHub repository that contains all blog code examples&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# import the Twilio client from the dependency we just installed&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;

&lt;span class="c1"&gt;# the following line needs your Twilio Account SID and Auth Token&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ACxxxxxxxxxxxxxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zzzzzzzzzzzzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# this is the URL to an image file we&amp;#39;re going to send in the MMS&lt;/span&gt;
&lt;span class="n"&gt;media&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://raw.githubusercontent.com/mattmakai/fullstackpython.com/master/static/img/logos/f.png&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# change the &amp;quot;from_&amp;quot; number to your Twilio number and the &amp;quot;to&amp;quot; number&lt;/span&gt;
&lt;span class="c1"&gt;# to the phone number you signed up for Twilio with, or upgrade your&lt;/span&gt;
&lt;span class="c1"&gt;# account to send MMS to any phone number that MMS is available&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;account&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+19732644152&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+12023351278&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;MMS via Python? Nice!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;media_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the lines above that start with &lt;code&gt;#&lt;/code&gt; are comments to give you some
context for what each line is doing. After entering that code into the
interpreter or running the Python script with &lt;code&gt;python send_mms.py&lt;/code&gt;
Twilio will send your MMS.&lt;/p&gt;
&lt;p&gt;In a few seconds you should see a message appear on your phone - note that
MMS can take a little longer because your phone has to download the image. 
I use an iPhone so here is what the message looked like when I received it:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160515-mms-python/mms-result.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;That is everything need to send MMS to a phone. Pretty awesome result for 
a few lines of Python code, right? This code can be added to any Python 
program to send outbound MMS.&lt;/p&gt;
&lt;p&gt;One final note: keep your Twilio Auth Token secret otherwise anyone who
gets it will be able to send and receive messages through your account.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160515-sending-mms-picture-messages-python.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>在 Ubuntu 16.04 LTS 上配置 Python 3，Bottle 和 Gunicorn 以进行开发</title><link href="https://www.fullstackpython.com/blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html" rel="alternate"></link><published>2017-04-28T00:00:00-04:00</published><updated>2017-04-28T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-05-13:blog/python-3-bottle-gunicorn-ubuntu-1604-xenial-xerus.html</id><summary type="html">&lt;p&gt;The &lt;a href="/ubuntu.html"&gt;Ubuntu 16.04 Long Term Support (LTS)&lt;/a&gt; Linux
&lt;a href="/operating-systems.html"&gt;operating system&lt;/a&gt; was released in April 2016.
This latest Ubuntu release is named "Xenial Xerus" and
it is the first Ubuntu release to include &lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt;,
instead of Python 2.x, as the default Python installation.&lt;/p&gt;
&lt;p&gt;We can quickly start a new &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; web application project 
and run it with &lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; on
Ubuntu 16.04.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;Our setup requires the Ubuntu 16.04 release along with a few other code 
libraries. Don't install these tools just yet since we'll get to them as 
we go through the walkthrough. Our requirements and their current versions 
as of April 2017 are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04.2 LTS (Xenial Xerus)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; version 
  &lt;a href="https://docs.python.org/3/whatsnew/3.5.html"&gt;3.5.1&lt;/a&gt; 
  (default in Ubuntu 16.04.2)&lt;/li&gt;
&lt;li&gt;&lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt; web framework version 
  &lt;a href="http://bottlepy.org/docs/stable/"&gt;0.13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; version 
  &lt;a href="http://docs.gunicorn.org/en/stable/news.html"&gt;19.7.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are developing on Mac OS X or Windows, make sure to use 
virtualization software such
as &lt;a href="https://www.parallels.com/products/desktop/"&gt;Parallels&lt;/a&gt; or
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt; with the 
&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu .iso file&lt;/a&gt;. Either the amd64 or
i386 version of 16.04 is fine. I use the amd64 version for my own local 
development.&lt;/p&gt;
&lt;p&gt;A desktop screen like this one appears when you boot up Ubuntu.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160513-ubuntu-bottle-gunicorn/ubuntu-desktop.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Open a terminal window to install the system packages.&lt;/p&gt;
&lt;h2&gt;System Packages&lt;/h2&gt;
&lt;p&gt;We can see the python3 system version Ubuntu comes with and where its
executable is stored using these commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 --version
which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160513-ubuntu-bottle-gunicorn/which-python.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our Ubuntu installation requires a few system packages. We will get prompted 
for the superuser password because restricted system access is needed 
to install packages through 
&lt;a href="https://en.wikipedia.org/wiki/Advanced_Packaging_Tool"&gt;apt&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python3-pip python3-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160513-ubuntu-bottle-gunicorn/install-packages.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;y&lt;/code&gt; to let the system package installation process do its job.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160513-ubuntu-bottle-gunicorn/packages-installed.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The packages we need are now installed. We can continue on to install our 
Python-specific dependencies.&lt;/p&gt;
&lt;h2&gt;Virtualenv&lt;/h2&gt;
&lt;p&gt;In the previous section, &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; 
and &lt;a href="https://pypi.org/project/pip"&gt;pip&lt;/a&gt; were installed to handle our 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;.
We can now use them to download and install Bottle and Gunicorn.&lt;/p&gt;
&lt;p&gt;Create a directory for the virtualenvs. Then create a new virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# make sure pip and setuptools are the latest version
pip3 install --upgrade pip setuptools
# the tilde &amp;quot;~&amp;quot; specifies the user&amp;#39;s home directory, like /home/matt
cd ~
mkdir venvs
# specify the system python3 installation
virtualenv --python=/usr/bin/python3 venvs/bottleproj
python3 -m venv venvs/bottleproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source ~/venvs/bottleproj/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our prompt will change after we properly activate the virtualenv.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160513-ubuntu-bottle-gunicorn/venv-activated.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our virtualenv is now activated with Python 3. We can install whatever
dependencies we want, in our case Bottle and Gunicorn. &lt;/p&gt;
&lt;h2&gt;Bottle and Gunicorn&lt;/h2&gt;
&lt;p&gt;We can now install Bottle and Green Unicorn via the &lt;code&gt;pip&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install bottle gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No errors like we see in the following screenshot is a good sign.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160513-ubuntu-bottle-gunicorn/good-sign.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Use the &lt;code&gt;mkdir&lt;/code&gt; command to create a new directory to keep our Bottle 
project then use the &lt;code&gt;cd&lt;/code&gt; (change directory) command to move into the
new folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/bottleproj
cd ~/bottleproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a new file named &lt;code&gt;app.py&lt;/code&gt; within our &lt;code&gt;bottleproj&lt;/code&gt; directory so
we can test to make sure Bottle is working properly. I prefer to use
&lt;a href="/vim.html"&gt;Vim&lt;/a&gt; but &lt;a href="/emacs.html"&gt;Emacs&lt;/a&gt; and other 
&lt;a href="/development-environments.html"&gt;development environments&lt;/a&gt; work great as
well.&lt;/p&gt;
&lt;p&gt;Within the new &lt;code&gt;app.py&lt;/code&gt; file write the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bottle&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;

&lt;span class="c1"&gt;# a basic URL route to test whether Bottle is responding properly&lt;/span&gt;
&lt;span class="nd"&gt;@route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;It works!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# these two lines are only used for python app.py&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;0.0.0.0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reloader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# this is the hook for Gunicorn to run Bottle&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bottle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;default_app&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could run our app with the Bottle development server using the 
&lt;code&gt;python app.py&lt;/code&gt; command. Let's instead run our Bottle app with
Gunicorn.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn -w 2 app:app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160513-ubuntu-bottle-gunicorn/gunicorn-run.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Sweet, we can bring up our shell Bottle app in the web browser at
the &lt;code&gt;localhost:8000&lt;/code&gt; or &lt;code&gt;127.0.0.1:8000&lt;/code&gt; address.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160513-ubuntu-bottle-gunicorn/it-works.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Time to develop a full-fledged web application with &lt;a href="/bottle.html"&gt;Bottle&lt;/a&gt;!&lt;/p&gt;
&lt;h2&gt;Ready for Development&lt;/h2&gt;
&lt;p&gt;Now you have a simple setup to develop Bottle web apps using Gunicorn as
the &lt;a href="/wsgi-servers.html"&gt;WSGI server&lt;/a&gt; on Ubuntu 16.04. If you need a
full step-by-step tutorial to deploy your Python web application to a
production environment, check out the 
&lt;a href="http://www.deploypython.com/"&gt;Full Stack Python Guide to Deployments book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To decide what to do next with your Python project, check out the
&lt;a href="/table-of-contents.html"&gt;Full Stack Python table of contents&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160513-bottle-gunicorn-ubuntu-1604.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>如何使用 Python 发送 SMS 文本消息</title><link href="https://www.fullstackpython.com/blog/send-sms-text-messages-python.html" rel="alternate"></link><published>2017-04-28T00:00:00-04:00</published><updated>2017-04-28T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-05-11:blog/send-sms-text-messages-python.html</id><summary type="html">&lt;p&gt;Short Message Service (SMS) text messages are ubiquitous for communication
all over the world. It is easy to send SMS text messages from a 
&lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; application using a 
&lt;a href="/application-programming-interfaces.html"&gt;web application programming interface (API)&lt;/a&gt;. 
Let's take a look at the tools we need to quickly add SMS capability to our
Python apps.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;This guide works with both Python 2 and 3, so make sure you have one of 
those two versions installed.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Either &lt;a href="/python-2-or-3.html"&gt;Python 2 or 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pip.pypa.io/en/stable/"&gt;pip&lt;/a&gt; and 
  &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; to handle
  &lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A free &lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio account&lt;/a&gt; to use their 
  &lt;a href="https://www.twilio.com/docs/api/rest/sending-messages"&gt;SMS web API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open source 
  &lt;a href="https://pypi.org/project/twilio"&gt;Twilio Python helper library&lt;/a&gt;,
  &lt;a href="https://github.com/twilio/twilio-python/tree/6.0.0"&gt;version 6.0.0&lt;/a&gt; 
  or later&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you need assistance getting pip and virtualenv installed, check out the
first few steps of the 
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide that'll show how to install system packages for those tools.&lt;/p&gt;
&lt;h2&gt;Using a Web API&lt;/h2&gt;
&lt;p&gt;We're going to use a web API to make sending SMS easier and more reliable.
Head to the 
&lt;a href="https://www.twilio.com/try-twilio"&gt;Twilio website and sign up for a free trial account&lt;/a&gt;. If you already have a Twilio account (and you should - it's 
awesome for more than just sending text messages!) then sign into your 
existing account.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160511-send-sms-python/try-twilio.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The Twilio trial account allows you to send text messages to your own 
validated phone number.  When you want to send SMS to any phone number in 
your country or other countries then you can upgrade your account to send 
messages for fractions of a cent.&lt;/p&gt;
&lt;p&gt;After signing up, you will get a free phone number in your country. We can
use that phone number without any configuration to send outbound text 
messsages. You can also receive text messages but that requires changing
the Request URL webhook in the phone number configuration screen - we'll
cover that in a future blog post.&lt;/p&gt;
&lt;h2&gt;Installing Our Dependency&lt;/h2&gt;
&lt;p&gt;Our code will use a helper library to make it easier to send text messages
from Python. We are going to install the helper library from 
&lt;a href="https://pypi.python.org/pypi"&gt;PyPI&lt;/a&gt; into a virtualenv. First we need to
create the virtualenv. In your terminal use the following command to create
a new virtualenv. If you need to install virtualenv take a look at the
&lt;a href="/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html"&gt;how to set up Python 3, Flask and Green Unicorn on Ubuntu 16.04 LTS&lt;/a&gt;
guide.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;virtualenv sendsms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source sendsms/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command prompt will change after we properly activate the virtualenv
to something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160511-send-sms-python/activate-virtualenv.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Now install the Twilio Python helper library. We are using the 6.0.0
or above library version, which is important because the syntax in
this post is backwards-incompatible with 5.x and previous Twilio helper
library versions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install twilio&amp;gt;=6.0.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The helper library is now installed and we can use it with the Python code 
we create and execute.&lt;/p&gt;
&lt;h2&gt;Sending SMS From Python&lt;/h2&gt;
&lt;p&gt;Fire up the Python interpreter in the terminal using the &lt;code&gt;python&lt;/code&gt; command,
or create a new file named &lt;code&gt;send_sms.py&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;We need to grab our account credentials from the Twilio Console to connect 
our Python code to our Twilio account. Go to the 
&lt;a href="https://www.twilio.com/console"&gt;Twilio Console&lt;/a&gt; and copy the Account SID
and Authentication Token into your Python code.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160511-send-sms-python/console-tokens.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Enter the following code into the interpreter or into the new Python file.
You can also copy and paste the code from the 
&lt;a href="https://github.com/fullstackpython/blog-code-examples/blob/master/send-sms-text-messages-python/send_sms.py"&gt;blog-code-examples Git repository&lt;/a&gt;
in the 
&lt;a href="https://github.com/fullstackpython"&gt;Full Stack Python GitHub organization&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# we import the Twilio client from the dependency we just installed&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twilio.rest&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;

&lt;span class="c1"&gt;# the following line needs your Twilio Account SID and Auth Token&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ACxxxxxxxxxxxxxx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;zzzzzzzzzzzzz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# change the &amp;quot;from_&amp;quot; number to your Twilio number and the &amp;quot;to&amp;quot; number&lt;/span&gt;
&lt;span class="c1"&gt;# to the phone number you signed up for Twilio with, or upgrade your&lt;/span&gt;
&lt;span class="c1"&gt;# account to send SMS to any phone number&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+19732644152&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                       &lt;span class="n"&gt;from_&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;+12023351278&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                       &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hello from Python!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All the lines above that start with &lt;code&gt;#&lt;/code&gt; are comments. Once you enter that 
code into the interpreter or run the Python script using 
&lt;code&gt;python send_sms.py&lt;/code&gt; the SMS will be sent.&lt;/p&gt;
&lt;p&gt;In a few seconds you should see a message appear on your phone. I'm on
iOS so here's how the text message I received looked.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160511-send-sms-python/hello-from-python.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;That's it! You can add this code to any Python code to send text messages.
Just keep your Auth Token secret as it'll allow anyone that has it to use
your account to send and receive messages.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160511-send-sms-text-message-python.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>如何在 Ubuntu 16.04 LTS 上设置 Python 3，Flask 和 Green Unicorn</title><link href="https://www.fullstackpython.com/blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html" rel="alternate"></link><published>2017-06-14T00:00:00-04:00</published><updated>2017-06-14T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-05-10:blog/python-3-flask-green-unicorn-ubuntu-1604-xenial-xerus.html</id><summary type="html">&lt;p&gt;&lt;a href="/ubuntu.html"&gt;Ubuntu&lt;/a&gt;'s latest Long Term Support (LTS) 
&lt;a href="/operating-systems.html"&gt;operating system&lt;/a&gt; was released last year, in 
April 2016. The 16.04 update for Ubuntu is known as "Xenial Xerus" and
it is the first Ubuntu release to include &lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt; 
as the default Python installation.&lt;/p&gt;
&lt;p&gt;We can use the Ubuntu release along with Python version 3.5 to 
start a new &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; web application project and run it with 
&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Tools We'll Need&lt;/h2&gt;
&lt;p&gt;Our project will use the Ubuntu 16.04 release along with a few other 
libraries. You don't have to install these tools just yet, we will get 
to them as we progress through the walkthrough. Our requirements
and their current versions as of April 2017 are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04.2 LTS (Xenial Xerus)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; version 
  &lt;a href="https://docs.python.org/3/whatsnew/3.5.html"&gt;3.5.1&lt;/a&gt; 
  (default in Ubuntu 16.04.2)&lt;/li&gt;
&lt;li&gt;&lt;a href="/flask.html"&gt;Flask&lt;/a&gt; web framework version 
  &lt;a href="http://flask.pocoo.org/docs/0.12/"&gt;0.12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; version 
  &lt;a href="http://docs.gunicorn.org/en/stable/news.html"&gt;19.7.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you're running on Mac OS X or Windows, use virtualization software such
as &lt;a href="https://www.parallels.com/products/desktop/"&gt;Parallels&lt;/a&gt; or
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt; with the 
&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu .iso file&lt;/a&gt;. Either the amd64 or
i386 version of 16.04 is fine. I'm using amd64 for development and testing
in this tutorial.&lt;/p&gt;
&lt;p&gt;Once you boot up Ubuntu, you should see a screen like this one.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160510-ubuntu-flask-gunicorn/ubuntu-desktop.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Open up a terminal window to proceed with the setup.&lt;/p&gt;
&lt;h2&gt;System Packages&lt;/h2&gt;
&lt;p&gt;We can see the python3 system version Ubuntu comes with and where its
executable is stored using these commands.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 --version
which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160510-ubuntu-flask-gunicorn/which-python.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our Ubuntu installation requires a few system packages. We will get prompted 
for the superuser password because restricted system access is needed 
to install packages through 
&lt;a href="https://en.wikipedia.org/wiki/Advanced_Packaging_Tool"&gt;apt&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python3-dev python3-pip
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160510-ubuntu-flask-gunicorn/install-packages.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;y&lt;/code&gt; to let the system package installation process do its job.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160510-ubuntu-flask-gunicorn/packages-installed.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The packages we need are now installed. We can continue on to install our 
Python-specific dependencies.&lt;/p&gt;
&lt;h2&gt;Virtualenv&lt;/h2&gt;
&lt;p&gt;In the previous section, &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;virtualenv&lt;/a&gt; 
and &lt;a href="https://pypi.org/project/pip"&gt;pip&lt;/a&gt; were installed to handle our 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt;.
We can now use them to download and install Flask and Gunicorn.&lt;/p&gt;
&lt;p&gt;Create a directory for the virtualenvs. Then create a new virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# make sure pip and setuptools are the latest version
pip3 install --upgrade pip setuptools
# the tilde &amp;quot;~&amp;quot; specifies the user&amp;#39;s home directory, like /home/matt
cd ~
mkdir venvs
# specify the system python3 installation
python3 -m venv venvs/flaskproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source ~/venvs/flaskproj/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our prompt will change after we properly activate the virtualenv.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160510-ubuntu-flask-gunicorn/venv-activated.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our virtualenv is now activated with Python 3. We can install whatever
dependencies we want, in our case Flask and Gunicorn. &lt;/p&gt;
&lt;h2&gt;Flask and Gunicorn&lt;/h2&gt;
&lt;p&gt;We can finally install Flask and Green Unicorn via the pip command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install flask gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It is a good sign if we receive no errors like we see in the following 
screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160510-ubuntu-flask-gunicorn/good-sign.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Create a new directory under our home directory that will store our
Flask project. Change directory into the new folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mkdir ~/flaskproj
cd ~/flaskproj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a new file named &lt;code&gt;__init__.py&lt;/code&gt; within our &lt;code&gt;flaskproj&lt;/code&gt; directory so
we can test to make sure Flask is working properly. I prefer to use
&lt;a href="/vim.html"&gt;Vim&lt;/a&gt; but &lt;a href="/emacs.html"&gt;Emacs&lt;/a&gt; and other 
&lt;a href="/development-environments.html"&gt;development environments&lt;/a&gt; work great as
well.&lt;/p&gt;
&lt;p&gt;Within &lt;code&gt;__init__.py&lt;/code&gt; write the following code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;


&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Response&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;It works!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could run our app with the Flask development server using the 
&lt;code&gt;python __init__.py&lt;/code&gt; command. Instead run the Flask app with
Gunicorn. Go to the directory above the &lt;code&gt;flaskproj&lt;/code&gt; folder, in our
case we can enter &lt;code&gt;cd ~&lt;/code&gt; then use the &lt;code&gt;gunicorn&lt;/code&gt; command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn flaskproj:app
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160510-ubuntu-flask-gunicorn/gunicorn-run.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Sweet, we can bring up our shell Flask app in the web browser at
the &lt;code&gt;localhost:8000&lt;/code&gt; or &lt;code&gt;127.0.0.1:8000&lt;/code&gt; address.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160510-ubuntu-flask-gunicorn/it-works.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Now we're ready for some real &lt;a href="/flask.html"&gt;Flask&lt;/a&gt; development!&lt;/p&gt;
&lt;h2&gt;Ready for Development&lt;/h2&gt;
&lt;p&gt;That's a simple setup for developing with Flask and Gunicorn on 
Ubuntu 16.04. If you need an in-depth step-by-step tutorial to 
deploy your &lt;a href="/wsgi-servers.html"&gt;WSGI-powered web application&lt;/a&gt; to a 
production environment, check out the 
&lt;a href="http://www.deploypython.com/"&gt;Full Stack Python Guide to Deployments book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To determine what to code next for your Python project, read the topics 
found on the &lt;a href="/table-of-contents.html"&gt;table of contents&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Something wrong with this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160510-flask-gunicorn-ubuntu-1604.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>在 Ubuntu 16.04 LTS 上设置 Python 3，Django 和 Gunicorn</title><link href="https://www.fullstackpython.com/blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html" rel="alternate"></link><published>2017-04-28T00:00:00-04:00</published><updated>2017-04-28T00:00:00-04:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-05-09:blog/python-3-django-gunicorn-ubuntu-1604-xenial-xerus.html</id><summary type="html">&lt;p&gt;&lt;a href="/ubuntu.html"&gt;Ubuntu&lt;/a&gt; released the newest Long Term Support (LTS) 
version of its &lt;a href="/operating-systems.html"&gt;operating system&lt;/a&gt; in April 2016. 
The update brings Ubuntu to version 16.04 and its latest code name is 
"Xenial Xerus". 16.04 is the first Ubuntu release to include 
&lt;a href="/python-2-or-3.html"&gt;Python 3&lt;/a&gt; as the default Python installation.&lt;/p&gt;
&lt;p&gt;Let's use this newest Ubuntu release along with Python version 3.5 to 
start a new &lt;a href="/django.html"&gt;Django&lt;/a&gt; web application project and run it with 
&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Tools We Need&lt;/h2&gt;
&lt;p&gt;We will need a few tools to complete our project. Don't worry about 
installing these just yet as we'll get to them as we progress through the
tutorial. The tools and their current versions as of April 2017 are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu 16.04.2 LTS (Xenial Xerus)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/why-use-python.html"&gt;Python&lt;/a&gt; version 
  &lt;a href="https://docs.python.org/3/whatsnew/3.5.html"&gt;3.5.1&lt;/a&gt; 
  (default in Ubuntu 16.04.2). Python 3.6 has been released but 
  Ubuntu 16.04.2 comes with 3.5.1 by default so we'll use the version 3.5.1 
  in this post.&lt;/li&gt;
&lt;li&gt;&lt;a href="/django.html"&gt;Django&lt;/a&gt; web framework version 
  &lt;a href="https://docs.djangoproject.com/en/1.11/releases/1.11/"&gt;1.11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/green-unicorn-gunicorn.html"&gt;Green Unicorn (Gunicorn)&lt;/a&gt; version 
  &lt;a href="http://docs.gunicorn.org/en/stable/news.html"&gt;19.7.1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are running Mac OS X or Windows, use virtualization software such
as &lt;a href="https://www.parallels.com/products/desktop/"&gt;Parallels&lt;/a&gt; 
(this is what I use, but it's Mac OS X-only) or 
&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox&lt;/a&gt; with the 
&lt;a href="http://releases.ubuntu.com/16.04/"&gt;Ubuntu .iso file&lt;/a&gt;. Either the amd64 or
i386 version of 16.04 is fine, but I use amd64 for development and testing
in this blog post.&lt;/p&gt;
&lt;p&gt;When we boot up for the first time, we should see a desktop screen like 
this one.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160509-ubuntu-django-gunicorn/ubuntu-desktop.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Open up terminal to proceed with the setup.&lt;/p&gt;
&lt;h2&gt;System Packages&lt;/h2&gt;
&lt;p&gt;We can see the python3 version Ubuntu comes with, as well as where its
executable is stored.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python3 --version
which python3
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160509-ubuntu-django-gunicorn/which-python.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our Ubuntu installation first needs system packages for Python development.
You'll be prompted for your superuser password because restricted system
access is required to install packages through apt.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install python3-pip python3-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160509-ubuntu-django-gunicorn/install-packages.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Enter &lt;code&gt;y&lt;/code&gt; and let the system package installation process run.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160509-ubuntu-django-gunicorn/packages-installed.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;The basic system packages we need are now installed so we can proceed to
our Python-specific dependencies.&lt;/p&gt;
&lt;h2&gt;Virtualenv&lt;/h2&gt;
&lt;p&gt;Virtualenv and pip for isolating and handling 
&lt;a href="/application-dependencies.html"&gt;application dependencies&lt;/a&gt; were just 
installed via system packages so we can now use them to obtain Django and 
Gunicorn.&lt;/p&gt;
&lt;p&gt;Create a directory to store virtualenvs then put a new virtualenv in it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# make sure pip and setuptools are the latest version
pip3 install --upgrade pip setuptools
# the tilde &amp;quot;~&amp;quot; specifies the user&amp;#39;s home directory, like /home/matt
cd ~
mkdir venvs
# specify the system python3 installation
python3 -m venv venvs/djproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activate the virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;source ~/venvs/djproject/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We should see our prompt change so that we know the virtualenv is properly 
activated.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160509-ubuntu-django-gunicorn/venv-activated.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Our virtualenv with Python 3 is activated so we can install whatever
dependencies we want, such as Django and Gunicorn. &lt;/p&gt;
&lt;h2&gt;Django and Gunicorn&lt;/h2&gt;
&lt;p&gt;Time to install Django and Green Unicorn into our virtualenv.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install django gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No errors is a good sign everything worked for us.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160509-ubuntu-django-gunicorn/good-sign.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Create a new Django project named &lt;code&gt;djproject&lt;/code&gt;, or whatever you want to name
your project. Then change into the directory for the new project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;django-admin startproject djproject
cd djproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We could run Django with the development server using the 
&lt;code&gt;python manage.py runserver&lt;/code&gt; command. However, start Django up with
Gunicorn instead.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;gunicorn djproject.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img src="/img/160509-ubuntu-django-gunicorn/gunicorn-run.png" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Awesome, now we can bring up our shell project in the web browser at
the &lt;code&gt;localhost:8000&lt;/code&gt; or &lt;code&gt;127.0.0.1:8000&lt;/code&gt; address.&lt;/p&gt;
&lt;p&gt;&lt;img src="/img/160509-ubuntu-django-gunicorn/it-worked.jpg" width="100%" class="technical-diagram img-rounded"&gt;&lt;/p&gt;
&lt;p&gt;Ready for development!&lt;/p&gt;
&lt;h2&gt;Ready for Development&lt;/h2&gt;
&lt;p&gt;Those are the basics for starting development with Django and Gunicorn on 
Ubuntu 16.04. If you need an even more in-depth step-by-step tutorial to 
deploy your Python web application to a production environment, check out the 
&lt;a href="http://www.deploypython.com/"&gt;Full Stack Python Guide to Deployments book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To figure out what to do next for your Python project, read the topics 
found on the &lt;a href="/table-of-contents.html"&gt;table of contents&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Questions? Contact me via Twitter 
&lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;. I'm also on GitHub with
the username &lt;a href="https://github.com/mattmakai"&gt;mattmakai&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;See something wrong in this post? Fork 
&lt;a href="https://github.com/mattmakai/fullstackpython.com/blob/master/content/posts/160509-django-gunicorn-ubuntu-1604.markdown"&gt;this page's source on GitHub&lt;/a&gt;
and submit a pull request.&lt;/p&gt;</summary></entry><entry><title>全栈 Python 博客</title><link href="https://www.fullstackpython.com/blog/full-stack-python-blog.html" rel="alternate"></link><published>2017-12-28T00:00:00-05:00</published><updated>2017-12-28T00:00:00-05:00</updated><author><name>Matt Makai</name></author><id>tag:www.fullstackpython.com,2016-05-08:blog/full-stack-python-blog.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.fullstackpython.com/"&gt;Full Stack Python&lt;/a&gt; began 
&lt;a href="/change-log.html"&gt;way back in December 2012&lt;/a&gt;
when I started writing the initial &lt;a href="/deployment.html"&gt;deployment&lt;/a&gt;, 
&lt;a href="/servers.html"&gt;server&lt;/a&gt;, &lt;a href="/operating-systems.html"&gt;operating system&lt;/a&gt;, 
&lt;a href="/web-servers.html"&gt;web server&lt;/a&gt; and &lt;a href="/wsgi-servers.html"&gt;WSGI server&lt;/a&gt; pages. 
The site has has broadly expanded out into a 
&lt;a href="/table-of-contents.html"&gt;many other subjects&lt;/a&gt; outside the deployment 
topics I originally started this site to explain.&lt;/p&gt;
&lt;p&gt;However, I frequently wanted to write a Python walkthrough that was not a
good fit for the page format I use for each topic. Many of those walkthroughs
became &lt;a href="https://www.twilio.com/blog/author/mmakai"&gt;Twilio blog posts&lt;/a&gt;
but not all of them were quite the right fit on there. I'll still write
more &lt;a href="/twilio.html"&gt;Twilio&lt;/a&gt; tutorials, but this 
&lt;a href="/blog.html"&gt;Full Stack Python blog&lt;/a&gt; is the spot for technical posts that 
fall outside the Twilio domain.&lt;/p&gt;
&lt;p&gt;Let me know what you think and what tutorials you'd like to see in the 
future. &lt;/p&gt;
&lt;p&gt;Hit me up on Twitter &lt;a href="https://twitter.com/fullstackpython"&gt;@fullstackpython&lt;/a&gt;
or &lt;a href="https://twitter.com/mattmakai"&gt;@mattmakai&lt;/a&gt;.&lt;/p&gt;</summary></entry></feed>